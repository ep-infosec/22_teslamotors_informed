{"version":3,"file":"main.93030ce7.iframe.bundle.js","sources":["webpack:///./.storybook/assets/normalize.css?0f0a","webpack:///./.storybook/assets/prism.css?efb1","webpack:///./.storybook/assets/prism.js","webpack:///./.storybook/assets/styles.css?4647","webpack:///./.storybook/preview.js","webpack:///./.storybook/preview.js-generated-config-entry.js","webpack:///./CHANGELOG.md","webpack:///./generated-stories-entry.js","webpack:///./.storybook/assets/normalize.css","webpack:///./.storybook/assets/prism.css","webpack:///./.storybook/assets/styles.css","webpack:///./src/Context.js","webpack:///./src/FormController.js","webpack:///./src/ObjectMap.js","webpack:///./src/components/ArrayField.js","webpack:///./src/components/Debug.js","webpack:///./src/components/DebugField.js","webpack:///./src/components/Form.js","webpack:///./src/components/FormComponents.js","webpack:///./src/components/FormField.js","webpack:///./src/components/FormFields.js","webpack:///./src/components/FormProvider.js","webpack:///./src/components/FormStateAccessor.js","webpack:///./src/components/Informed.js","webpack:///./src/components/Multistep.js","webpack:///./src/components/Relevant.js","webpack:///./src/components/SchemaFields.js","webpack:///./src/components/Scope.js","webpack:///./src/components/UpdateFields.js","webpack:///./src/components/form-fields/AddButton.js","webpack:///./src/components/form-fields/ArrayField.js","webpack:///./src/components/form-fields/Checkbox.js","webpack:///./src/components/form-fields/Hidden.js","webpack:///./src/components/form-fields/Input.js","webpack:///./src/components/form-fields/Option.js","webpack:///./src/components/form-fields/Radio.js","webpack:///./src/components/form-fields/RadioGroup.js","webpack:///./src/components/form-fields/RemoveButton.js","webpack:///./src/components/form-fields/Select.js","webpack:///./src/components/form-fields/TextArea.js","webpack:///./src/debug.js","webpack:///./src/fieldMap.js","webpack:///./src/hooks/useArrayField.js","webpack:///./src/hooks/useArrayFieldApi.js","webpack:///./src/hooks/useArrayFieldItemApi.js","webpack:///./src/hooks/useArrayFieldItemState.js","webpack:///./src/hooks/useArrayFieldState.js","webpack:///./src/hooks/useConditional.js","webpack:///./src/hooks/useCursorPosition.js","webpack:///./src/hooks/useEffectOnce.js","webpack:///./src/hooks/useField.js","webpack:///./src/hooks/useFieldApi.js","webpack:///./src/hooks/useFieldState.js","webpack:///./src/hooks/useFieldSubscription.js","webpack:///./src/hooks/useForceUpdate.js","webpack:///./src/hooks/useForm.js","webpack:///./src/hooks/useFormApi.js","webpack:///./src/hooks/useFormController.js","webpack:///./src/hooks/useFormState.js","webpack:///./src/hooks/useFormStateSelector.js","webpack:///./src/hooks/useInformed.js","webpack:///./src/hooks/useInformedApi.js","webpack:///./src/hooks/useInformedField.js","webpack:///./src/hooks/useInformedState.js","webpack:///./src/hooks/useMultistep.js","webpack:///./src/hooks/useMultistepApi.js","webpack:///./src/hooks/useMultistepState.js","webpack:///./src/hooks/useMultistepStep.js","webpack:///./src/hooks/useRadioGroup.js","webpack:///./src/hooks/useRelevance.js","webpack:///./src/hooks/useScope.js","webpack:///./src/hooks/useScopedApi.js","webpack:///./src/hooks/useScoper.js","webpack:///./src/hooks/useStateWithGetter.js","webpack:///./src/hooks/useUpdateEffect.js","webpack:///./src/index.js","webpack:///./src/proxy.js","webpack:///./src/structuredClone.js","webpack:///./src/utils.js","webpack:///./stories sync nonrecursive ^\\.[\\\\/](","webpack:///./stories/Arrays/AlternateSyntax/README.md","webpack:///./stories/Arrays/AlternateSyntax/index.js","webpack:///./stories/Arrays/ArrayFieldItem/README.md","webpack:///./stories/Arrays/ArrayFieldItem/index.js","webpack:///./stories/Arrays/ArrayOfFields/README.md","webpack:///./stories/Arrays/ArrayOfFields/index.js","webpack:///./stories/Arrays/ArrayOfScopes/README.md","webpack:///./stories/Arrays/ArrayOfScopes/index.js","webpack:///./stories/Arrays/DependentFields/README.md","webpack:///./stories/Arrays/DependentFields/index.js","webpack:///./stories/Arrays/DynamicArrays/README.md","webpack:///./stories/Arrays/DynamicArrays/index.js","webpack:///./stories/Arrays/HugeArrayForm/README.md","webpack:///./stories/Arrays/HugeArrayForm/index.js","webpack:///./stories/Arrays/NestedFields/README.md","webpack:///./stories/Arrays/NestedFields/index.js","webpack:///./stories/Arrays/index.js","webpack:///./stories/CarColor/README.md","webpack:///./stories/CarColor/index.js","webpack:///./stories/Conditionals/ConditionalProps/README.md","webpack:///./stories/Conditionals/ConditionalProps/index.js","webpack:///./stories/Conditionals/ConditionalPropsSchema/README.md","webpack:///./stories/Conditionals/ConditionalPropsSchema/index.js","webpack:///./stories/CustomInputs/FormattedObjectInput/README.md","webpack:///./stories/CustomInputs/FormattedObjectInput/index.js","webpack:///./stories/CustomInputs/FromScratch/README.md","webpack:///./stories/CustomInputs/FromScratch/index.js","webpack:///./stories/CustomInputs/Intro/README.md","webpack:///./stories/CustomInputs/Intro/index.js","webpack:///./stories/CustomInputs/ObjectInput/README.md","webpack:///./stories/CustomInputs/ObjectInput/index.js","webpack:///./stories/CustomInputs/Slider/README.md","webpack:///./stories/CustomInputs/Slider/index.js","webpack:///./stories/CustomInputs/UseField/README.md","webpack:///./stories/CustomInputs/UseField/index.js","webpack:///./stories/CustomInputs/UseFieldHooked/README.md","webpack:///./stories/CustomInputs/UseFieldHooked/index.js","webpack:///./stories/CustomInputs/index.js","webpack:///./stories/Debugging/Debug/README.md","webpack:///./stories/Debugging/Debug/index.js","webpack:///./stories/Dynamic/AsyncDependentFields/README.md","webpack:///./stories/Dynamic/AsyncDependentFields/index.js","webpack:///./stories/Dynamic/Dependent/README.md","webpack:///./stories/Dynamic/Dependent/index.js","webpack:///./stories/Dynamic/DynamicFields/README.md","webpack:///./stories/Dynamic/DynamicFields/index.js","webpack:///./stories/Form/Api/Intro/README.md","webpack:///./stories/Form/Api/Intro/index.js","webpack:///./stories/Form/Api/UseFormApi/README.md","webpack:///./stories/Form/Api/UseFormApi/index.js","webpack:///./stories/Form/Api/index.js","webpack:///./stories/Form/Basic/README.md","webpack:///./stories/Form/Basic/index.js","webpack:///./stories/Form/Big/README.md","webpack:///./stories/Form/Big/index.js","webpack:///./stories/Form/Complex/README.md","webpack:///./stories/Form/Complex/index.js","webpack:///./stories/Form/Dynamic/README.md","webpack:///./stories/Form/Dynamic/index.js","webpack:///./stories/Form/FeatureTester/README.md","webpack:///./stories/Form/FeatureTester/index.js","webpack:///./stories/Form/FormProvider/README.md","webpack:///./stories/Form/FormProvider/index.js","webpack:///./stories/Form/FormatDependent/README.md","webpack:///./stories/Form/FormatDependent/index.js","webpack:///./stories/Form/Modified/README.md","webpack:///./stories/Form/Modified/index.js","webpack:///./stories/Form/Path/README.md","webpack:///./stories/Form/Path/index.js","webpack:///./stories/Form/Props/README.md","webpack:///./stories/Form/Props/index.js","webpack:///./stories/Form/State/README.md","webpack:///./stories/Form/State/index.js","webpack:///./stories/Formatting/Clean/README.md","webpack:///./stories/Formatting/Clean/index.js","webpack:///./stories/Formatting/Formatter/README.md","webpack:///./stories/Formatting/Formatter/index.js","webpack:///./stories/Formatting/FormatterFunctions/README.md","webpack:///./stories/Formatting/FormatterFunctions/index.js","webpack:///./stories/Formatting/Mask/README.md","webpack:///./stories/Formatting/Mask/index.js","webpack:///./stories/Formatting/NumberFormatter/README.md","webpack:///./stories/Formatting/NumberFormatter/index.js","webpack:///./stories/Formatting/Parse/README.md","webpack:///./stories/Formatting/Parse/index.js","webpack:///./stories/GlobalForms/Intro/README.md","webpack:///./stories/GlobalForms/Intro/index.js","webpack:///./stories/Gotchas/ChangingInitialValues/README.md","webpack:///./stories/Gotchas/ChangingInitialValues/index.js","webpack:///./stories/Gotchas/InitializeIfPristine/README.md","webpack:///./stories/Gotchas/InitializeIfPristine/index.js","webpack:///./stories/Gotchas/InitialvsDefault/README.md","webpack:///./stories/Gotchas/InitialvsDefault/index.js","webpack:///./stories/Gotchas/Scope/WithField.js","webpack:///./stories/Gotchas/Scope/WithField.md","webpack:///./stories/Gotchas/Scope/index.js","webpack:///./stories/Hooks/index.js","webpack:///./stories/Hooks/useField/index.js","webpack:///./stories/Hooks/useField/useFieldCustom/README.md","webpack:///./stories/Hooks/useField/useFieldCustom/index.js","webpack:///./stories/Hooks/useField/useFieldDirect/README.md","webpack:///./stories/Hooks/useField/useFieldDirect/index.js","webpack:///./stories/Hooks/useFieldApi/README.md","webpack:///./stories/Hooks/useFieldApi/index.js","webpack:///./stories/Hooks/useFieldState/README.md","webpack:///./stories/Hooks/useFieldState/index.js","webpack:///./stories/Hooks/useForm/README.md","webpack:///./stories/Hooks/useForm/index.js","webpack:///./stories/Hooks/useFormApi/README.md","webpack:///./stories/Hooks/useFormApi/index.js","webpack:///./stories/Hooks/useFormState/README.md","webpack:///./stories/Hooks/useFormState/index.js","webpack:///./stories/Hooks/useFormStateSelector/README.md","webpack:///./stories/Hooks/useFormStateSelector/index.js","webpack:///./stories/Inputs/CheckboxInput/README.md","webpack:///./stories/Inputs/CheckboxInput/index.js","webpack:///./stories/Inputs/GoogleApi/README.md","webpack:///./stories/Inputs/GoogleApi/index.js","webpack:///./stories/Inputs/Intro/README.md","webpack:///./stories/Inputs/Intro/index.js","webpack:///./stories/Inputs/MultiSelectInput/README.md","webpack:///./stories/Inputs/MultiSelectInput/index.js","webpack:///./stories/Inputs/NumberInput/README.md","webpack:///./stories/Inputs/NumberInput/index.js","webpack:///./stories/Inputs/RadioInput/README.md","webpack:///./stories/Inputs/RadioInput/index.js","webpack:///./stories/Inputs/SelectInput/README.md","webpack:///./stories/Inputs/SelectInput/index.js","webpack:///./stories/Inputs/TextAreaInput/README.md","webpack:///./stories/Inputs/TextAreaInput/index.js","webpack:///./stories/Inputs/TextInput/README.md","webpack:///./stories/Inputs/TextInput/index.js","webpack:///./stories/Inputs/index.js","webpack:///./stories/Intro/Changelog.js","webpack:///./stories/Intro/CustomIntro/README.md","webpack:///./stories/Intro/CustomIntro/index.js","webpack:///./stories/Intro/FormApi/ApiRef/README.md","webpack:///./stories/Intro/FormApi/ApiRef/index.js","webpack:///./stories/Intro/FormApi/RenderProp/README.md","webpack:///./stories/Intro/FormApi/RenderProp/index.js","webpack:///./stories/Intro/FormApi/UseFormApi/README.md","webpack:///./stories/Intro/FormApi/UseFormApi/index.js","webpack:///./stories/Intro/FormApi/index.js","webpack:///./stories/Intro/FormState/README.md","webpack:///./stories/Intro/FormState/index.js","webpack:///./stories/Intro/GettingStarted/README.md","webpack:///./stories/Intro/GettingStarted/index.js","webpack:///./stories/Intro/Intro/README.md","webpack:///./stories/Intro/Intro/index.js","webpack:///./stories/Intro/SchemaVsFormat/README.md","webpack:///./stories/Intro/SchemaVsFormat/index.js","webpack:///./stories/Intro/UseForm/README.md","webpack:///./stories/Intro/UseForm/index.js","webpack:///./stories/Intro/WhatElse/README.md","webpack:///./stories/Intro/WhatElse/index.js","webpack:///./stories/Intro/index.js","webpack:///./stories/KeepState/Keep/README.md","webpack:///./stories/KeepState/Keep/index.js","webpack:///./stories/KeepState/KeepState/README.md","webpack:///./stories/KeepState/KeepState/index.js","webpack:///./stories/KeepState/KeepStateIfRelevant/README.md","webpack:///./stories/KeepState/KeepStateIfRelevant/index.js","webpack:///./stories/Multistep/Actions/README.md","webpack:///./stories/Multistep/Actions/index.js","webpack:///./stories/Multistep/Basic/README.md","webpack:///./stories/Multistep/Basic/index.js","webpack:///./stories/Multistep/Complex/README.md","webpack:///./stories/Multistep/Complex/index.js","webpack:///./stories/Multistep/MultistepState/README.md","webpack:///./stories/Multistep/MultistepState/index.js","webpack:///./stories/Playground/Format/README.md","webpack:///./stories/Playground/Format/index.js","webpack:///./stories/Playground/Schema/README.md","webpack:///./stories/Playground/Schema/index.js","webpack:///./stories/Relevance/ComplexRelevance/README.md","webpack:///./stories/Relevance/ComplexRelevance/index.js","webpack:///./stories/Relevance/RelevanceProp/README.md","webpack:///./stories/Relevance/RelevanceProp/index.js","webpack:///./stories/Relevance/RelevantComponent/README.md","webpack:///./stories/Relevance/RelevantComponent/index.js","webpack:///./stories/Relevance/ScopedRelevance/README.md","webpack:///./stories/Relevance/ScopedRelevance/index.js","webpack:///./stories/Schema/ArrayFieldSchema/README.md","webpack:///./stories/Schema/ArrayFieldSchema/index.js","webpack:///./stories/Schema/ArrayFieldSchemaNested/README.md","webpack:///./stories/Schema/ArrayFieldSchemaNested/index.js","webpack:///./stories/Schema/ArrayFieldSchemaRelevant/README.md","webpack:///./stories/Schema/ArrayFieldSchemaRelevant/index.js","webpack:///./stories/Schema/ChangingSchema/README.md","webpack:///./stories/Schema/ChangingSchema/index.js","webpack:///./stories/Schema/ConditionalOptions/README.md","webpack:///./stories/Schema/ConditionalOptions/index.js","webpack:///./stories/Schema/ConditionalSchema/README.md","webpack:///./stories/Schema/ConditionalSchema/index.js","webpack:///./stories/Schema/ConditionalSchemaControl/README.md","webpack:///./stories/Schema/ConditionalSchemaControl/index.js","webpack:///./stories/Schema/CustomSchema/README.md","webpack:///./stories/Schema/CustomSchema/index.js","webpack:///./stories/Schema/FormattedSchema/README.md","webpack:///./stories/Schema/FormattedSchema/index.js","webpack:///./stories/Schema/Intro/README.md","webpack:///./stories/Schema/Intro/index.js","webpack:///./stories/Schema/NestedSchema/README.md","webpack:///./stories/Schema/NestedSchema/index.js","webpack:///./stories/Schema/SchemaComponents/README.md","webpack:///./stories/Schema/SchemaComponents/index.js","webpack:///./stories/Schema/SubSchema/README.md","webpack:///./stories/Schema/SubSchema/index.js","webpack:///./stories/Scope/ScopeComponent/README.md","webpack:///./stories/Scope/ScopeComponent/index.js","webpack:///./stories/TLDR/GettingStarted/README.md","webpack:///./stories/TLDR/GettingStarted/index.js","webpack:///./stories/TLDR/Intro/README.md","webpack:///./stories/TLDR/Intro/index.js","webpack:///./stories/TLDR/index.js","webpack:///./stories/Validation/AjvValidation/README.md","webpack:///./stories/Validation/AjvValidation/index.js","webpack:///./stories/Validation/AjvValidationNoRender/README.md","webpack:///./stories/Validation/AjvValidationNoRender/index.js","webpack:///./stories/Validation/AsyncValidation/README.md","webpack:///./stories/Validation/AsyncValidation/index.js","webpack:///./stories/Validation/ComplexValidation/README.md","webpack:///./stories/Validation/ComplexValidation/index.js","webpack:///./stories/Validation/Elon/README.md","webpack:///./stories/Validation/Elon/index.js","webpack:///./stories/Validation/FieldLevelYupValidation/README.md","webpack:///./stories/Validation/FieldLevelYupValidation/index.js","webpack:///./stories/Validation/Notifications/README.md","webpack:///./stories/Validation/Notifications/index.js","webpack:///./stories/Validation/Required/README.md","webpack:///./stories/Validation/Required/index.js","webpack:///./stories/Validation/SimpleValidation/README.md","webpack:///./stories/Validation/SimpleValidation/index.js","webpack:///./stories/Validation/ValidationControl/README.md","webpack:///./stories/Validation/ValidationControl/index.js","webpack:///./stories/Validation/ValidationMessages/Format/README.md","webpack:///./stories/Validation/ValidationMessages/Format/index.js","webpack:///./stories/Validation/ValidationMessages/Schema/README.md","webpack:///./stories/Validation/ValidationMessages/Schema/index.js","webpack:///./stories/Validation/ValidationMessages/index.js","webpack:///./stories/Validation/YupValidation/README.md","webpack:///./stories/Validation/YupValidation/index.js","webpack:///./stories/index.js","webpack:///./stories/utils/Code.js","webpack:///./stories/utils/CodeBlock.js","webpack:///./stories/utils/Modal.js","webpack:///./stories/utils/StoryWrapper.js","webpack:///./stories/utils/withDocs.js","webpack:///./storybook-init-framework-entry.js","webpack:///./util.inspect (ignored)"],"sourcesContent":["var api = require(\"!../../node_modules/@storybook/builder-webpack4/node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../../node_modules/@storybook/builder-webpack4/node_modules/css-loader/dist/cjs.js??ref--7-1!../../node_modules/postcss-loader/dist/cjs.js??ref--7-2!./normalize.css\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nmodule.exports = content.locals || {};","var api = require(\"!../../node_modules/@storybook/builder-webpack4/node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../../node_modules/@storybook/builder-webpack4/node_modules/css-loader/dist/cjs.js??ref--7-1!../../node_modules/postcss-loader/dist/cjs.js??ref--7-2!./prism.css\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nmodule.exports = content.locals || {};","/* http://prismjs.com/download.html?themes=prism-okaidia&languages=markup+css+clike+javascript+json+jsx&plugins=previewer-base */\nvar _self=\"undefined\"!=typeof window?window:\"undefined\"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope?self:{},Prism=function(){var e=/\\blang(?:uage)?-(\\w+)\\b/i,t=0,n=_self.Prism={manual:_self.Prism&&_self.Prism.manual,util:{encode:function(e){return e instanceof a?new a(e.type,n.util.encode(e.content),e.alias):\"Array\"===n.util.type(e)?e.map(n.util.encode):e.replace(/&/g,\"&amp;\").replace(/</g,\"&lt;\").replace(/\\u00a0/g,\" \")},type:function(e){return Object.prototype.toString.call(e).match(/\\[object (\\w+)\\]/)[1]},objId:function(e){return e.__id||Object.defineProperty(e,\"__id\",{value:++t}),e.__id},clone:function(e){var t=n.util.type(e);switch(t){case\"Object\":var a={};for(var r in e)e.hasOwnProperty(r)&&(a[r]=n.util.clone(e[r]));return a;case\"Array\":return e.map&&e.map(function(e){return n.util.clone(e)})}return e}},languages:{extend:function(e,t){var a=n.util.clone(n.languages[e]);for(var r in t)a[r]=t[r];return a},insertBefore:function(e,t,a,r){r=r||n.languages;var i=r[e];if(2==arguments.length){a=arguments[1];for(var l in a)a.hasOwnProperty(l)&&(i[l]=a[l]);return i}var o={};for(var s in i)if(i.hasOwnProperty(s)){if(s==t)for(var l in a)a.hasOwnProperty(l)&&(o[l]=a[l]);o[s]=i[s]}return n.languages.DFS(n.languages,function(t,n){n===r[e]&&t!=e&&(this[t]=o)}),r[e]=o},DFS:function(e,t,a,r){r=r||{};for(var i in e)e.hasOwnProperty(i)&&(t.call(e,i,e[i],a||i),\"Object\"!==n.util.type(e[i])||r[n.util.objId(e[i])]?\"Array\"!==n.util.type(e[i])||r[n.util.objId(e[i])]||(r[n.util.objId(e[i])]=!0,n.languages.DFS(e[i],t,i,r)):(r[n.util.objId(e[i])]=!0,n.languages.DFS(e[i],t,null,r)))}},plugins:{},highlightAll:function(e,t){var a={callback:t,selector:'code[class*=\"language-\"], [class*=\"language-\"] code, code[class*=\"lang-\"], [class*=\"lang-\"] code'};n.hooks.run(\"before-highlightall\",a);for(var r,i=a.elements||document.querySelectorAll(a.selector),l=0;r=i[l++];)n.highlightElement(r,e===!0,a.callback)},highlightElement:function(t,a,r){for(var i,l,o=t;o&&!e.test(o.className);)o=o.parentNode;o&&(i=(o.className.match(e)||[,\"\"])[1].toLowerCase(),l=n.languages[i]),t.className=t.className.replace(e,\"\").replace(/\\s+/g,\" \")+\" language-\"+i,o=t.parentNode,/pre/i.test(o.nodeName)&&(o.className=o.className.replace(e,\"\").replace(/\\s+/g,\" \")+\" language-\"+i);var s=t.textContent,u={element:t,language:i,grammar:l,code:s};if(n.hooks.run(\"before-sanity-check\",u),!u.code||!u.grammar)return u.code&&(n.hooks.run(\"before-highlight\",u),u.element.textContent=u.code,n.hooks.run(\"after-highlight\",u)),n.hooks.run(\"complete\",u),void 0;if(n.hooks.run(\"before-highlight\",u),a&&_self.Worker){var g=new Worker(n.filename);g.onmessage=function(e){u.highlightedCode=e.data,n.hooks.run(\"before-insert\",u),u.element.innerHTML=u.highlightedCode,r&&r.call(u.element),n.hooks.run(\"after-highlight\",u),n.hooks.run(\"complete\",u)},g.postMessage(JSON.stringify({language:u.language,code:u.code,immediateClose:!0}))}else u.highlightedCode=n.highlight(u.code,u.grammar,u.language),n.hooks.run(\"before-insert\",u),u.element.innerHTML=u.highlightedCode,r&&r.call(t),n.hooks.run(\"after-highlight\",u),n.hooks.run(\"complete\",u)},highlight:function(e,t,r){var i=n.tokenize(e,t);return a.stringify(n.util.encode(i),r)},matchGrammar:function(e,t,a,r,i,l,o){var s=n.Token;for(var u in a)if(a.hasOwnProperty(u)&&a[u]){if(u==o)return;var g=a[u];g=\"Array\"===n.util.type(g)?g:[g];for(var c=0;c<g.length;++c){var h=g[c],f=h.inside,d=!!h.lookbehind,m=!!h.greedy,p=0,y=h.alias;if(m&&!h.pattern.global){var v=h.pattern.toString().match(/[imuy]*$/)[0];h.pattern=RegExp(h.pattern.source,v+\"g\")}h=h.pattern||h;for(var b=r,k=i;b<t.length;k+=t[b].length,++b){var w=t[b];if(t.length>e.length)return;if(!(w instanceof s)){h.lastIndex=0;var _=h.exec(w),P=1;if(!_&&m&&b!=t.length-1){if(h.lastIndex=k,_=h.exec(e),!_)break;for(var A=_.index+(d?_[1].length:0),j=_.index+_[0].length,x=b,O=k,S=t.length;S>x&&(j>O||!t[x].type&&!t[x-1].greedy);++x)O+=t[x].length,A>=O&&(++b,k=O);if(t[b]instanceof s||t[x-1].greedy)continue;P=x-b,w=e.slice(k,O),_.index-=k}if(_){d&&(p=_[1].length);var A=_.index+p,_=_[0].slice(p),j=A+_.length,N=w.slice(0,A),C=w.slice(j),E=[b,P];N&&(++b,k+=N.length,E.push(N));var L=new s(u,f?n.tokenize(_,f):_,y,_,m);if(E.push(L),C&&E.push(C),Array.prototype.splice.apply(t,E),1!=P&&n.matchGrammar(e,t,a,b,k,!0,u),l)break}else if(l)break}}}}},tokenize:function(e,t){var a=[e],r=t.rest;if(r){for(var i in r)t[i]=r[i];delete t.rest}return n.matchGrammar(e,a,t,0,0,!1),a},hooks:{all:{},add:function(e,t){var a=n.hooks.all;a[e]=a[e]||[],a[e].push(t)},run:function(e,t){var a=n.hooks.all[e];if(a&&a.length)for(var r,i=0;r=a[i++];)r(t)}}},a=n.Token=function(e,t,n,a,r){this.type=e,this.content=t,this.alias=n,this.length=0|(a||\"\").length,this.greedy=!!r};if(a.stringify=function(e,t,r){if(\"string\"==typeof e)return e;if(\"Array\"===n.util.type(e))return e.map(function(n){return a.stringify(n,t,e)}).join(\"\");var i={type:e.type,content:a.stringify(e.content,t,r),tag:\"span\",classes:[\"token\",e.type],attributes:{},language:t,parent:r};if(\"comment\"==i.type&&(i.attributes.spellcheck=\"true\"),e.alias){var l=\"Array\"===n.util.type(e.alias)?e.alias:[e.alias];Array.prototype.push.apply(i.classes,l)}n.hooks.run(\"wrap\",i);var o=Object.keys(i.attributes).map(function(e){return e+'=\"'+(i.attributes[e]||\"\").replace(/\"/g,\"&quot;\")+'\"'}).join(\" \");return\"<\"+i.tag+' class=\"'+i.classes.join(\" \")+'\"'+(o?\" \"+o:\"\")+\">\"+i.content+\"</\"+i.tag+\">\"},!_self.document)return _self.addEventListener?(_self.addEventListener(\"message\",function(e){var t=JSON.parse(e.data),a=t.language,r=t.code,i=t.immediateClose;_self.postMessage(n.highlight(r,n.languages[a],a)),i&&_self.close()},!1),_self.Prism):_self.Prism;var r=document.currentScript||[].slice.call(document.getElementsByTagName(\"script\")).pop();return r&&(n.filename=r.src,!document.addEventListener||n.manual||r.hasAttribute(\"data-manual\")||(\"loading\"!==document.readyState?window.requestAnimationFrame?window.requestAnimationFrame(n.highlightAll):window.setTimeout(n.highlightAll,16):document.addEventListener(\"DOMContentLoaded\",n.highlightAll))),_self.Prism}();\"undefined\"!=typeof module&&module.exports&&(module.exports=Prism),\"undefined\"!=typeof global&&(global.Prism=Prism);\nPrism.languages.markup={comment:/<!--[\\s\\S]*?-->/,prolog:/<\\?[\\s\\S]+?\\?>/,doctype:/<!DOCTYPE[\\s\\S]+?>/i,cdata:/<!\\[CDATA\\[[\\s\\S]*?]]>/i,tag:{pattern:/<\\/?(?!\\d)[^\\s>\\/=$<]+(?:\\s+[^\\s>\\/=]+(?:=(?:(\"|')(?:\\\\\\1|\\\\?(?!\\1)[\\s\\S])*\\1|[^\\s'\">=]+))?)*\\s*\\/?>/i,inside:{tag:{pattern:/^<\\/?[^\\s>\\/]+/i,inside:{punctuation:/^<\\/?/,namespace:/^[^\\s>\\/:]+:/}},\"attr-value\":{pattern:/=(?:('|\")[\\s\\S]*?(\\1)|[^\\s>]+)/i,inside:{punctuation:/[=>\"']/}},punctuation:/\\/?>/,\"attr-name\":{pattern:/[^\\s>\\/]+/,inside:{namespace:/^[^\\s>\\/:]+:/}}}},entity:/&#?[\\da-z]{1,8};/i},Prism.languages.markup.tag.inside[\"attr-value\"].inside.entity=Prism.languages.markup.entity,Prism.hooks.add(\"wrap\",function(a){\"entity\"===a.type&&(a.attributes.title=a.content.replace(/&amp;/,\"&\"))}),Prism.languages.xml=Prism.languages.markup,Prism.languages.html=Prism.languages.markup,Prism.languages.mathml=Prism.languages.markup,Prism.languages.svg=Prism.languages.markup;\nPrism.languages.css={comment:/\\/\\*[\\s\\S]*?\\*\\//,atrule:{pattern:/@[\\w-]+?.*?(;|(?=\\s*\\{))/i,inside:{rule:/@[\\w-]+/}},url:/url\\((?:([\"'])(\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1|.*?)\\)/i,selector:/[^\\{\\}\\s][^\\{\\};]*?(?=\\s*\\{)/,string:{pattern:/(\"|')(\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,greedy:!0},property:/(\\b|\\B)[\\w-]+(?=\\s*:)/i,important:/\\B!important\\b/i,\"function\":/[-a-z0-9]+(?=\\()/i,punctuation:/[(){};:]/},Prism.languages.css.atrule.inside.rest=Prism.util.clone(Prism.languages.css),Prism.languages.markup&&(Prism.languages.insertBefore(\"markup\",\"tag\",{style:{pattern:/(<style[\\s\\S]*?>)[\\s\\S]*?(?=<\\/style>)/i,lookbehind:!0,inside:Prism.languages.css,alias:\"language-css\"}}),Prism.languages.insertBefore(\"inside\",\"attr-value\",{\"style-attr\":{pattern:/\\s*style=(\"|').*?\\1/i,inside:{\"attr-name\":{pattern:/^\\s*style/i,inside:Prism.languages.markup.tag.inside},punctuation:/^\\s*=\\s*['\"]|['\"]\\s*$/,\"attr-value\":{pattern:/.+/i,inside:Prism.languages.css}},alias:\"language-css\"}},Prism.languages.markup.tag));\nPrism.languages.clike={comment:[{pattern:/(^|[^\\\\])\\/\\*[\\s\\S]*?\\*\\//,lookbehind:!0},{pattern:/(^|[^\\\\:])\\/\\/.*/,lookbehind:!0}],string:{pattern:/([\"'])(\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,greedy:!0},\"class-name\":{pattern:/((?:\\b(?:class|interface|extends|implements|trait|instanceof|new)\\s+)|(?:catch\\s+\\())[a-z0-9_\\.\\\\]+/i,lookbehind:!0,inside:{punctuation:/(\\.|\\\\)/}},keyword:/\\b(if|else|while|do|for|return|in|instanceof|function|new|try|throw|catch|finally|null|break|continue)\\b/,\"boolean\":/\\b(true|false)\\b/,\"function\":/[a-z0-9_]+(?=\\()/i,number:/\\b-?(?:0x[\\da-f]+|\\d*\\.?\\d+(?:e[+-]?\\d+)?)\\b/i,operator:/--?|\\+\\+?|!=?=?|<=?|>=?|==?=?|&&?|\\|\\|?|\\?|\\*|\\/|~|\\^|%/,punctuation:/[{}[\\];(),.:]/};\nPrism.languages.javascript=Prism.languages.extend(\"clike\",{keyword:/\\b(as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|var|void|while|with|yield)\\b/,number:/\\b-?(0[xX][\\dA-Fa-f]+|0[bB][01]+|0[oO][0-7]+|\\d*\\.?\\d+([Ee][+-]?\\d+)?|NaN|Infinity)\\b/,\"function\":/[_$a-zA-Z\\xA0-\\uFFFF][_$a-zA-Z0-9\\xA0-\\uFFFF]*(?=\\()/i,operator:/-[-=]?|\\+[+=]?|!=?=?|<<?=?|>>?>?=?|=(?:==?|>)?|&[&=]?|\\|[|=]?|\\*\\*?=?|\\/=?|~|\\^=?|%=?|\\?|\\.{3}/}),Prism.languages.insertBefore(\"javascript\",\"keyword\",{regex:{pattern:/(^|[^\\/])\\/(?!\\/)(\\[[^\\]\\r\\n]+]|\\\\.|[^\\/\\\\\\[\\r\\n])+\\/[gimyu]{0,5}(?=\\s*($|[\\r\\n,.;})]))/,lookbehind:!0,greedy:!0}}),Prism.languages.insertBefore(\"javascript\",\"string\",{\"template-string\":{pattern:/`(?:\\\\\\\\|\\\\?[^\\\\])*?`/,greedy:!0,inside:{interpolation:{pattern:/\\$\\{[^}]+\\}/,inside:{\"interpolation-punctuation\":{pattern:/^\\$\\{|\\}$/,alias:\"punctuation\"},rest:Prism.languages.javascript}},string:/[\\s\\S]+/}}}),Prism.languages.markup&&Prism.languages.insertBefore(\"markup\",\"tag\",{script:{pattern:/(<script[\\s\\S]*?>)[\\s\\S]*?(?=<\\/script>)/i,lookbehind:!0,inside:Prism.languages.javascript,alias:\"language-javascript\"}}),Prism.languages.js=Prism.languages.javascript;\nPrism.languages.json={property:/\"(?:\\\\.|[^\\\\\"])*\"(?=\\s*:)/gi,string:/\"(?!:)(?:\\\\.|[^\\\\\"])*\"(?!:)/g,number:/\\b-?(0x[\\dA-Fa-f]+|\\d*\\.?\\d+([Ee][+-]?\\d+)?)\\b/g,punctuation:/[{}[\\]);,]/g,operator:/:/g,\"boolean\":/\\b(true|false)\\b/gi,\"null\":/\\bnull\\b/gi},Prism.languages.jsonp=Prism.languages.json;\n!function(a){var e=a.util.clone(a.languages.javascript);a.languages.jsx=a.languages.extend(\"markup\",e),a.languages.jsx.tag.pattern=/<\\/?[\\w\\.:-]+\\s*(?:\\s+(?:[\\w\\.:-]+(?:=(?:(\"|')(\\\\?[\\s\\S])*?\\1|[^\\s'\">=]+|(\\{[\\s\\S]*?\\})))?|\\{\\.{3}\\w+\\}))*\\s*\\/?>/i,a.languages.jsx.tag.inside[\"attr-value\"].pattern=/=(?!\\{)(?:('|\")[\\s\\S]*?(\\1)|[^\\s>]+)/i,a.languages.insertBefore(\"inside\",\"attr-name\",{spread:{pattern:/\\{\\.{3}\\w+\\}/,inside:{punctuation:/\\{|\\}|\\./,\"attr-value\":/\\w+/}}},a.languages.jsx.tag);var s=a.util.clone(a.languages.jsx);delete s.punctuation,s=a.languages.insertBefore(\"jsx\",\"operator\",{punctuation:/=(?={)|[{}[\\];(),.:]/},{jsx:s}),a.languages.insertBefore(\"inside\",\"attr-value\",{script:{pattern:/=(\\{(?:\\{[^}]*\\}|[^}])+\\})/i,inside:s,alias:\"language-javascript\"}},a.languages.jsx.tag)}(Prism);\n!function(){if(\"undefined\"!=typeof self&&self.Prism&&self.document&&Function.prototype.bind){var t=function(t){var e=0,s=0,i=t;if(i.parentNode){do e+=i.offsetLeft,s+=i.offsetTop;while((i=i.offsetParent)&&i.nodeType<9);i=t;do e-=i.scrollLeft,s-=i.scrollTop;while((i=i.parentNode)&&!/body/i.test(i.nodeName))}return{top:s,right:innerWidth-e-t.offsetWidth,bottom:innerHeight-s-t.offsetHeight,left:e}},e=/(?:^|\\s)token(?=$|\\s)/,s=/(?:^|\\s)active(?=$|\\s)/g,i=/(?:^|\\s)flipped(?=$|\\s)/g,o=function(t,e,s,i){this._elt=null,this._type=t,this._clsRegexp=RegExp(\"(?:^|\\\\s)\"+t+\"(?=$|\\\\s)\"),this._token=null,this.updater=e,this._mouseout=this.mouseout.bind(this),this.initializer=i;var n=this;s||(s=[\"*\"]),\"Array\"!==Prism.util.type(s)&&(s=[s]),s.forEach(function(t){\"string\"!=typeof t&&(t=t.lang),o.byLanguages[t]||(o.byLanguages[t]=[]),o.byLanguages[t].indexOf(n)<0&&o.byLanguages[t].push(n)}),o.byType[t]=this};o.prototype.init=function(){this._elt||(this._elt=document.createElement(\"div\"),this._elt.className=\"prism-previewer prism-previewer-\"+this._type,document.body.appendChild(this._elt),this.initializer&&this.initializer())},o.prototype.check=function(t){do if(e.test(t.className)&&this._clsRegexp.test(t.className))break;while(t=t.parentNode);t&&t!==this._token&&(this._token=t,this.show())},o.prototype.mouseout=function(){this._token.removeEventListener(\"mouseout\",this._mouseout,!1),this._token=null,this.hide()},o.prototype.show=function(){if(this._elt||this.init(),this._token)if(this.updater.call(this._elt,this._token.textContent)){this._token.addEventListener(\"mouseout\",this._mouseout,!1);var e=t(this._token);this._elt.className+=\" active\",e.top-this._elt.offsetHeight>0?(this._elt.className=this._elt.className.replace(i,\"\"),this._elt.style.top=e.top+\"px\",this._elt.style.bottom=\"\"):(this._elt.className+=\" flipped\",this._elt.style.bottom=e.bottom+\"px\",this._elt.style.top=\"\"),this._elt.style.left=e.left+Math.min(200,this._token.offsetWidth/2)+\"px\"}else this.hide()},o.prototype.hide=function(){this._elt.className=this._elt.className.replace(s,\"\")},o.byLanguages={},o.byType={},o.initEvents=function(t,e){var s=[];o.byLanguages[e]&&(s=s.concat(o.byLanguages[e])),o.byLanguages[\"*\"]&&(s=s.concat(o.byLanguages[\"*\"])),t.addEventListener(\"mouseover\",function(t){var e=t.target;s.forEach(function(t){t.check(e)})},!1)},Prism.plugins.Previewer=o,Prism.hooks.add(\"after-highlight\",function(t){(o.byLanguages[\"*\"]||o.byLanguages[t.language])&&o.initEvents(t.element,t.language)})}}();\n\n","var api = require(\"!../../node_modules/@storybook/builder-webpack4/node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../../node_modules/@storybook/builder-webpack4/node_modules/css-loader/dist/cjs.js??ref--7-1!../../node_modules/postcss-loader/dist/cjs.js??ref--7-2!./styles.css\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nmodule.exports = content.locals || {};","import './assets/prism';\nimport './assets/normalize.css';\n// import './assets/skeleton.css';\nimport './assets/prism.css';\nimport './assets/styles.css';\n\nimport '@codesandbox/sandpack-react/dist/index.css';\n\nimport { addParameters, addDecorator } from '@storybook/react';\nimport { addReadme, configureReadme } from 'storybook-readme';\nimport { create } from '@storybook/theming/create';\nimport { themes } from '@storybook/theming';\nimport { version } from '../package.json';\n\n// const availableCodeThemes = [\n//   'a11y-dark',\n//   'atom-dark',\n//   'base16-ateliersulphurpool.light',\n//   'cb',\n//   'darcula',\n//   'duotone-dark',\n//   'duotone-earth',\n//   'duotone-forest',\n//   'duotone-light',\n//   'duotone-sea',\n//   'duotone-space',\n//   'ghcolors',\n//   'github',\n//   'hopscotch',\n//   'pojoaque',\n//   'vs',\n//   'xonokai',\n// ];\n\n// TMEME SHIT\n\nconst theme = create({\n  base: 'light',\n  brandTitle: 'Informed',\n  brandTitle: `Informed v${version}`,\n  brandUrl: 'https://teslamotors.github.io/informed',\n  // brandImage: 'https://placehold.it/350x150',\n  // brandImage: '/InformedLogo.png'\n  // brandImage: '/informed-car.png'\n  brandImage: 'car-on-informed.png'\n\n  //colorPrimary: 'hotpink',\n  //colorSecondary: 'deepskyblue',\n\n  // UI\n  // appBg: 'white',\n  // appContentBg: 'silver',\n  // appBorderColor: 'grey',\n  // appBorderRadius: 4,\n\n  // Typography\n  // fontBase: '\"Open Sans\", sans-serif',\n  // fontCode: 'monospace',\n\n  // Text colors\n  //textColor: 'white',\n  //textInverseColor: 'rgba(255,255,255,0.9)',\n\n  // Toolbar default and active colors\n  // barTextColor: 'silver',\n  // barSelectedColor: 'black',\n  // barBg: 'hotpink',\n\n  // Form colors\n  // inputBg: 'white',\n  // inputBorder: 'silver',\n  // inputTextColor: 'black',\n  // inputBorderRadius: 4,\n});\n\n// README SHIT\naddParameters({\n  readme: {\n    /**\n     * Prism code theme\n     * Full list of theme https://github.com/PrismJS/prism-themes\n     * To be used with storybook-readme, naming of the code theme should be used in one of these styles. https://github.com/tuchk4/storybook-readme/tree/master/packages/storybook-readme/src/styles/prismCodeThemes\n     */\n    //codeTheme: 'a11y-dark',\n    //highlightContent: true\n  },\n  darkMode: {\n    // Set the initial theme\n    // current: 'dark',\n    darkClass: 'informed-black',\n    lightClass: 'informed-white',\n    stylePreview: true,\n    // Override the default dark theme\n    dark: { ...theme, ...themes.dark },\n    // Override the default light theme\n    light: { ...themes.light, ...theme }\n  },\n  options: {\n    showPanel: false\n  }\n});\n\n// configureReadme({\n//   StoryPreview: ({ children }) => (\n//     <div className=\"informed-container\">{children}</div>\n//   ),\n//   DocPreview: ({ children }) => (\n//     <div className=\"informed-container\">{children}</div>\n//   )\n// });\n\naddDecorator(addReadme);\n","function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/* eslint-disable import/no-unresolved */\nimport { addDecorator, addParameters, addLoader, addArgs, addArgTypes, addArgsEnhancer, addArgTypesEnhancer, setGlobalRender } from '/Users/jpuzzo/Documents/Dev/JS/informed/node_modules/@storybook/client-api';\nimport * as config from '/Users/jpuzzo/Documents/Dev/JS/informed/.storybook/preview.js';\nObject.keys(config).forEach(function (key) {\n  var value = config[key];\n\n  switch (key) {\n    case 'args':\n      {\n        return addArgs(value);\n      }\n\n    case 'argTypes':\n      {\n        return addArgTypes(value);\n      }\n\n    case 'decorators':\n      {\n        return value.forEach(function (decorator) {\n          return addDecorator(decorator, false);\n        });\n      }\n\n    case 'loaders':\n      {\n        return value.forEach(function (loader) {\n          return addLoader(loader, false);\n        });\n      }\n\n    case 'parameters':\n      {\n        return addParameters(_objectSpread({}, value), false);\n      }\n\n    case 'argTypesEnhancers':\n      {\n        return value.forEach(function (enhancer) {\n          return addArgTypesEnhancer(enhancer);\n        });\n      }\n\n    case 'argsEnhancers':\n      {\n        return value.forEach(function (enhancer) {\n          return addArgsEnhancer(enhancer);\n        });\n      }\n\n    case 'render':\n      {\n        return setGlobalRender(value);\n      }\n\n    case 'globals':\n    case 'globalTypes':\n      {\n        var v = {};\n        v[key] = value;\n        return addParameters(v, false);\n      }\n\n    case '__namedExportsOrder':\n    case 'decorateStory':\n    case 'renderToDOM':\n      {\n        return null; // This key is not handled directly in v6 mode.\n      }\n\n    default:\n      {\n        // eslint-disable-next-line prefer-template\n        return console.log(key + ' was not supported :( !');\n      }\n  }\n});","export default \"## 4.37.0 (Nov 29th, 2022)\\n\\n- added ability to pass `keep` to form fields such that users can specify specific state to keep\\n\\n```js\\n// Example where we only keep value\\n\\n<Input name=\\\"spouse\\\" label=\\\"Spouse name:\\\" required keep={{ value: true }} />\\n```\\n\\n## 4.36.2 (Nov 9th, 2022)\\n\\n- removed console log from FormController\\n\\n## 4.36.1 (Nov 3rd, 2022)\\n\\n- added missing type for useArrayFieldItemState\\n\\n## 4.36.0 (Nov 1st, 2022)\\n\\n- array fields add and remove now trigger onValueSet\\n\\n## 4.35.2 (Oct 26th, 2022)\\n\\n- multistep type improvements\\n\\n## 4.35.1 (Oct 25th, 2022)\\n\\n- fixed issue where gatherOnMount would not gather after a reset\\n\\n## 4.35.0 (Oct 19th, 2022)\\n\\n- added ability to setValueQuietly\\n\\n## 4.34.0 (Oct 13th, 2022)\\n\\n- added useInformedApi that will allow user to manipulate multiple forms\\n\\n## 4.33.0 (Oct 11th, 2022)\\n\\n- added ability to remove specific index from array field api\\n\\n## 4.32.0 (Sep 30th, 2022)\\n\\n- added ability to disable and enable the form via formApi\\n\\n## 4.31.4 (Sep 22nd, 2022)\\n\\n- array fields dirt now gets set when a user adds or removes\\n\\n## 4.31.3 (Sep 22nd, 2022)\\n\\n- Fixed issue where react strict mode and 18 would not cleanup fields values when they were unmounted\\n\\n## 4.31.2 (Sep 20th, 2022)\\n\\n- Fixed issue where reseting array fields with new initial values would still use old ones\\n\\n## 4.31.1 (Sep 19th, 2022)\\n\\n- When formatting using createIntlNumberFormatter and currencySign being accounting () would not trigger negative\\n\\n```js\\n// When user types -2 or ($2) it would not format correctly\\nconst { formatter, parser } = utils.createIntlNumberFormatter('en-US', {\\n  style: 'currency',\\n  currency: 'USD',\\n  currencySign: 'accounting'\\n});\\n```\\n\\n## 4.31.0 (Sep 14th, 2022)\\n\\n- Form now gets set to dirty when a user performs an add operation on an array field\\n\\n## 4.30.1 (Sep 12th, 2022)\\n\\n- Fixed issue with mask prop not masking last character\\n\\n## 4.30.0 (Sep 11th, 2022)\\n\\n- Added mask prop back to inputs!!!!!\\n\\n## 4.29.1 (Sep 8th, 2022)\\n\\n- Fixed useFormStateSelector when using SSR\\n\\n## 4.29.0 (August 30th, 2022)\\n\\n- added onValueSet to form that only gets called when the value is explicitly set\\n\\n## 4.28.9 (August 30th, 2022)\\n\\n- Fixed issue where validateOnMount would not trigger when the fields were reset to their initial state\\n\\n## 4.28.8 (August 25th, 2022)\\n\\n- Fixed issue where async validate would not trigger when you pass relevance prop to input and input becomes relevant\\n\\n## 4.28.7 (August 24th, 2022)\\n\\n- Fixed issue where locales that use comma instead of dot for fractions would not properly format for thousands\\n\\n## 4.28.6 (August 23nd, 2022)\\n\\n- Fixed issue where if form was reset array field with defualt values would not reset to the default values\\n\\n## 4.28.5 (August 22nd, 2022)\\n\\n- Fixed issue where showErrorIfDirty would not show error if touched\\n\\n## 4.28.4 (August 19th, 2022)\\n\\n- Fixed issue where useFieldSubscription would not spread fields to the useEffect causing potential infinate loops\\n\\n## 4.28.3 (August 15th, 2022)\\n\\n- Fixed issue where user would type the decimalChar in intl number formatter\\n\\n## 4.28.2 (August 10th, 2022)\\n\\n- Added mising types https://github.com/teslamotors/informed/pull/415\\n\\n## 4.28.1 (August 10th, 2022)\\n\\n- Fixed issue with number formatter when inititial value is number\\n\\n## 4.28.0 (August 5th, 2022)\\n\\n- Added ability to pass default values to array fields\\n\\n## 4.27.0 (August 4th, 2022)\\n\\n- Added `useFormStateSelector` hook\\n\\n## 4.26.0 (August 3rd, 2022)\\n\\n- Added ability to get field name from onValueModified and onValueChange props to form\\n\\n## 4.25.0 (August 2nd, 2022)\\n\\n- Added disabled prop back onto form props\\n\\n## 4.24.0 (August 1st, 2022)\\n\\n- Added useInformed to get access to any controller\\n\\n## 4.23.0 (July 31st, 2022)\\n\\n- Added useArrayFieldState\\n\\n## 4.22.0 (July 29th, 2022)\\n\\n- Added ability to pass focusOnInvalid to the form and also added focusFirstError to formApi\\n\\n## 4.21.0 (July 19th, 2022)\\n\\n- Added ability to pass clean function to inputs\\n\\n## 4.20.1 (July 14th, 2022)\\n\\n- Fixed issue where evaluate in useConditional would not trigger when form was reset\\n\\n## 4.20.0 (July 11th, 2022)\\n\\n### Added\\n\\n- ability to pass oneOf as an if condition to schemas\\n- ability to match fields whos values are arrays with enum in schema conditions\\n\\n```js\\nallOf: [\\n  {\\n    if: {\\n      properties: {\\n        cars: { oneOf: ['tesla', 'jeep'] }\\n      },\\n      required: ['cars']\\n    },\\n    then: {\\n      properties: {\\n        carName: {\\n          type: 'string',\\n          title: 'Cars name',\\n          'ui:control': 'input'\\n        }\\n      }\\n    }\\n  }\\n];\\n```\\n\\n## 4.19.3 (July 5th, 2022)\\n\\n### Fixed\\n\\n- fixes #411 bad type definition for onSubmit\\n\\n## 4.19.2 (July 5th, 2022)\\n\\n### Updated\\n\\n- package.json to allow react 18 as peer dep\\n\\n## 4.19.1 (June 24th, 2022)\\n\\n### Fixed\\n\\n- issue whith useArray field where if initial value was not array it would crash\\n\\n## 4.19.0 (June 22nd, 2022)\\n\\n### Added\\n\\n- onValueChange prop to fields\\n\\n## 4.18.2 (June 22nd, 2022)\\n\\n### Fixed\\n\\n- issue with key in FormField, this issue can be seen when you have changing schema\\n\\n## 4.18.1 (June 21st, 2022)\\n\\n### Updated\\n\\n- README to have correct urls\\n\\n## 4.18.0 (June15th, 2022)\\n\\n### Added\\n\\n- ability to `if: { properties: { status: {const: [\\\"active\\\"]} } },` in schema ( support array conditions )\\n\\n## 4.17.0 (June 12th, 2022)\\n\\n### Added\\n\\n- resetPath to form api to allow user to pass in path to reset all fields that live under that path\\n\\n## 4.16.2 (June 9th, 2022)\\n\\n### Fixed\\n\\n- issue where react 18 with strict mode would kill useStateWithGetter function ( relevance was broken )\\n\\n## 4.16.1 (June 3rd, 2022)\\n\\n### Fixed\\n\\n- issue where changing schema options would not reset value\\n\\n## 4.16.0 (June 2nd, 2022)\\n\\n### Added\\n\\n- ability get formApi formState and scope in validate function\\n\\n## 4.15.0 (June 2nd, 2022)\\n\\n### Added\\n\\n- ability to pass a function as validateWhen\\n\\n```js\\nvalidateWhen={ scope => `${scope.fieldName}`}\\n```\\n\\n## 4.14.0 (May 26th, 2022)\\n\\n### Added\\n\\n- `validateModified` prop to form so lib will only perform validation on modified fields\\n\\n## 4.13.1 (May 25th, 2022)\\n\\n### Fixed\\n\\n- issue where decimal was getting added when formatter explicitly was told not to add\\n\\n```js\\nutils.createIntlNumberFormatter('en-US', {\\n  style: 'decimal',\\n  signDisplay: 'never',\\n  minimumFractionDigits: 0,\\n  maximumFractionDigits: 0\\n});\\n```\\n\\n## 4.12.1 (May 12th, 2022)\\n\\n### Fixed\\n\\n- issue with missing types Debug and Schema Fields\\n\\n## 4.12.0 (May 12th, 2022)\\n\\n### Fixed\\n\\n- issue with isChild\\n\\n### Added\\n\\n- hidden field back to default exported components\\n\\n## 4.11.4 (May 4th, 2022)\\n\\n### Fixed\\n\\n- issue where Relevance inside of Relevance might prevent cleanup on form state\\n\\n## 4.11.3 (May 2nd, 2022)\\n\\n### Fixed\\n\\n- issue where nested array fields removal would break\\n\\n## 4.11.2 (April 29th, 2022)\\n\\n### Fixed\\n\\n- issue where custom error messages did not work in allOf\\n- issue where required:[] on allOf was not working\\n\\n## 4.11.1 (April 28th, 2022)\\n\\n### Fixed\\n\\n-issue where zero ( 0 ) would not work for minimum and maximum due to bad falsey check lol classic\\n\\n## 4.11.0 (April 28th, 2022)\\n\\n### Added\\n\\n- onNativeChange handler to useField\\n\\n## 4.10.0 (April 27th, 2022)\\n\\n### Added\\n\\n- onValid and onInvalid to useForm\\n\\n## 4.9.4 (April 19th, 2022)\\n\\n### Fixed\\n\\n- issue where we would not pass all options to intl formatter\\n\\n## 4.9.3 (April 13th, 2022)\\n\\n### Fixed\\n\\n- issue where after a gather data the field-value event would not get triggered so evaluate would never get called\\n\\n## 4.9.2 (April 13th, 2022)\\n\\n### Fixed\\n\\n- issue where FormComponents was not rendering from components option\\n\\n## 4.9.1 (April 12th, 2022)\\n\\n### Fixed\\n\\n- issue where modified would NOT be correct when allowEmptyString was passed\\n\\n## 4.9.0 (April 12th, 2022)\\n\\n### Added\\n\\n- `formState.modified`\\n- `fieldState.modified`\\n\\n## 4.8.1 (April 4th, 2022)\\n\\n### Fixed\\n\\n- Issue where errors would get kept when going to previous multistep step\\n\\n## 4.8.0 (March 31st, 2022)\\n\\n### Added\\n\\n- useConditional hook and ability to pass `evaluate` and `evaluateWhen`\\n\\n## 4.7.0 (March 29th, 2022)\\n\\n### Added\\n\\n- ability to pass gatherOnMount to a field\\n\\n## 4.6.1 (March 22nd, 2022)\\n\\n### Fixed\\n\\n- misnamed `gatherData` prop\\n\\n## 4.6.0 (March 22nd, 2022)\\n\\n### Added\\n\\n- `gatherData` prop to allow user to get asnyc information for a field\\n\\n## 4.5.12 (March 22nd, 2022)\\n\\n### Fixed\\n\\n- Missing types for default exported fields\\n- Missing type for `required`\\n\\n## 4.5.11 (March 20th, 2022)\\n\\n### Fixed\\n\\n- issue where allowEmptyString and allowEmptyStrings where broken\\n\\n## 4.5.10 (March 18th, 2022)\\n\\n### Fixed\\n\\n- issue where `step` was missing from multistep type\\n\\n## 4.5.9 (March 18th, 2022)\\n\\n### Fixed\\n\\n- issue with propertyOrder in nested schemas\\n\\n## 4.5.8 (March 18th, 2022)\\n\\n### Fixed\\n\\n- issue with more than double nested schemas\\n- issue with Multistep.Step types\\n\\n## 4.5.7 (March 9th, 2022)\\n\\n### Fixed\\n\\n- issue with changing options on schema fields ( undefined would clobber defined values in option merge )\\n\\n## 4.5.6 (March 8th, 2022)\\n\\n### Fixed\\n\\n- issue where changing validation params would not rebuild validation function\\n\\n## 4.5.5 (March 8th, 2022)\\n\\n### Fixed\\n\\n- issue where multistep steps would not deregister\\n\\n## 4.5.4 (Feb 28th, 2022)\\n\\n### Fixed\\n\\n- issue where multistep steps would not clean up after themselves\\n\\n## 4.5.3 (Feb 22th, 2022)\\n\\n### Fixed\\n\\n- issue with touchAllFields not touching fields within an array\\n\\n## 4.5.2 (Feb 18th, 2022)\\n\\n### Fixed\\n\\n- Another Issue with debugger in react native that caused crash\\n\\n## 4.5.1 (Feb 16th, 2022)\\n\\n### Fixed\\n\\n- Issue with debugger in react native\\n\\n## 4.5.0 (Feb 16th, 2022)\\n\\n### Added\\n\\n- onValueModified prop to useForm\\n\\n## 4.4.0 (Feb 15th, 2022)\\n\\n### Added\\n\\n- ability to pass reset options to reset field\\n\\n## 4.3.0 (Feb 15th, 2022)\\n\\n### Added\\n\\n- onValueChange prop to useForm\\n\\n## 4.2.0 (Feb 10th, 2022)\\n\\n### Added\\n\\n- Ability to add n items to array field by passing add(3) a number to add\\n\\n## 4.1.2 (Feb 10th, 2022)\\n\\n### Fixed\\n\\n- Missing form level option for keepState and keepStateIfRelevant\\n\\n## 4.1.1 (Feb 9th, 2022)\\n\\n### Fixed\\n\\n- Stupid issue with safari throwing a type error when trying to check for selectionStart on event.target\\n\\n## 4.1.0 (Feb 8th, 2022)\\n\\n### Added\\n\\n- Ability to use state across multiple forms\\n\\n## 4.0.35 (Feb 8th, 2022)\\n\\n### Fixed\\n\\n- missing types for multistep and formApi\\n\\n## 4.0.34 (Feb 4th, 2022)\\n\\n### Fixed\\n\\n- issue with INTL formatter when used with `EUR` and `en-DE`\\n\\n## 4.0.33 (Feb 3rd, 2022)\\n\\n### Fixed\\n\\n- issue with formatter function not allowing full value\\n\\n## 4.0.32 (January 26th, 2022)\\n\\n### Fixed\\n\\n- issue with FormField not allowing conditional fields\\n\\n## 4.0.31 (January 25th, 2022)\\n\\n### Fixes https://github.com/teslamotors/informed/issues/381\\n\\n- autoFocus on Input throws error\\n\\n## 4.0.30 (January 24th, 2022)\\n\\n### Added\\n\\n- propertyOrder back to schema\\n\\n## 4.0.29 (January 20th, 2022)\\n\\n### Added\\n\\n- asyncValidate to formApi\\n\\n## 4.0.28 (January 18th, 2022)\\n\\n### Fixed\\n\\n- issue with cursor offsets when suffix is added\\n\\n## 4.0.27 (January 14th, 2022)\\n\\n### Fixed\\n\\n- issue with negative cursor offsets\\n\\n### Fixed\\n\\n- issue with off by one cursor locations on formatter\\n\\n## 4.0.25 (January 14th, 2022)\\n\\n### Fixed\\n\\n- createIntlNumberFormatter not working with negative numbers\\n\\n## 4.0.24 (January 7th, 2022)\\n\\n### Added\\n\\n- clearValue() function to form and field apis\\n\\n### Fixed\\n\\n- Issue where validateOnMount would NOT trigger validation when a field was re-rendered\\n\\n## 4.0.23 (January 5th, 2022)\\n\\n### Fixed\\n\\n- issue with array field items being memoized\\n\\n## 4.0.22 (January 5th, 2022)\\n\\n### Fixed\\n\\n- issue with createIntlNumber mask adding random \\\"[]\\\" sometimes\\n\\n## 4.0.21 (January 5th, 2022)\\n\\n### Fixed\\n\\n- issue where returning \\\"\\\" from validation function would not show error state\\n\\n## 4.0.20 (January 4th, 2022)\\n\\n### Fixed\\n\\n- issue where removing item from array field would not make the form dirty\\n\\n## 4.0.19 (December 31st, 2021)\\n\\n### Exposed\\n\\n- useRelevance hook and added type for it in types\\n\\n## 4.0.18 (December 23rd, 2021)\\n\\n### Fixed\\n\\n- issue where values would get cleared on un-mount\\n\\n## 4.0.17 (December 17th, 2021)\\n\\n### Fixed\\n\\n- issue where I forgot to deregister fields when they became irrelevant\\n\\n## 4.0.16 (December 17th, 2021)\\n\\n### Fixed\\n\\n- issue where I forgot to allow relevanceDeps to be passed to multistep step\\n\\n## 4.0.15 (December 15th, 2021)\\n\\n### Moved\\n\\n- The repo to tesla or go needed to re publish to get updated README to npm\\n\\n## 4.0.14 (December 15th, 2021)\\n\\n### Fixed\\n\\n- forgot to add getCurrentStep to multistepApi\\n- forgot to add nextStep and previousStep to multistepState\\n\\n## 4.0.13 (December 15th, 2021)\\n\\n### Fixed\\n\\n- issue where set touched did not default meta when field is not there\\n\\n## 4.0.12 (December 15th, 2021)\\n\\n### Fixed\\n\\n- issue where `FormField` could not take field props\\n\\n## 4.0.11 (December 15th, 2021)\\n\\n### Fixed\\n\\n- missing type for Relevant\\n\\n## 4.0.10 (December 15th, 2021)\\n\\n### Fixed\\n\\n- issue where FormProvider was not exported\\n\\n## 4.0.9 (December 13th, 2021)\\n\\n### Fixed\\n\\n- issue where passing showErrorIfTouched={false} would not work\\n\\n## 4.0.8 (December 10th, 2021)\\n\\n### Removed\\n\\n- Empty dependencies object from package.json\\n\\n## 4.0.7 (December 10th, 2021)\\n\\n### Fixed\\n\\n- Issue with relevance subscription when no relevance function\\n\\n## 4.0.6 (December 9th, 2021)\\n\\n### Fixed\\n\\n- Missing functions setValues and setTheseValues\\n\\n## 4.0.5 (December 9th, 2021)\\n\\n### Fixed\\n\\n- Missing types for validate and validateField on FormApi\\n\\n## 4.0.4 (December 9th, 2021)\\n\\n### Fixed\\n\\n- Issue where we forgot to expose form validate\\n- Missing utils types\\n\\n## Added\\n\\n- useScope and useScoper to exports\\n\\n## 4.0.3 (December 7th, 2021)\\n\\n### Fixed\\n\\n- Issue with forms valid and invalid when relevance changes\\n\\n## 4.0.2 (December 7th, 2021)\\n\\n### Fixed\\n\\n- Issue with schema path util `inverter[12].air_filter_ok` would not work\\n\\n## 4.0.1 (December 7th, 2021)\\n\\n### Fixed\\n\\n- Issue with initializing when becoming relevant\\n\\n## 4.0 !!!!\\n\\n### Breaking changes\\n\\n#### onSubmit signature\\n\\nOld\\n\\n```\\nconst onSubmit = values => console.log( values );\\n```\\n\\nNew\\n\\n```\\nconst onSubmit = formState => console.log( formState.values );\\n```\\n\\n#### Text --> Input\\n\\nOld\\n\\n```jsx\\n<Text field=\\\"name\\\" />\\n```\\n\\nNew\\n\\n```jsx\\n<Input name=\\\"name\\\" />\\n```\\n\\n#### apiRef --> formApiRef\\n\\nOld\\n\\n```jsx\\n<Form apiRef={apiRef} />\\n// OR\\n<Form getApi={getApi} />\\n```\\n\\nNew\\n\\n```jsx\\n<Form formApiRef={formApiRef} />\\n```\\n\\n#### informed:props ( schema )\\n\\n```\\ninformed:props is now ui:props when using schema based forms\\n```\\n\\n#### `asField` has been removed\\n\\nInstead of doing this\\n\\n```js\\nconst CustomField = asField({ fieldState, fieldApi }) => {}\\n```\\n\\nDo this\\n\\n```js\\nconst CustomField = props => {\\n  const { fieldState, fieldApi } = useField(props);\\n};\\n```\\n\\n#### Relevance\\n\\nThe when function for relevance now has this signature\\n\\n```\\nwhen={({formState, formApi, scope}) => {...} }\\n```\\n\\n#### yupSchema\\n\\n```\\nvalidationSchema ---> is now yupSchema\\n```\\n\\n#### Array Fields\\n\\n##### Renamed `field` to `name`\\n\\n```jsx\\n<ArrayField.Items>\\n  {({ remove, field }) => (\\n    <>\\n      <Input name={field} />\\n      <button type=\\\"button\\\" onClick={remove}>\\n        Remove\\n      </button>\\n    </>\\n  )}\\n</ArrayField.Items>\\n```\\n\\nIs Now\\n\\n```jsx\\n<ArrayField.Items>\\n  {({ remove, name }) => (\\n    <>\\n      <Input name={name} />\\n      <button type=\\\"button\\\" onClick={remove}>\\n        Remove\\n      </button>\\n    </>\\n  )}\\n</ArrayField.Items>\\n```\\n\\n##### No more array field path prefixing\\n\\nOld:\\n\\n```jsx\\n<ArrayField.Items>\\n  {({ remove, field }) => (\\n    <>\\n      <Input name={`${field}.name`} />\\n      <Input name={`${field}.age`} />\\n      <button type=\\\"button\\\" onClick={remove}>\\n        Remove\\n      </button>\\n    </>\\n  )}\\n</ArrayField.Items>\\n```\\n\\nNew:\\n\\n```jsx\\n<ArrayField.Items>\\n  {({ remove }) => (\\n    <>\\n      <Input name=\\\"name\\\" />\\n      <Input name=\\\"age\\\" />\\n      <button type=\\\"button\\\" onClick={remove}>\\n        Remove\\n      </button>\\n    </>\\n  )}\\n</ArrayField.Items>\\n```\\n\\n##### No more values in array field render prop\\n\\nOld:\\n\\n```jsx\\n// Some component you need to use state of array field item\\nconst FieldState = ({ values }) => {\\n  return (\\n    <pre>\\n      <code>{JSON.stringify(values, null, 2)}</code>\\n    </pre>\\n  );\\n};\\n\\n<ArrayField.Items>\\n  {({ remove, values }) => (\\n    <>\\n      <Input name=\\\"name\\\" />\\n      <Input name=\\\"age\\\" />\\n      <FieldState values={values} />\\n      <button type=\\\"button\\\" onClick={remove}>\\n        Remove\\n      </button>\\n    </>\\n  )}\\n</ArrayField.Items>;\\n```\\n\\nNew:\\n\\n```jsx\\n// Some component you need to use state of array field item\\nconst FieldState = () => {\\n  const { values } = useArrayFieldItemState();\\n  return (\\n    <pre>\\n      <code>{JSON.stringify(values, null, 2)}</code>\\n    </pre>\\n  );\\n};\\n\\n<ArrayField.Items>\\n  {({ remove }) => (\\n    <>\\n      <Input name=\\\"name\\\" />\\n      <Input name=\\\"age\\\" />\\n      <FieldState />\\n      <button type=\\\"button\\\" onClick={remove}>\\n        Remove\\n      </button>\\n    </>\\n  )}\\n</ArrayField.Items>;\\n```\\n\\n#### Debugging with `<FormState />`\\n\\nOld:\\n\\n```jsx\\n<FormState values errors />\\n```\\n\\nNew:\\n\\n```jsx\\n<Debug values errors />\\n```\\n\\n#### Custom Inputs\\n\\nMinor changes to custom inputs\\n\\nNew:\\n\\n```jsx\\nconst CustomInput = props => {\\n  const { fieldState, fieldApi, render, ref, userProps } = useField(props);\\n\\n  // The field state\\n  const { value, error, showError } = fieldState;\\n\\n  // The field control\\n  const { setValue, setTouched } = fieldApi;\\n\\n  // Everything else\\n  const { label, id, ...rest } = userProps;\\n\\n  return render(\\n    <>\\n      {label ? <label htmlFor={id}>{label}</label> : null}\\n      <input\\n        {...rest}\\n        id={id}\\n        ref={ref}\\n        value={!value && value !== 0 ? '' : value}\\n        onChange={e => {\\n          setValue(e.target.value, e);\\n        }}\\n        onBlur={e => {\\n          setTouched(true, e);\\n        }}\\n        style={showError ? { border: 'solid 1px red' } : null}\\n      />\\n      {showError ? <small style={{ color: 'red' }}>{error}</small> : null}\\n    </>\\n  );\\n};\\n```\\n\\n#### Validation\\n\\nValidation is now controlled via validateOn=\\\"validationString\\\"\\n\\nBy default fields will only validate on blur. To get\\nmore granular validation, simply pass in `validateOn` props.\\n\\nSee table below for mapping:\\n\\n<br />\\n\\n| validateOn    | derived       | change       | blur         | submit       | default |\\n| ------------- | ------------- | ------------ | ------------ | ------------ | ------- |\\n| change        | change-change | sync + async | sync + async | sync + async |         |\\n| blur          | blur-blur     | x            | sync + async | sync + async | x       |\\n| change-blur   | change-blur   | sync         | sync + async | sync + async |         |\\n| change-submit | change-submit | sync         | sync         | sync + async |         |\\n| blur-submit   | submit-submit | x            | sync         | sync + async |         |\\n| submit        | submit-submit | x            | x            | sync + async |         |\\n\\n<br />\\n\\nValidation is controlled via the `validateOn` prop, but in order to control when it shows,\\nuse the `showErrorIfError` and `showErrorIfDirty` props. **This is because sometimes you may want the form to be invalid but not show the error to the user yet ( default is `showErrorIfTouched` )**\\n\\n| prop               | description                                                                                                  | default |\\n| ------------------ | ------------------------------------------------------------------------------------------------------------ | ------- |\\n| showErrorIfError   | will set `showError` for that field to true whenever there is an error (typically used with validateOnMount) |         |\\n| showErrorIfTouched | will set `showError` for that field to true whenever there is an error and the field is touched              | x       |\\n| showErrorIfDirty   | will set `showError` for that field to true whenever there is an error and the field is dirty                |         |\\n\\n<br />\\n\\nFinally we have a use case for validating right away ( on mount )\\n\\n| prop            | description                     | default |\\n| --------------- | ------------------------------- | ------- |\\n| validateOnMount | will trigger validation onMount | false   |\\n\\n<br />\\n<br />\\n\\n---\\n\\n<br />\\n\\n## 3.34.0 (June 22, 2021)\\n\\n### Added\\n\\n- ability to control when async validation occurs with props\\n\\n## 3.33.0 (May 21, 2021)\\n\\n### Added\\n\\n- createIntlNumberFormatter\\n\\n## 3.32.3 (May 21, 2021)\\n\\n### Fixed\\n\\n- Issue with useFieldState, now returns empty object by default\\n\\n## 3.32.2 (May 21, 2021)\\n\\n### Fixed\\n\\n- Issue with mounting useFieldStates\\n\\n## 3.32.1 (May 21, 2021)\\n\\n### Fixed\\n\\n- Issue with layoutEffect in SSR\\n\\n## 3.32.0 (May 19, 2021)\\n\\n### Added\\n\\n- Ability to walk down a multistep with step selection.\\n\\n## 3.31.0 (April 26, 2021)\\n\\n### Added\\n\\n- formatter functions `formatter = [()=>{}, ()=>{}]`\\n\\n## 3.30.3 (April 2, 2021)\\n\\n### Added\\n\\n- memoized render back because I never should have removed it\\n\\n## 3.30.2 (March 15, 2021)\\n\\n### Refactored\\n\\n- To no longer use event emitter.\\n\\n## 3.30.1 (March 5, 2021)\\n\\n### Fixed\\n\\n- Issue where keep state in scope was not working.\\n\\n## 3.30.0 (March 2, 2021)\\n\\n### Added\\n\\n- Pristine and Dirty to formFieldState\\n\\n## 3.29.4 (February 24, 2021)\\n\\n### Updated\\n\\n- Peer deps to support react v 17\\n\\n## 3.29.3 (February 5, 2021)\\n\\n### Fixed\\n\\n- Issue where ObjectMap `has` would reference wrong get funciton fixes #327\\n\\n## 3.29.2 (February 4, 2021)\\n\\n### Fixed\\n\\n- Issue where carrot pos would be in the wrong place when formatting\\n\\n### Updated\\n\\n- `useField` hook to use the `useCarrotPosition` hook ( removed duplicate code )\\n\\n## 3.29.1 (February 4, 2021)\\n\\n### Added\\n\\n- Ability to call `setValue` function for custom formattedObject Inputs\\n\\n## 3.29.0 (February 2, 2021)\\n\\n### Added\\n\\n- Ability to pass `initialize` function for custom initialization of the initial value\\n\\n## 3.28.0 (February 2, 2021)\\n\\n### Exposed\\n\\n- Utils functions that can be used by end users\\n\\n## 3.27.0 (December 18, 2020)\\n\\n### Fixed\\n\\n- bug with update function in form controller where it would pull instead of delete on swap\\n\\n## 3.26.0 (December 17, 2020)\\n\\n### Added\\n\\n- `swap` to array fields\\n\\n### Rafactored\\n\\n- Internal state management\\n\\n## 3.25.0 (December 8, 2020)\\n\\n### Added\\n\\n- `onReset` to form props\\n\\n## 3.24.4 (December 5, 2020)\\n\\n### Updated\\n\\n- README and needed to get it to npm ... again again\\n\\n## 3.24.3 (December 5, 2020)\\n\\n### Updated\\n\\n- README and needed to get it to npm ... again\\n\\n## 3.24.2 (November 24, 2020)\\n\\n### Updated\\n\\n- README and needed to get it to npm\\n\\n## 3.24.1 (November 23, 2020)\\n\\n### Fixed\\n\\n- Type issue ( missing allow empty string from props def )\\n\\n## 3.24.0 (November 19, 2020)\\n\\n### Fixed\\n\\n- Issue where Id was not getting passed to default select field\\n\\n## 3.23.0 (November 18, 2020)\\n\\n### Removed\\n\\n- LODASH!!!!! SEE YA LATER NEVER\\n\\n## 3.22.0 (November 17, 2020)\\n\\n### Added\\n\\n- Ability to pass relevant to array fields!!!\\n\\n## 3.21.2 (November 14, 2020)\\n\\n### Fixed\\n\\n- Bug with field level relevant\\n\\n### Updated\\n\\n- Form to always evaluate relevance, and not force the user to pass notify.\\n\\n## 3.21.1 (November 12, 2020)\\n\\n### Fixed\\n\\n- Isssue where state would not update after submit\\n\\n## 3.21.0 (November 12, 2020)\\n\\n### Added\\n\\n- Ability to add async validation functions to inputs\\n\\n## 3.20.0 (November 11, 2020)\\n\\n### Added\\n\\n- Ability to not pass keep state to multistep fields, and also added docs for conditional relevant nested array fields\\n\\n## 3.19.0 (November 10, 2020)\\n\\n### Added\\n\\n- Ability to hide or show fields based on relevant, and notify relevant fields\\n\\n## 3.18.3 (November 10, 2020)\\n\\n### Fixed\\n\\n- bug with resetting array field items\\n\\n## 3.18.2 (November 9, 2020)\\n\\n### Fixed\\n\\n- bug with duplicate fields\\n\\n## 3.18.1 (November 9, 2020)\\n\\n### Fixed\\n\\n- bug with keep state registering phantom fields\\n\\n## 3.18.0 (November 5, 2020)\\n\\n### Added\\n\\n- ability to create custom schema fields\\n\\n## 3.17.1 (November 3, 2020)\\n\\n### Fixed\\n\\n- useField was not adding id to label by default\\n\\n## 3.17.0 (November 3, 2020)\\n\\n### Added\\n\\n- Required attribute to input and automatic type generation for useField hook\\n\\n## 3.16.1 (November 2, 2020)\\n\\n### Fixed\\n\\n- Issue where informed props were not passed down to array fields in schema\\n\\n## 3.16.0 (November 1, 2020)\\n\\n### Added\\n\\n- Ability to have conditional schemas!!!!\\n\\n## 3.15.0 (October 28, 2020)\\n\\n### Added\\n\\n- Ability to add array fields in schema!!!!\\n\\n## 3.14.0 (October 27, 2020)\\n\\n### Added\\n\\n- Formatter and Parser !!!!!\\n\\n## 3.13.2 (October 27, 2020)\\n\\n### Fixed\\n\\n- Issue with strict mode double registering\\n\\n## 3.13.1 (October 23, 2020)\\n\\n### Fixed\\n\\n- Bug where inforemd would crash if schema was missing field that was in JSX ( returns null )\\n\\n## 3.13.0 (October 23, 2020)\\n\\n### Added\\n\\n- Ability to render schema fields in specific paces within JSX!!\\n\\n## 3.12.0 (October 22, 2020)\\n\\n### Added\\n\\n- Added AJV Schema shit!!!\\n\\n## 3.11.0 (October 21, 2020)\\n\\n### Added\\n\\n- Schema shit\\n\\n## 3.10.1 (October 18, 2020)\\n\\n### Fixed\\n\\n- Array fields because I stupidly broke them\\n\\n#### Added\\n\\n- Tests for multistep fields\\n- Better multistep form syntax\\n- Better multistep docs\\n\\n## 3.10.0 (September 29, 2020)\\n\\n### Updated\\n\\n- internals to modify state direct to improve performance!\\n\\n## 3.9.0 (June 15, 2020)\\n\\n### Updated\\n\\n- useArray field to expose a reset that resets to initial values\\n\\n## 3.8.1 (May 11, 2020)\\n\\n### Fixed\\n\\n- Issue with back and next types for multistep fields\\n\\n## 3.8.0 (May 4, 2020)\\n\\n### Added\\n\\n- Array field Api control for ArrayFieldItems\\n\\n## 3.7.0 (May 4, 2020)\\n\\n### Refactored\\n\\n- To use field ids instead of names\\n\\n### Added\\n\\n- `<Relevant>` component\\n\\n## 3.6.1 (March 2, 2020)\\n\\n### Updated\\n\\n- Type file to include preventEnter on form props\\n\\n## 3.6.0 (March 1, 2020)\\n\\n### Added\\n\\n- Ability to pass formController to useField hook\\n\\n## 3.5.2 (February 28, 2020)\\n\\n### Fixed\\n\\n- [Issue](https://github.com/joepuzzo/informed/issues/275) where new version of react would throw warnings due to bad code\\n\\n## 3.5.1 (February 27, 2020)\\n\\n### Fixed\\n\\n- [Issue](https://github.com/joepuzzo/informed/issues/272) where dynamic nested array fields with keep state kept too much state :)\\n\\n## 3.5.0 (February 25, 2020)\\n\\n### Added\\n\\n- New multistep abilities via setCurrent in `formApi` and `Current` in `formState`. See compex multistep form in docs\\n\\n## 3.4.0 (February 22, 2020)\\n\\n### Added\\n\\n- Ability to spread `informed` object on inputs via the `useField` hook\\n\\n## 3.3.5 (February 22, 2020)\\n\\n### Updated\\n\\n- Readme to show useForm example\\n\\n## 3.3.4 (February 20, 2020)\\n\\n### Added\\n\\n- FormState component to assist when debugging!\\n\\n## 3.3.3 (February 18, 2020)\\n\\n### Added\\n\\n- Types for multisetp forms\\n\\n## 3.3.2 (February 16, 2020)\\n\\n### Added\\n\\n- Ability to use cursor position in mask function\\n\\n## 3.3.1 (February 16, 2020)\\n\\n### Updated\\n\\n- Intro examples to inculde on submit example\\n\\n## 3.3.0 (February 10, 2020)\\n\\n### Added\\n\\n- Field level Yup support\\n\\n## 3.2.1 (February 9, 2020)\\n\\n### Fixed\\n\\n- Typo in yup docs and readme\\n\\n## 3.2.0 (February 9, 2020)\\n\\n### Added\\n\\n- Yup support\\n\\n## 3.1.2 (February 9, 2020)\\n\\n### Updated\\n\\n- docs and readme to link to dicord channel\\n\\n## 3.1.1 (February 8, 2020)\\n\\n### Added\\n\\n- apiRef so you can just pass a ref to the form\\n\\n## 3.1.0 (February 5, 2020)\\n\\n### Added\\n\\n- Step functionality to support multistep forms\\n\\n## 3.0.2 (January 24, 2020)\\n\\n### Fixed\\n\\n- Issue https://github.com/joepuzzo/informed/issues/267\\n\\n## 3.0.1 (January 24, 2020)\\n\\n### Fixed\\n\\n- README ( I wish there was a way on npm to update readme without publishing version )\\n\\n## 3.0.0 (January 24, 2020)\\n\\n### Fixed\\n\\n- Issue with array field validation https://github.com/joepuzzo/informed/issues/259\\n- Issue where informed would throw errors when fields were hidden but referenced\\n\\n### Added\\n\\n- Ability to ( in the near future ) add validations to scopes ( Enabled because of code refacotor... will add soon :)\\n\\n### Changed\\n\\n- The internals to no longer keep track of giant state object but instead generate it on demand\\n\\n### Removed\\n\\n- A bunch of useless code :)\\n\\n#### Cleaned up\\n\\n- Large portion of the code .. Mostly the formController!\\n\\n## 2.11.17 (January 21, 2020)\\n\\n## Update\\n\\n- useField to trigger validation when validation related props change\\n\\n## 2.11.16 (November 18, 2019)\\n\\n## Fixed\\n\\n- issue with array field where validation would fail\\n\\n## 2.11.15 (November 6, 2019)\\n\\n## Fixed\\n\\n- issue with array field where removing multiple fields did not remove the data from state\\n\\n## 2.11.14 (November 5, 2019)\\n\\n## Removed\\n\\n- removable prop to inputs because it was a bad idea... now it supports removal nativley\\n\\n## 2.11.13 (November 4, 2019)\\n\\n## Added\\n\\n- removable prop to inputs ( adds support for pairing keep state and array fields such that remove button actually removes field )\\n\\n## 2.11.12 (November 1, 2019)\\n\\n## Fixed\\n\\n- issue with keep state on array fields\\n\\n## 2.11.11 (November 1, 2019)\\n\\n## Added\\n\\n- comp name to useField hook\\n\\n## 2.11.10 (October 21, 2019)\\n\\n## Added\\n\\n- missing setFormError prop to FormApi interface\\n\\n## 2.11.9 (September 10, 2019)\\n\\n## Added\\n\\n- keepState to types\\n\\n## 2.11.8 (July 16, 2019)\\n\\n## Adds\\n\\n- allowEmptyStrings form level prop to types\\n\\n## 2.11.7 (July 8, 2019)\\n\\n## Fixes\\n\\n- issue 227 where allowEmptyStrings form level prop did not work\\n\\n## 2.11.6 (July 2, 2019)\\n\\n## Fixes\\n\\n- issue 219 where array fields would not work with scope\\n\\n## 2.11.5 (July 2, 2019)\\n\\n## Fixes\\n\\n- issue 225 where validation will occur on mount when there are initial values\\n\\n## 2.11.4 (July 1, 2019)\\n\\n## Fixes\\n\\n- issue 215 where selects dont work in Edge becase .. you know.. Microsoft\\n\\n## 2.11.3 (July 1, 2019)\\n\\n## Fixes\\n\\n- warning with useLayoutEffect when using SSR\\n\\n## 2.11.2 (June 27, 2019)\\n\\n## Updated\\n\\n- README file to include minzipped badge\\n\\n## 2.11.1 (June 18, 2019)\\n\\n## Fixed\\n\\n- Issue where initial values changing on multiselects caused looping .. oops\\n\\n## 2.11.0 (June 14, 2019)\\n\\n## Updated\\n\\n- useForm to return user props and a render method\\n- Form provider to no longer render a `<form></form>` IT NEVER SHOULD HAVE.\\n\\n## 2.10.2 (June 13, 2019)\\n\\n## Fixed\\n\\n- Issue where initial values did not change when form was reset\\n\\n## 2.10.1 (June 11, 2019)\\n\\n## Fixed\\n\\n- Issue where array level validation would not trigger for complex nested fields within array field\\n\\n## Added\\n\\n- length as a second parameter to arrayFields validate function\\n\\n## 2.10.0 (June 7, 2019)\\n\\n## Added\\n\\n- ability to pass validation function to an array field\\n- arrayFields are now treaded as \\\"shadow\\\" fields\\n\\n## 2.9.0 (June 6, 2019)\\n\\n## Added\\n\\n- useArrayField hook\\n\\n## 2.8.2 (June 5, 2019)\\n\\n## Added\\n\\n- ability to change out form options such as validateFields\\n\\n## 2.8.1 (June 5, 2019)\\n\\n## Fixed\\n\\n- issue with addWithInitialValue when using add and then addWithInitialValue\\n\\n## 2.8.0 (June 5, 2019)\\n\\n## Added\\n\\n- addWithInitialValue to the `ArrayField`\\n\\n## 2.7.8 (May 31, 2019)\\n\\n## Fixed\\n\\n- issue where initial values were not being formatted\\n\\n## 2.7.7 (May 30, 2019)\\n\\n## Fixed\\n\\n- issue where initial values were not being masked\\n\\n## 2.7.6 (May 29, 2019)\\n\\n## Updated\\n\\n- Types file to support validate on formApi\\n\\n## 2.7.5 (May 29, 2019)\\n\\n## Updated\\n\\n- Types file to support any type on form errors\\n\\n## 2.7.4 (May 23, 2019)\\n\\n### Fixed\\n\\n- documentation for creating custom inputs\\n\\n### Added\\n\\n- the ability to pass your own ref to inputs\\n\\n## 2.7.3 (May 22, 2019)\\n\\n### Fixed\\n\\n- issue with validation triggering when keep state and validate on blur\\n\\n## 2.7.2 (May 21, 2019)\\n\\n### Added\\n\\n- made `maskWithCursorOffset` optional in types\\n\\n## 2.7.1 (May 21, 2019)\\n\\n### Added\\n\\n- `maskWithCursorOffset` to the type defs\\n\\n## 2.7.0 (May 21, 2019)\\n\\n### Added\\n\\n- `maskWithCursorOffset` prop to inputs\\n\\n## 2.6.15 (May 20, 2019)\\n\\n### Added\\n\\n- maintainCursor to types\\n\\n## 2.6.14 (May 16, 2019)\\n\\n### Added\\n\\n- render and userProps to field context types\\n\\n## 2.6.13 (May 16, 2019)\\n\\n### Added\\n\\n- maskedValue to types\\n\\n## 2.6.12 (May 14, 2019)\\n\\n### Added\\n\\n- getters to useFields field api\\n\\n## 2.6.11 (May 11, 2019)\\n\\n### Added\\n\\n- useField hook to the docs\\n\\n### Updated\\n\\n- the interface for useField hook\\n\\n## 2.6.10 (May 10, 2019)\\n\\n### Fixed\\n\\n- issue where initialization code in useform was in the effect and not in constructor\\n\\n## 2.6.9 (May 10, 2019)\\n\\n### Fixed\\n\\n- attempting to fix issue that I think is caused by useEffect in useForm hook\\n\\n## 2.6.8 (May 10, 2019)\\n\\n### Fixed\\n\\n- issues cause by using `useMemo` instead of `useState` for initial render stuff\\n\\n## 2.6.7 (May 9, 2019)\\n\\n### Added\\n\\n- exists function to the field api types\\n\\n## 2.6.6 (May 9, 2019)\\n\\n### Added\\n\\n- exists function to the field api so you can check to see if that field exists\\n\\n## 2.6.5 (May 9, 2019)\\n\\n### Fixed\\n\\n- issue where inital render of useFieldApi would fail when field was not registered yet\\n\\n## 2.6.4 (May 9, 2019)\\n\\n### Updated\\n\\n- useForm hook so that the event handlers can change\\n\\n## 2.6.3 (May 7, 2019)\\n\\n### Removed\\n\\n- debug as a dependency and added my own :)\\n\\n## 2.6.2 (May 3, 2019)\\n\\n### Fixed\\n\\n- issue with default register context missin getField function\\n\\n## 2.6.1 (May 3, 2019)\\n\\n### Fixed\\n\\n- issue with `useFieldApi` hook and `withFieldApi` HOC where reset and validate were not there\\n\\n### Added\\n\\n- a few more tests to increase test coverage!!!! wooo\\n\\n## 2.6.0 (May 2, 2019)\\n\\n### Added\\n\\n- `useForm` hook!!! and `FormProvider` component!!!\\n\\n## 2.5.0 (April 30, 2019)\\n\\n### Updated\\n\\n- useField hook to useEffect instead of useLayoutEffect\\n\\n## 2.4.0 (April 30, 2019)\\n\\n### Added\\n\\n- preventEnter prop to the form so users can prevent enter key form submission\\n\\n## 2.3.2 (April 22, 2019)\\n\\n### Updated\\n\\n- Issue with dynamic arrays and initial values\\n\\n## 2.3.1 (April 12, 2019)\\n\\n### Updated\\n\\n- Babel build\\n\\n## 2.3.0 (April 3, 2019)\\n\\n### Added\\n\\n- `allowEmtyStrings` prop to the form\\n- `allowEmtyString` prop to inputs\\n\\n### Fixed\\n\\n- issue where setValues would not allow empty strings\\n\\n## 2.2.0 (March 29, 2019)\\n\\n### Added\\n\\n- `setFormError` function to the form api\\n- `validate` function to the form api\\n\\n## 2.1.15 (March 28, 2019)\\n\\n### Fixed\\n\\n- Issue with setValues missing from the default context\\n\\n## 2.1.14 (March 27, 2019)\\n\\n### Fixed\\n\\n- Issue where reset would call validation\\n\\n## 2.1.13 (March 18, 2019)\\n\\n### Updated\\n\\n- Allowing for optional generic on FormValue\\n\\n## 2.1.12 (March 13, 2019)\\n\\n### Updated\\n\\n- ref to be any type in typings\\n\\n## 2.1.11 (March 12, 2019)\\n\\n### Fixed\\n\\n- issue in typings for ref field on FieldContext\\n\\n## 2.1.10 (March 12, 2019)\\n\\n### Fixed\\n\\n- issue when using a field NOT in the context of a form\\n\\n## 2.1.9 (March 8, 2019)\\n\\n### Fixed\\n\\n- another issue where initial values did not work when keep state was passed\\n\\n## 2.1.8 (March 8, 2019)\\n\\n### Fixed\\n\\n- issue where initial values did not work when keep state was passed\\n\\n## 2.1.7 (March 3, 2019)\\n\\n### Fixed\\n\\n- issue where initial values did not work for `ArrayFields`\\n\\n## 2.1.6 (Feb 21, 2019)\\n\\n### Updated\\n\\n- typing files for type script users\\n\\n## 2.1.5 (Feb 19, 2019)\\n\\n### Fixed\\n\\n- Issue with text area input not setting typed value\\n\\n## 2.1.4 (Feb 19, 2019)\\n\\n### Added\\n\\n- `maskOnBlur` prop to inputs\\n\\n## 2.1.3 (Feb 14, 2019)\\n\\n### Added\\n\\n- `fieldExists` api function to check if field exists\\n\\n## 2.1.2 (Feb 14, 2019)\\n\\n### Fixed\\n\\n- Issue where form that is submitted through enter key would try to prevent default\\n\\n## 2.1.1 (Feb 14, 2019)\\n\\n### Fixed\\n\\n- Issue where form values would not get passed to validation function when touched\\n\\n## 2.1.0 (Feb 14, 2019)\\n\\n### Updated\\n\\n- Format and parse to set maskedValue instead of value\\n\\n## 2.0.5 (Feb 14, 2019)\\n\\n### Fixed\\n\\n- Issue where you could NOT set 0 null or false as initial values because they are falsey\\n\\n## 2.0.4 (Feb 13, 2019)\\n\\n### Added\\n\\n- validateFields function to the form!!!\\n\\n## 2.0.3 (Feb 13, 2019)\\n\\n### Fixed\\n\\n- Issue where reset would not work for scoped fields\\n\\n### Added\\n\\n- Set Values to the form api!!!\\n\\n## 2.0.2 (Feb 13, 2019)\\n\\n### Fixed\\n\\n- Issue where ArrayField was prefixing all fields with 'field'\\n- Issue where when input fields changed input did not rerender.\\n\\n## 2.0.1 (Feb 10, 2019)\\n\\n### Fixed\\n\\n- Issue where render and component props were getting passed to the dom form\\n\\n## 2.0.0 (Feb 7, 2019)\\n\\n### Added\\n\\n- useFieldApi\\n- useFieldState\\n- useFormApi\\n- useFormState\\n- useField\\n- format\\n- parse\\n- maintianCursor ( fixes issue where cursor jumps to end on mask )\\n- ArrayField ( Check out the docs! this is sick! )\\n- Form Level validation ( function that can invalidate the form as a whole )\\n- debug prop that allows you to visually view the rendering!\\n\\n### Changed\\n\\n- the field `\\\"siblings.1\\\"` now resolves to `values.siblings[1]`, it used to resolve to `values.siblings.1`\\n- the field `\\\"siblings['2']\\\"` now resolves to `values.siblings[2]`, it used to resolve to `values.siblings.2`\\n- withFormApi will no longer trigger a rerender if the fomrs state changes. This is a great optimization for those who want to modify but dont care about the form state!\\n- the `validate` prop now expects the validation function to return `undefined` if there is no error. Any other returned value (including falsey `null`, `0`, etc will be treated as an error for the field.\\n\\n### Removed\\n\\n- The Field Component\\n- `fieldExists` not needed\\n- `setState` will maybe add later but its complex and out of scope ATM\\n- `setValues` will maybe add later but its complex and out of scope ATM ( as of V 2.0.3 its back! )\\n- `preSubmit` was never needed.. developers can do this themselves\\n- Async Validation. Async validation led to many issues that overcomplicated `informed`. We determined this is something that the developer could achive on there own for now but we may look into adding this in the future.\\n\\n## 1.10.12 ( December 4, 2018 )\\n\\n### Updated\\n\\n- typescript definition file\\n\\n## 1.10.11 & 1.10.10 I ran version patch twice lol ( December 4, 2018 )\\n\\n### Updated\\n\\n- Select forward ref\\n\\n## 1.10.9 ( November 16, 2018 )\\n\\n### Updated\\n\\n- files in package json to include typeigs\\n\\n## 1.10.8 ( November 8, 2018 )\\n\\n### Added\\n\\n- type file for typescript\\n\\n## 1.10.7 ( October 11, 2018 )\\n\\n### Updated\\n\\n- Name of withFormSate\\n\\n## 1.10.6 ( October 2, 2018 )\\n\\n### Fixed\\n\\n- Skipped test for select!!!\\n\\n### Updated\\n\\n- Select to use new ref interface\\n\\n## 1.10.5 ( September 14, 2018 )\\n\\n### Added\\n\\n- License\\n\\n## 1.10.4 ( August 13, 2018 )\\n\\n### Fixed\\n\\n- Issue with @babel/runtime was the dep when it should have ben @babel/runtime-corejs2\\n\\n## 1.10.3 ( August 13, 2018 )\\n\\n### Fixed\\n\\n- Issue with @babel/runtime for real this time\\n\\n## 1.10.2 ( August 13, 2018 )\\n\\n### Fixed\\n\\n- Issue with @babel/runtime\\n\\n## 1.10.1 ( August 13, 2018 )\\n\\n### Removed\\n\\n- mistakenly added dev deps that were deps... oops\\n\\n## 1.10.0 ( August 13, 2018 )\\n\\n### Added\\n\\n- submits to the form state\\n\\n## 1.9.0 ( August 8, 2018 )\\n\\n### Rebuilt\\n\\n- Added prettier so all the files have been changed... so i rebuilt to have source maps match code\\n\\n## 1.8.1 ( August 1, 2018 )\\n\\n### Rebuilt\\n\\n- Attempting to simply rebuild lib due to possible build issue\\n\\n## 1.8.0 ( August 1, 2018 )\\n\\n### Updated\\n\\n- initialValue to get exposed as prop to custom fields\\n\\n## 1.7.5 ( July 31, 2018 )\\n\\n### Added\\n\\n- Source maps\\n\\n## 1.7.4 ( July 26, 2018 )\\n\\n### Fixed\\n\\n- Issue where Basic radio group was not getting exported\\n\\n## 1.7.3 ( July 23, 2018 )\\n\\n### Fixed\\n\\n- issue where bind to field did not pass down the field prop.\\n\\n## 1.7.2 ( July 20, 2018 )\\n\\n### Fixed\\n\\n- Issue where element wont get removed from array when deregistering field... this is used when dynamically removing value\\n\\n## 1.7.1 ( July 20, 2018 )\\n\\n### Added\\n\\n- Field prop is now exposed to field elements and default inputs pass field as name to html inputs\\n\\n## 1.7.0 ( July 18, 2018 )\\n\\n### Added\\n\\n- fieldExists method to the formApi\\n\\n## 1.6.0 ( July 16, 2018 )\\n\\n### Added\\n\\n- onValueChange prop to inputs so you can tie into when values change!!\\n\\n## 1.5.2 ( July 13, 2018 )\\n\\n### Fixed\\n\\n- Issue where prop changes to fields would not get recognized\\n\\n## 1.5.1 ( July 13, 2018 )\\n\\n### Fixed\\n\\n- issue where i forgott to add @babel/runtime as dependency\\n\\n## 1.5.0 ( July 12, 2018 )\\n\\n### Added\\n\\n- asyncValidation prop to inputs\\n- asyncValidateOnBlur prop to inputs\\n\\n## 1.4.0 ( July 5, 2018 )\\n\\n### Added\\n\\n- Basic input fields so users can more easily create custom inputs\\n- Docs for creating custom inputs\\n\\n## 1.3.11 ( July 9, 2018 )\\n\\n### Fixed\\n\\n- issue where you could not nest scope\\n\\n## 1.3.10 ( July 5, 2018 )\\n\\n### Fixed\\n\\n- issue where you could not pass initialValue=false to checkbox\\n\\n## 1.3.9 ( July 5, 2018 )\\n\\n### Fixed\\n\\n- issue where mutable values were getting passed to onSubmit and getState\\n\\n## 1.3.8 ( July 2, 2018 )\\n\\n### Fixed\\n\\n- issue where path array was being build every get and set\\n\\n## 1.3.7 ( July 2, 2018 )\\n\\n### Fixed\\n\\n- issue where onChange was getting passed to internal form element\\n\\n## 1.3.6 ( June 28, 2018 )\\n\\n### Added\\n\\n- globalObject: 'this' to the webpack dist config to support SSR\\n\\n## 1.3.5 ( June 28, 2018 )\\n\\n### Fixed\\n\\n- Issue with event emitter limit ( need to look into alternative solution )\\n- Removed depricated sandbox sinon usage that was causing errors during tests\\n\\n## 1.3.3 ( June 28, 2018 )\\n\\n### Updated\\n\\n- Webpack dist configuration to keep class names\\n\\n## 1.3.2 ( June 28, 2018 )\\n\\n### Fixed\\n\\n- Issue were initialValue was getting passed all the way down to html input\\n- Issue where form would not rerender when field was registered\\n\\n## 1.3.1 ( June 28, 2018 )\\n\\n### Fixed\\n\\n- Issue were validateOnMount was getting passed all the way down to html input\\n\\n## 1.3.0 ( June 28, 2018 )\\n\\n### Added\\n\\n- mask so you can mask values at field level. example `value => value + '!!!'`\\n\\n## 1.2.1 ( June 27, 2018 )\\n\\n### Added\\n\\n- hook so you can add a button with type=reset and it will reset the form\\n\\n## 1.2.0 ( June 27, 2018 )\\n\\n### Added\\n\\n- validateOnMount to input props\\n\\n## 1.1.2 ( June 25, 2018 )\\n\\n### Moved\\n\\n- React and React-Dom to dev dependencies\\n\\n## 1.1.1 ( June 18, 2018 )\\n\\n### Fixed\\n\\n- Bug where i did not do null check on event within on submit\\n\\n## 1.0.1 ( June 15, 2018 )\\n\\n### Added\\n\\n- Notify prop to inputs that allows you to notify other fields when your error state changes ( see docs )\\n\\n## 1.0.0 (June 12, 2018)\\n\\n### Added\\n\\n- Text\\n- TextArea\\n- Radio Group\\n- Radio\\n- Select\\n- Select as Multiselect !!!\\n- Checkbox\\n- withRadioGroup\\n- withFieldApi\\n- withFieldState\\n- withFormApi\\n- withFormState\\n- asField\\n- Form\\n- Field\\n\\n### Changed\\n\\n**\\nNote: this was the first release but i wanted to include changes from\\n`react-form` so here they are:\\n**\\n\\n- `formApi` was split into two parts `formApi` ( contains just functions ) `formState` ( contains just form state )\\n- Form level validation is gone. You do all validation via field validation.\\n- `defaultValues` Form prop is now called `initialValues`\\n- `onChange` Form prop only recieves the `formState`. It used to retrieve the form Api as well.\\n- `preventDefault` Form prop is now `dontPreventDefault`\\n- `getApi` Form prop just returns the formApi, not the state and the api.\\n- `Form` component now renders the `form` element internally. So you dont have to \\\"hook it up\\\" anymore!!\\n\\n### Removed\\n\\n**\\nNote: this was the first release but i wanted to include things that were removed from\\n`react-form` so here they are:\\n**\\n\\n- `NestedField` you can use `Scope` instead but all it does is scope internal fields to `scope=\\\"your-scope\\\"`\\n- validateOnSubmit was removed. Now the form always validates on submit by default and you can opt into sooner validation at field level.\\n- `defaultValues` form prop is now called `initialValues`\\n- `pure` Form prop. Its not needed anymore due to the use of `React.PureComponent` internally.\\n- add, remove, and swap values. The developer can achive this on there own without the use of internal functionality.\\n- Array Syntax. In order to keep things simple we now only support the string syntax for field names.\\n- Async Validation. Async validation led to many issues that overcomplicated `react-form`. We determined this is something that the developer could achive on there own for now but we may look into adding this in the future.\\n- Warning and Success have been removed for now to keep lib lean but we may add additional functions in the future.\\n\";","\"use strict\";\n\nvar _frameworkImportPath = require(\"@storybook/react\");\n\n/* eslint-disable import/no-unresolved */\n(0, _frameworkImportPath.configure)([require.context('./stories', false, /^\\.[\\\\/](?:index\\.js)$/)], module, false);","// Imports\nvar ___CSS_LOADER_API_IMPORT___ = require(\"../../node_modules/@storybook/builder-webpack4/node_modules/css-loader/dist/runtime/api.js\");\nexports = ___CSS_LOADER_API_IMPORT___(false);\n// Module\nexports.push([module.id, \"/*! normalize.css v3.0.2 | MIT License | git.io/normalize */\\n\\n/**\\n * 1. Set default font family to sans-serif.\\n * 2. Prevent iOS text size adjust after orientation change, without disabling\\n *    user zoom.\\n */\\n\\nhtml {\\n  font-family: sans-serif; /* 1 */\\n  -ms-text-size-adjust: 100%; /* 2 */\\n  -webkit-text-size-adjust: 100%; /* 2 */\\n}\\n\\n/**\\n * Remove default margin.\\n */\\n\\nbody {\\n  margin: 0;\\n}\\n\\n/* HTML5 display definitions\\n   ========================================================================== */\\n\\n/**\\n * Correct `block` display not defined for any HTML5 element in IE 8/9.\\n * Correct `block` display not defined for `details` or `summary` in IE 10/11\\n * and Firefox.\\n * Correct `block` display not defined for `main` in IE 11.\\n */\\n\\narticle,\\naside,\\ndetails,\\nfigcaption,\\nfigure,\\nfooter,\\nheader,\\nhgroup,\\nmain,\\nmenu,\\nnav,\\nsection,\\nsummary {\\n  display: block;\\n}\\n\\n/**\\n * 1. Correct `inline-block` display not defined in IE 8/9.\\n * 2. Normalize vertical alignment of `progress` in Chrome, Firefox, and Opera.\\n */\\n\\naudio,\\ncanvas,\\nprogress,\\nvideo {\\n  display: inline-block; /* 1 */\\n  vertical-align: baseline; /* 2 */\\n}\\n\\n/**\\n * Prevent modern browsers from displaying `audio` without controls.\\n * Remove excess height in iOS 5 devices.\\n */\\n\\naudio:not([controls]) {\\n  display: none;\\n  height: 0;\\n}\\n\\n/**\\n * Address `[hidden]` styling not present in IE 8/9/10.\\n * Hide the `template` element in IE 8/9/11, Safari, and Firefox < 22.\\n */\\n\\n[hidden],\\ntemplate {\\n  display: none;\\n}\\n\\n/* Links\\n   ========================================================================== */\\n\\n/**\\n * Remove the gray background color from active links in IE 10.\\n */\\n\\na {\\n  background-color: transparent;\\n}\\n\\n/**\\n * Improve readability when focused and also mouse hovered in all browsers.\\n */\\n\\na:active,\\na:hover {\\n  outline: 0;\\n}\\n\\n/* Text-level semantics\\n   ========================================================================== */\\n\\n/**\\n * Address styling not present in IE 8/9/10/11, Safari, and Chrome.\\n */\\n\\nabbr[title] {\\n  border-bottom: 1px dotted;\\n}\\n\\n/**\\n * Address style set to `bolder` in Firefox 4+, Safari, and Chrome.\\n */\\n\\nb,\\nstrong {\\n  font-weight: bold;\\n}\\n\\n/**\\n * Address styling not present in Safari and Chrome.\\n */\\n\\ndfn {\\n  font-style: italic;\\n}\\n\\n/**\\n * Address variable `h1` font-size and margin within `section` and `article`\\n * contexts in Firefox 4+, Safari, and Chrome.\\n */\\n\\nh1 {\\n  font-size: 2em;\\n  margin: 0.67em 0;\\n}\\n\\n/**\\n * Address styling not present in IE 8/9.\\n */\\n\\nmark {\\n  background: #ff0;\\n  color: #000;\\n}\\n\\n/**\\n * Address inconsistent and variable font size in all browsers.\\n */\\n\\nsmall {\\n  font-size: 80%;\\n}\\n\\n/**\\n * Prevent `sub` and `sup` affecting `line-height` in all browsers.\\n */\\n\\nsub,\\nsup {\\n  font-size: 75%;\\n  line-height: 0;\\n  position: relative;\\n  vertical-align: baseline;\\n}\\n\\nsup {\\n  top: -0.5em;\\n}\\n\\nsub {\\n  bottom: -0.25em;\\n}\\n\\n/* Embedded content\\n   ========================================================================== */\\n\\n/**\\n * Remove border when inside `a` element in IE 8/9/10.\\n */\\n\\nimg {\\n  border: 0;\\n}\\n\\n/**\\n * Correct overflow not hidden in IE 9/10/11.\\n */\\n\\nsvg:not(:root) {\\n  overflow: hidden;\\n}\\n\\n/* Grouping content\\n   ========================================================================== */\\n\\n/**\\n * Address margin not present in IE 8/9 and Safari.\\n */\\n\\nfigure {\\n  margin: 1em 40px;\\n}\\n\\n/**\\n * Address differences between Firefox and other browsers.\\n */\\n\\nhr {\\n  box-sizing: content-box;\\n  height: 0;\\n}\\n\\n/**\\n * Contain overflow in all browsers.\\n */\\n\\npre {\\n  overflow: auto;\\n}\\n\\n/**\\n * Address odd `em`-unit font size rendering in all browsers.\\n */\\n\\ncode,\\nkbd,\\npre,\\nsamp {\\n  font-family: monospace, monospace;\\n  font-size: 1em;\\n}\\n\\n/* Forms\\n   ========================================================================== */\\n\\n/**\\n * Known limitation: by default, Chrome and Safari on OS X allow very limited\\n * styling of `select`, unless a `border` property is set.\\n */\\n\\n/**\\n * 1. Correct color not being inherited.\\n *    Known issue: affects color of disabled elements.\\n * 2. Correct font properties not being inherited.\\n * 3. Address margins set differently in Firefox 4+, Safari, and Chrome.\\n */\\n\\nbutton,\\ninput,\\noptgroup,\\nselect,\\ntextarea {\\n  color: inherit; /* 1 */\\n  font: inherit; /* 2 */\\n  margin: 0; /* 3 */\\n}\\n\\n/**\\n * Address `overflow` set to `hidden` in IE 8/9/10/11.\\n */\\n\\nbutton {\\n  overflow: visible;\\n}\\n\\n/**\\n * Address inconsistent `text-transform` inheritance for `button` and `select`.\\n * All other form control elements do not inherit `text-transform` values.\\n * Correct `button` style inheritance in Firefox, IE 8/9/10/11, and Opera.\\n * Correct `select` style inheritance in Firefox.\\n */\\n\\nbutton,\\nselect {\\n  text-transform: none;\\n}\\n\\n/**\\n * 1. Avoid the WebKit bug in Android 4.0.* where (2) destroys native `audio`\\n *    and `video` controls.\\n * 2. Correct inability to style clickable `input` types in iOS.\\n * 3. Improve usability and consistency of cursor style between image-type\\n *    `input` and others.\\n */\\n\\nbutton,\\nhtml input[type=\\\"button\\\"], /* 1 */\\ninput[type=\\\"reset\\\"],\\ninput[type=\\\"submit\\\"] {\\n  -webkit-appearance: button; /* 2 */\\n  cursor: pointer; /* 3 */\\n}\\n\\n/**\\n * Re-set default cursor for disabled elements.\\n */\\n\\nbutton[disabled],\\nhtml input[disabled] {\\n  cursor: default;\\n}\\n\\n/**\\n * Remove inner padding and border in Firefox 4+.\\n */\\n\\nbutton::-moz-focus-inner,\\ninput::-moz-focus-inner {\\n  border: 0;\\n  padding: 0;\\n}\\n\\n/**\\n * Address Firefox 4+ setting `line-height` on `input` using `!important` in\\n * the UA stylesheet.\\n */\\n\\ninput {\\n  line-height: normal;\\n}\\n\\n/**\\n * It's recommended that you don't attempt to style these elements.\\n * Firefox's implementation doesn't respect box-sizing, padding, or width.\\n *\\n * 1. Address box sizing set to `content-box` in IE 8/9/10.\\n * 2. Remove excess padding in IE 8/9/10.\\n */\\n\\ninput[type=\\\"checkbox\\\"],\\ninput[type=\\\"radio\\\"] {\\n  box-sizing: border-box; /* 1 */\\n  padding: 0; /* 2 */\\n}\\n\\n/**\\n * Fix the cursor style for Chrome's increment/decrement buttons. For certain\\n * `font-size` values of the `input`, it causes the cursor style of the\\n * decrement button to change from `default` to `text`.\\n */\\n\\ninput[type=\\\"number\\\"]::-webkit-inner-spin-button,\\ninput[type=\\\"number\\\"]::-webkit-outer-spin-button {\\n  height: auto;\\n}\\n\\n/**\\n * 1. Address `appearance` set to `searchfield` in Safari and Chrome.\\n * 2. Address `box-sizing` set to `border-box` in Safari and Chrome\\n *    (include `-moz` to future-proof).\\n */\\n\\ninput[type=\\\"search\\\"] {\\n  -webkit-appearance: textfield; /* 1 */ /* 2 */\\n  box-sizing: content-box;\\n}\\n\\n/**\\n * Remove inner padding and search cancel button in Safari and Chrome on OS X.\\n * Safari (but not Chrome) clips the cancel button when the search input has\\n * padding (and `textfield` appearance).\\n */\\n\\ninput[type=\\\"search\\\"]::-webkit-search-cancel-button,\\ninput[type=\\\"search\\\"]::-webkit-search-decoration {\\n  -webkit-appearance: none;\\n}\\n\\n/**\\n * Define consistent border, margin, and padding.\\n */\\n\\nfieldset {\\n  border: 1px solid #c0c0c0;\\n  margin: 0 2px;\\n  padding: 0.35em 0.625em 0.75em;\\n}\\n\\n/**\\n * 1. Correct `color` not being inherited in IE 8/9/10/11.\\n * 2. Remove padding so people aren't caught out if they zero out fieldsets.\\n */\\n\\nlegend {\\n  border: 0; /* 1 */\\n  padding: 0; /* 2 */\\n}\\n\\n/**\\n * Remove default vertical scrollbar in IE 8/9/10/11.\\n */\\n\\ntextarea {\\n  overflow: auto;\\n}\\n\\n/**\\n * Don't inherit the `font-weight` (applied by a rule above).\\n * NOTE: the default cannot safely be changed in Chrome and Safari on OS X.\\n */\\n\\noptgroup {\\n  font-weight: bold;\\n}\\n\\n/* Tables\\n   ========================================================================== */\\n\\n/**\\n * Remove most spacing between table cells.\\n */\\n\\ntable {\\n  border-collapse: collapse;\\n  border-spacing: 0;\\n}\\n\\ntd,\\nth {\\n  padding: 0;\\n}\", \"\"]);\n// Exports\nmodule.exports = exports;\n","// Imports\nvar ___CSS_LOADER_API_IMPORT___ = require(\"../../node_modules/@storybook/builder-webpack4/node_modules/css-loader/dist/runtime/api.js\");\nexports = ___CSS_LOADER_API_IMPORT___(false);\n// Module\nexports.push([module.id, \"/* http://prismjs.com/download.html?themes=prism-okaidia&languages=markup+css+clike+javascript+json+jsx&plugins=previewer-base */\\n/**\\n * okaidia theme for JavaScript, CSS and HTML\\n * Loosely based on Monokai textmate theme by http://www.monokai.nl/\\n * @author ocodia\\n */\\n\\ncode[class*=\\\"language-\\\"],\\npre[class*=\\\"language-\\\"] {\\n\\tcolor: #f8f8f2 !important;\\n\\tbackground: none !important;\\n\\ttext-shadow: 0 1px rgba(0, 0, 0, 0.3) !important;\\n\\tfont-family: Consolas, Monaco, 'Andale Mono', 'Ubuntu Mono', monospace !important;\\n\\ttext-align: left !important;\\n\\twhite-space: pre !important;\\n\\tword-spacing: normal !important;\\n\\tword-break: normal !important;\\n\\tword-wrap: normal !important;\\n\\tline-height: 1.5 !important;\\n  border: none;\\n\\n\\t-moz-tab-size: 4 !important;\\n\\t-o-tab-size: 4 !important;\\n\\ttab-size: 4 !important;\\n\\n\\t-webkit-hyphens: none !important;\\n\\t-ms-hyphens: none !important;\\n\\thyphens: none !important;\\n}\\n\\n/* Code blocks */\\npre[class*=\\\"language-\\\"] {\\n\\tpadding: 1rem !important;\\n\\tmargin: 0 0 !important;\\n\\toverflow: visible !important;\\n  overflow-x: scroll !important;\\n\\tborder-radius: 0.3em !important;\\n}\\n\\ncode[class*=\\\"language-\\\"] {\\n  margin: 0 !important;\\n  padding: 0 !important;\\n  overflow: visible !important;\\n}\\n\\n:not(pre) > code[class*=\\\"language-\\\"],\\npre[class*=\\\"language-\\\"] {\\n\\tbackground: #272822 !important;\\n}\\n\\n/* Inline code */\\n:not(pre) > code[class*=\\\"language-\\\"] {\\n\\tpadding: .1em !important;\\n\\tborder-radius: .3em !important;\\n\\twhite-space: normal !important;\\n}\\n\\n.token.comment,\\n.token.prolog,\\n.token.doctype,\\n.token.cdata {\\n\\tcolor: slategray !important;\\n}\\n\\n.token.punctuation {\\n\\tcolor: #f8f8f2 !important;\\n}\\n\\n.namespace {\\n\\topacity: .7 !important;\\n}\\n\\n.token.property,\\n.token.tag,\\n.token.constant,\\n.token.symbol,\\n.token.deleted {\\n\\tcolor: #f92672 !important;\\n}\\n\\n.token.boolean,\\n.token.number {\\n\\tcolor: #ae81ff !important;\\n}\\n\\n.token.selector,\\n.token.attr-name,\\n.token.string,\\n.token.char,\\n.token.builtin,\\n.token.inserted {\\n\\tcolor: #a6e22e !important;\\n}\\n\\n.token.operator,\\n.token.entity,\\n.token.url,\\n.language-css .token.string,\\n.style .token.string,\\n.token.variable {\\n\\tcolor: #f8f8f2 !important;\\n}\\n\\n.token.atrule,\\n.token.attr-value,\\n.token.function {\\n\\tcolor: #e6db74 !important;\\n}\\n\\n.token.keyword {\\n\\tcolor: #66d9ef !important;\\n}\\n\\n.token.regex,\\n.token.important {\\n\\tcolor: #fd971f !important;\\n}\\n\\n.token.important,\\n.token.bold {\\n\\tfont-weight: bold !important;\\n}\\n.token.italic {\\n\\tfont-style: italic !important;\\n}\\n\\n.token.entity {\\n\\tcursor: help !important;\\n}\\n\\n.prism-previewer,\\n.prism-previewer:before,\\n.prism-previewer:after {\\n\\tposition: absolute !important;\\n\\tpointer-events: none !important;\\n}\\n.prism-previewer,\\n.prism-previewer:after {\\n\\tleft: 50% !important;\\n}\\n.prism-previewer {\\n\\tmargin-top: -48px !important;\\n\\twidth: 32px !important;\\n\\theight: 32px !important;\\n\\tmargin-left: -16px !important;\\n\\n\\topacity: 0 !important;\\n\\ttransition: opacity .25s !important;\\n}\\n.prism-previewer.flipped {\\n\\tmargin-top: 0 !important;\\n\\tmargin-bottom: -48px !important;\\n}\\n.prism-previewer:before,\\n.prism-previewer:after {\\n\\tcontent: '' !important;\\n\\tposition: absolute !important;\\n\\tpointer-events: none !important;\\n}\\n.prism-previewer:before {\\n\\ttop: -5px !important;\\n\\tright: -5px !important;\\n\\tleft: -5px !important;\\n\\tbottom: -5px !important;\\n\\tborder-radius: 10px !important;\\n\\tborder: 5px solid #fff !important;\\n\\tbox-shadow: 0 0 3px rgba(0, 0, 0, 0.5) inset, 0 0 10px rgba(0, 0, 0, 0.75) !important;\\n}\\n\\n.prism-previewer:after {\\n\\ttop: 100% !important;\\n\\twidth: 0 !important;\\n\\theight: 0 !important;\\n\\tmargin: 5px 0 0 -7px !important;\\n\\tborder: 7px solid transparent !important;\\n\\tborder-color: rgba(255, 0, 0, 0) !important;\\n\\tborder-top-color: #fff !important;\\n}\\n.prism-previewer.flipped:after {\\n\\ttop: auto !important;\\n\\tbottom: 100% !important;\\n\\tmargin-top: 0 !important;\\n\\tmargin-bottom: 5px !important;\\n\\tborder-top-color: rgba(255, 0, 0, 0) !important;\\n\\tborder-bottom-color: #fff !important;\\n}\\n.prism-previewer.active {\\n\\topacity: 1 !important;\\n}\\n\", \"\"]);\n// Exports\nmodule.exports = exports;\n","// Imports\nvar ___CSS_LOADER_API_IMPORT___ = require(\"../../node_modules/@storybook/builder-webpack4/node_modules/css-loader/dist/runtime/api.js\");\nexports = ___CSS_LOADER_API_IMPORT___(false);\n// Module\nexports.push([module.id, \":root {\\n  --informed-font-size--10: 10px;\\n  --informed-font-size--20: 12px;\\n  --informed-font-size--30: 14px;\\n  --informed-font-size--40: 17px;\\n  --informed-font-size--50: 20px;\\n  --informed-font-size--55: 23px;\\n  --informed-font-size--60: 24px;\\n  --informed-font-size--70: 28px;\\n  --informed-font-size--75: 34px;\\n  --informed-font-size--80: 40px;\\n  --informed-height--pill: 40px;\\n  --informed-line-height--10: 18px;\\n  --informed-line-height--20: 20px;\\n  --informed-line-height--30: 21px;\\n  --informed-line-height--40: 23px;\\n  --informed-line-height--50: 24px;\\n  --informed-line-height--60: 28px;\\n  --informed-line-height--70: 36px;\\n  --informed-line-height--75: 45px;\\n  --informed-line-height--80: 48px;\\n}\\n\\n.body {\\n  font-family: Helvetica, sans-serif;\\n}\\n\\na > img {\\n  border-radius: 10px;\\n}\\n\\nh1 {\\n  letter-spacing: -0.6px;\\n  font-size: var(--informed-font-size--80, 40px);\\n  line-height: var(--informed-line-height--80, 48px);\\n}\\n\\nh2 {\\n  letter-spacing: -0.5px;\\n  font-size: var(--informed-font-size--70, 28px);\\n  line-height: var(--informed-line-height--70, 36px);\\n}\\n\\nh3 {\\n  letter-spacing: -0.6px;\\n  font-size: var(--informed-font-size--60, 24px);\\n  line-height: var(--informed-line-height--60, 28px);\\n}\\n\\nh4 {\\n  letter-spacing: -0.4px;\\n  font-size: var(--informed-font-size--50, 20px);\\n  line-height: var(--informed-line-height--60, 28px);\\n}\\n\\nh5 {\\n  font-size: var(--informed-font-size--40, 17px);\\n  line-height: var(--informed-line-height--20, 20px);\\n}\\n\\nh6 {\\n  font-size: var(--informed-font-size--30, 14px);\\n  line-height: var(--informed-line-height--30, 21px);\\n}\\n\\ninput {\\n  margin-bottom: 1rem;\\n}\\n\\n.address-option {\\n  width: 100%;\\n  background-color: #f4f4f4;\\n  padding: 10px 20px;\\n}\\n\\n.address-option:hover {\\n  background-color: #9d9c9c;\\n  cursor: pointer;\\n}\\n\\ninput:not([type='checkbox']):not([type='radio']),\\ntextarea,\\nselect {\\n  margin-bottom: 1rem;\\n  margin-top: 1rem;\\n  display: block;\\n  border-radius: 20px;\\n  width: 85%;\\n  padding: 10px 20px;\\n  font-weight: 500;\\n  border: 1px solid transparent;\\n  margin-right: 2rem;\\n  /* max-width: 400px; */\\n  background-color: #f4f4f4;\\n}\\n\\ninput + small,\\ntextarea + small,\\nselect + small {\\n  color: rgb(237, 78, 59);\\n  padding-bottom: 1rem;\\n  display: block;\\n  font-weight: bold;\\n}\\n\\nfieldset small[role='alert'] {\\n  color: rgb(237, 78, 59);\\n  padding-bottom: 1rem;\\n  display: block;\\n  font-weight: bold;\\n}\\n\\ninput[aria-invalid='true']:not([type='checkbox']):not([type='radio']),\\ntextarea[aria-invalid='true'],\\nselect[aria-invalid='true'] {\\n  border: 1px solid rgb(237, 78, 59) !important;\\n}\\n\\ninput[aria-invalid='true'][type='radio'],\\ninput[aria-invalid='true'][type='checkbox'] {\\n  outline: 1px solid rgb(237, 78, 59) !important;\\n}\\n\\n.radio-label {\\n  display: block;\\n}\\n\\ntextarea {\\n  max-width: 100%;\\n}\\n\\nfieldset {\\n  border: none;\\n}\\n\\nselect {\\n  /* needed */\\n  -webkit-appearance: none;\\n  -moz-appearance: none;\\n  appearance: none;\\n  /* SVG background image */\\n  background-image: url('data:image/svg+xml;charset=UTF-8,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%2212%22%20height%3D%2212%22%20viewBox%3D%220%200%2012%2012%22%3E%3Ctitle%3Edown-arrow%3C%2Ftitle%3E%3Cg%20fill%3D%22%23000000%22%3E%3Cpath%20d%3D%22M10.293%2C3.293%2C6%2C7.586%2C1.707%2C3.293A1%2C1%2C0%2C0%2C0%2C.293%2C4.707l5%2C5a1%2C1%2C0%2C0%2C0%2C1.414%2C0l5-5a1%2C1%2C0%2C1%2C0-1.414-1.414Z%22%20fill%3D%22%23000000%22%3E%3C%2Fpath%3E%3C%2Fg%3E%3C%2Fsvg%3E');\\n  background-size: 0.6em;\\n  background-position: calc(100% - 1.3em) center;\\n  background-repeat: no-repeat;\\n}\\n\\n.select:before {\\n  content: '';\\n  position: absolute;\\n  right: 10px;\\n  top: 8px;\\n  width: 0;\\n  height: 0;\\n  border-left: 10px solid transparent;\\n  border-right: 10px solid transparent;\\n  border-top: 10px solid #f00;\\n}\\n\\n.select:after {\\n  content: '';\\n  position: absolute;\\n  right: 10px;\\n  top: 3px;\\n  width: 0;\\n  height: 0;\\n  border-left: 10px solid transparent;\\n  border-right: 10px solid transparent;\\n  border-top: 10px solid #333;\\n}\\n\\nlabel {\\n  margin-bottom: 1rem;\\n  display: block;\\n}\\n\\nlegend {\\n  margin-bottom: 1rem;\\n  display: block;\\n}\\n\\nbutton {\\n  text-align: left;\\n  display: inline-block;\\n  height: var(--informed-height--pill);\\n  border: 1px solid transparent;\\n  border-radius: 20px;\\n  padding: 5px 40px;\\n  color: white;\\n  /* background-color: #3e6ae1; */\\n  background-color: rebeccapurple;\\n  margin-bottom: 1rem;\\n  margin-top: 1rem;\\n  margin-right: 1rem;\\n}\\n\\nbutton[type='submit'] {\\n  display: block;\\n}\\n\\n.button-group {\\n  display: flex;\\n}\\n\\nhr {\\n  border: none !important;\\n  height: 2px !important;\\n  /* Set the hr color */\\n  color: #333; /* old IE */\\n  background-color: #333; /* Modern Browsers */\\n  margin-top: 2rem;\\n  margin-bottom: 2rem;\\n}\\n\\npre {\\n  font-size: 1em !important;\\n}\\n\\n.markdown-body[class] {\\n  font-size: inherit;\\n  color: inherit;\\n  border: inherit;\\n}\\n\\n.markdown-body pre {\\n  font-size: inherit;\\n  color: inherit;\\n  border: inherit;\\n  border-radius: 10px;\\n  margin-bottom: 1rem;\\n  margin-top: 1rem;\\n}\\n\\n.markdown-body[class] h1,\\n.markdown-body[class] h2,\\n.markdown-body[class] h3,\\n.markdown-body[class] h4,\\n.markdown-body[class] h5,\\n.markdown-body[class] h6 {\\n  border: inherit;\\n  margin: inherit;\\n  padding: inherit;\\n  margin-top: 2rem !important;\\n  margin-bottom: 2rem !important;\\n}\\n\\n.markdown-body[class] h1[id] {\\n  letter-spacing: -0.6px;\\n  font-size: var(--informed-font-size--80, 40px);\\n  line-height: var(--informed-line-height--80, 48px);\\n  margin-top: 2rem;\\n  margin-bottom: 2rem;\\n}\\n\\n.markdown-body[class] h2[id] {\\n  letter-spacing: -0.5px;\\n  font-size: var(--informed-font-size--70, 28px);\\n  line-height: var(--informed-line-height--70, 36px);\\n  margin-top: 2rem;\\n  margin-bottom: 2rem;\\n}\\n\\n.markdown-body[class] h3[id] {\\n  letter-spacing: -0.6px;\\n  font-size: var(--informed-font-size--60, 24px);\\n  line-height: var(--informed-line-height--60, 28px);\\n  margin-top: 2rem;\\n  margin-bottom: 2rem;\\n}\\n\\n.markdown-body[class] h4[id] {\\n  letter-spacing: -0.4px;\\n  font-size: var(--informed-font-size--50, 20px);\\n  line-height: var(--informed-line-height--60, 28px);\\n  margin-top: 2rem;\\n  margin-bottom: 2rem;\\n}\\n\\n.markdown-body[class] h5[id] {\\n  font-size: var(--informed-font-size--40, 17px);\\n  line-height: var(--informed-line-height--20, 20px);\\n  margin-top: 1rem;\\n  margin-bottom: 1rem;\\n}\\n\\n.markdown-body[class] h6[id] {\\n  font-size: var(--informed-font-size--30, 14px);\\n  line-height: var(--informed-line-height--30, 21px);\\n  margin-top: 1rem;\\n  margin-bottom: 1rem;\\n}\\n\\n.markdown-body p {\\n  margin: inherit;\\n}\\n\\n.markdown-body[class] p {\\n}\\n\\n.markdown-body[class] ul {\\n}\\n\\n.markdown-body[class] ol {\\n}\\n\\n.markdown-body a:active,\\n.markdown-body a:hover {\\n  text-decoration: none !important;\\n}\\n\\n.markdown-body[class] table {\\n  display: table;\\n}\\n\\n.markdown-body[class] table strong {\\n  color: rgb(237, 78, 59);\\n}\\n\\nstrong {\\n  color: rgb(237, 78, 59);\\n}\\n\\n/* .markdown-body[class] table {\\n  display: table;\\n}\\n\\n.markdown-body thead {\\n}\\n\\n.markdown-body tbody {\\n}\\n\\n.markdown-body table thead tr:nth-child(1n),\\n.markdown-body table tbody tr:nth-child(1n) {\\n  background: inherit;\\n  border: inherit;\\n}\\n\\n.markdown-body table thead tr:nth-child(1n):first-child th {\\n}\\n\\n.markdown-body thead tr th:nth-child(1n),\\n.markdown-body tbody tr th:nth-child(1n) {\\n  padding: inherit;\\n  border: inherit;\\n}\\n\\n.markdown-body[class] thead tr th:nth-child(1n),\\n.markdown-body[class] tbody tr th:nth-child(1n) {\\n}\\n\\n.markdown-body thead tr td:nth-child(1n),\\n.markdown-body tbody tr td:nth-child(1n) {\\n  padding: inherit;\\n  border: inherit;\\n}\\n\\n.markdown-body[class] thead tr td:nth-child(1n),\\n.markdown-body[class] tbody tr td:nth-child(1n) {\\n}\\n\\n.markdown-body[class] thead tr th:nth-child(1n):first-child,\\n.markdown-body[class] tbody tr th:nth-child(1n):first-child,\\n.markdown-body[class] thead tr td:nth-child(1n):first-child,\\n.markdown-body[class] tbody tr td:nth-child(1n):first-child {\\n  padding-left: 0;\\n}\\n\\n.markdown-body[class] thead tr th:nth-child(1n):last-child,\\n.markdown-body[class] tbody tr th:nth-child(1n):last-child,\\n.markdown-body[class] thead tr td:nth-child(1n):last-child,\\n.markdown-body[class] tbody tr td:nth-child(1n):last-child {\\n  padding-right: 0;\\n} */\\n\\n.informed-container {\\n  padding-left: 4rem;\\n  padding-right: 4rem;\\n  margin-top: 2rem;\\n  margin-bottom: 2rem;\\n  max-width: 1060px;\\n}\\n\\n.informed-black {\\n  background-color: black;\\n  color: white !important;\\n}\\n\\n.informed-black .address-option {\\n  background-color: rgb(58, 60, 65);\\n  color: white;\\n}\\n\\n.informed-black .address-option:hover {\\n  background-color: rgb(82, 84, 89);\\n  cursor: pointer;\\n}\\n\\n.informed-black input:not([type='checkbox']):not([type='radio']),\\n.informed-black select,\\n.informed-black textarea {\\n  background-color: rgb(58, 60, 65);\\n  color: white;\\n}\\n\\n.informed-black select {\\n  background-image: url(\\\"data:image/svg+xml;charset=UTF-8,%3Csvg xmlns='http://www.w3.org/2000/svg' width='12' height='12' viewBox='0 0 12 12'%3E%3Ctitle%3Edown-arrow%3C/title%3E%3Cg fill='%23000000'%3E%3Cpath d='M10.293,3.293,6,7.586,1.707,3.293A1,1,0,0,0,.293,4.707l5,5a1,1,0,0,0,1.414,0l5-5a1,1,0,1,0-1.414-1.414Z' fill='%23FFFFFF'%3E%3C/path%3E%3C/g%3E%3C/svg%3E\\\");\\n  /* filter: invert(1); */\\n}\\n\\n.informed-black .markdown-body[class] table {\\n  background-color: #000;\\n}\\n\\n.informed-black td {\\n  background-color: #000;\\n}\\n\\n.informed-black th {\\n  background-color: #000;\\n}\\n\\n.markdown-body > :first-child {\\n  margin-top: 2rem !important;\\n}\\n\\n.loader,\\n.loader:after {\\n  border-radius: 50%;\\n  width: 10em;\\n  height: 10em;\\n}\\n\\n.loader {\\n  top: 0px;\\n  margin: 60px auto;\\n  font-size: 10px;\\n  position: fixed;\\n  top: 50%;\\n  right: 50%;\\n  text-indent: -9999em;\\n  border-top: 1.1em solid rgba(67, 64, 64, 0.2);\\n  border-right: 1.1em solid rgba(67, 64, 64, 0.2);\\n  border-bottom: 1.1em solid rgba(67, 64, 64, 0.2);\\n  border-left: 1.1em solid red;\\n  transform: translateZ(0);\\n  -webkit-animation: load8 1.1s infinite linear;\\n  animation: load8 1.1s infinite linear;\\n}\\n\\n.informed-black .loader {\\n  border-top: 1.1em solid rgba(255, 255, 255, 0.2);\\n  border-right: 1.1em solid rgba(255, 255, 255, 0.2);\\n  border-bottom: 1.1em solid rgba(255, 255, 255, 0.2);\\n  border-left: 1.1em solid red;\\n}\\n\\n@-webkit-keyframes load8 {\\n  0% {\\n    transform: rotate(0deg);\\n  }\\n  100% {\\n    transform: rotate(360deg);\\n  }\\n}\\n@keyframes load8 {\\n  0% {\\n    transform: rotate(0deg);\\n  }\\n  100% {\\n    transform: rotate(360deg);\\n  }\\n}\\n\\n/* This is for Car!!! */\\n\\n.cls-1 {\\n  fill: #fefefe;\\n}\\n\\n.cls-1,\\n.cls-10,\\n.cls-11,\\n.cls-12,\\n.cls-13,\\n.cls-14,\\n.cls-15,\\n.cls-2,\\n.cls-3,\\n.cls-4,\\n.cls-5,\\n.cls-6,\\n.cls-7,\\n.cls-8,\\n.cls-9 {\\n  fill-rule: evenodd;\\n}\\n\\n.cls-2 {\\n  fill: #cfd5cf;\\n}\\n\\n.cls-11,\\n.cls-12,\\n.cls-3,\\n.cls-5 {\\n  fill: none;\\n  stroke-linecap: round;\\n  stroke-linejoin: round;\\n}\\n\\n.cls-3,\\n.cls-5 {\\n  stroke: #212121;\\n}\\n\\n.cls-11,\\n.cls-3 {\\n  stroke-width: 3px;\\n}\\n\\n.cls-4 {\\n  fill: #212121;\\n}\\n\\n.cls-12,\\n.cls-5 {\\n  stroke-width: 2px;\\n}\\n\\n.cls-6 {\\n  fill: #194767;\\n}\\n\\n.cls-7 {\\n  fill: #1a3850;\\n}\\n\\n.cls-8 {\\n  fill: #e53046;\\n}\\n\\n.cls-9 {\\n  fill: #ae3b46;\\n}\\n\\n.cls-10 {\\n  fill: #e96650;\\n}\\n\\n.car-color-red .cls-8 {\\n  fill: #e53046;\\n}\\n\\n.car-color-red .cls-9 {\\n  fill: #ae3b46;\\n}\\n\\n.car-color-red .cls-10 {\\n  fill: #e96650;\\n}\\n\\n.car-color-blue .cls-8 {\\n  fill: #4a2eee;\\n}\\n\\n.car-color-blue .cls-9 {\\n  fill: #2540af;\\n}\\n\\n.car-color-blue .cls-10 {\\n  fill: #6a72d5;\\n}\\n\\n.car-color-green .cls-8 {\\n  fill: #0f4d1d;\\n}\\n\\n.car-color-green .cls-9 {\\n  fill: #126014;\\n}\\n\\n.car-color-green .cls-10 {\\n  fill: #0d5c18;\\n}\\n\\n.car-color-pink .cls-8 {\\n  fill: rgb(233, 36, 111);\\n}\\n\\n.car-color-pink .cls-9 {\\n  fill: rgb(145, 39, 80);\\n}\\n\\n.car-color-pink .cls-10 {\\n  fill: rgb(155, 18, 70);\\n}\\n\\n.cls-11,\\n.cls-12 {\\n  stroke: #231f20;\\n}\\n\\n.cls-13,\\n.cls-16 {\\n  fill: #848c93;\\n}\\n\\n.cls-14 {\\n  fill: #020303;\\n}\\n\\n.cls-15 {\\n  fill: #74848c;\\n}\\n\\n.cls-16 {\\n  font-size: 40px;\\n  font-family: HelveticaNeue-Bold, Helvetica Neue;\\n  font-weight: 700;\\n}\\n\\n#Circleelement {\\n  -webkit-animation-name: rotate;\\n  -webkit-animation-duration: 2s;\\n  -webkit-animation-iteration-count: infinite;\\n  -webkit-animation-timing-function: linear;\\n  -moz-animation-name: rotate;\\n  -moz-animation-duration: 2s;\\n  -moz-animation-iteration-count: infinite;\\n  -moz-animation-timing-function: linear;\\n  animation-name: rotate;\\n  animation-duration: 2s;\\n  animation-iteration-count: infinite;\\n  animation-timing-function: linear;\\n}\\n@-webkit-keyframes rotate {\\n  from {\\n    -webkit-transform: rotate(0deg);\\n  }\\n  to {\\n    -webkit-transform: rotate(360deg);\\n  }\\n}\\n\\n@keyframes rotate {\\n  from {\\n    transform: rotate(0deg);\\n  }\\n  to {\\n    transform: rotate(360deg);\\n  }\\n}\\n\", \"\"]);\n// Exports\nmodule.exports = exports;\n","import React from 'react';\n\n/* ----------------------- Contexts ----------------------- */\nexport const FormControllerContext = React.createContext({});\nexport const FormApiContext = React.createContext({});\nexport const FormStateContext = React.createContext({});\nexport const MultistepStepContext = React.createContext();\nexport const MultistepApiContext = React.createContext();\nexport const MultistepStateContext = React.createContext();\nexport const ArrayFieldStateContext = React.createContext();\nexport const ArrayFieldApiContext = React.createContext();\nexport const ArrayFieldItemApiContext = React.createContext();\nexport const ArrayFieldItemStateContext = React.createContext();\nexport const RelevanceContext = React.createContext();\nexport const RadioGroupContext = React.createContext();\nexport const ScopeContext = React.createContext();\nexport const InformedContext = React.createContext();\n","import { ObjectMap } from './ObjectMap';\nimport { Debug } from './debug';\nimport { FieldMap as defaultFieldMap } from './fieldMap';\nimport {\n  debounceByName,\n  informedFormat,\n  informedParse,\n  uuidv4,\n  validateAjvSchema,\n  validateYupField,\n  validateYupSchema,\n  getSchemaPathFromJsonPath,\n  isChild\n} from './utils';\nconst debug = Debug('informed:FormController' + '\\t');\n\nconst initializeValue = (value, { formatter, parser, initialize, mask }) => {\n  if (value != null) {\n    // Call users initialize if it was passed\n    if (initialize && !parser) {\n      return initialize(value);\n    }\n    if (formatter && !parser) {\n      const res = informedFormat(value, formatter);\n      return res.value;\n    }\n    if (mask && !parser) {\n      return mask(value);\n    }\n    return value;\n  }\n  // Not needed but called out specifically\n  return undefined;\n};\n\nconst initializeMask = (value, { formatter, initialize, mask }) => {\n  if (initialize) {\n    return initialize(value);\n  }\n  // Call formatter\n  if (formatter) {\n    const res = informedFormat(value, formatter);\n    return res.value;\n  }\n  if (mask) {\n    return mask(value);\n  }\n\n  return value;\n};\n\n/* ----------------------- FormController ----------------------- */\n\nexport class FormController {\n  constructor(options) {\n    // Set the options\n    this.options = options;\n\n    // Initialize listeners\n    this.subscriptions = new Map();\n\n    // Get schema stuff off of options\n    const { ajv, schema, fieldMap, adapter } = options.current;\n\n    // Create new ajv instance if passed\n    this.ajv = ajv ? new ajv({ allErrors: true }) : null;\n    // TODO this fucks with json pointer stuff\n    // if (ajvErrors) {\n    //   ajvErrors(this.ajv);\n    // }\n    this.ajvValidate = ajv ? this.ajv.compile(schema) : null;\n\n    // Add field map ( defaults to our field map )\n    this.fieldMap = adapter || fieldMap || defaultFieldMap;\n\n    // This is the emitter lol\n    this.emitter = this;\n\n    // Map will store all fields by name\n    // Key => name\n    // Val => fieldMetaRef\n    // Why? so the form knows about field meta\n    this.fieldsMap = new Map();\n\n    // Map will store current validation request\n    // Key => name\n    // Val => {uuid, value}\n    // Why? So we know if validation request is stale or not\n    // We ALSO need to store value because of edge case:\n    //\n    // Assume sync validation \"Must be at least 5 characters\" and some async validation that takes 2 seconds\n    // 1. User types ddddd ( 5 inputs so we pass sync validation )\n    // 2. Because there is no sync validation async will trigger to validate username\n    // 3. While that occurs, user starts to Backspace the ddddd\n    // 4. The second user backspaces, sync has error so async never \"re-occurs\"\n    // 5. the sync request made on step 2 completes\n    // 6. It wipes out sync error\n    this.validationRequests = new Map();\n\n    this.dataRequests = new Map();\n\n    // For array fields lol\n    this.removalLocked = undefined;\n\n    // Initialize the controller state\n    this.state = {\n      pristine: true,\n      dirty: false,\n      submitted: false,\n      invalid: false,\n      valid: true,\n      submitting: false,\n      validating: 0,\n      gathering: 0,\n      values: {},\n      errors: {},\n      touched: {},\n      maskedValues: {},\n      dirt: {},\n      focused: {},\n      modified: {},\n      data: {},\n      initialValues: this.options.current.initialValues || {}\n    };\n\n    // Bind functions that will be called externally\n    this.getValue = this.getValue.bind(this);\n    this.setValue = this.setValue.bind(this);\n    this.setValueQuietly = this.setValueQuietly.bind(this);\n    this.setValues = this.setValues.bind(this);\n    this.setTheseValues = this.setTheseValues.bind(this);\n    this.resetPath = this.resetPath.bind(this);\n    this.getMaskedValue = this.getMaskedValue.bind(this);\n    this.setMaskedValue = this.setMaskedValue.bind(this);\n    this.setModifiedValue = this.setModifiedValue.bind(this);\n    this.getTouched = this.getTouched.bind(this);\n    this.setTouched = this.setTouched.bind(this);\n    this.getFocused = this.getFocused.bind(this);\n    this.setFocused = this.setFocused.bind(this);\n    this.getError = this.getError.bind(this);\n    this.setError = this.setError.bind(this);\n    this.reset = this.reset.bind(this);\n    this.validate = this.validate.bind(this);\n    this.asyncValidate = this.asyncValidate.bind(this);\n    this.getDirty = this.getDirty.bind(this);\n    this.setDirt = this.setDirt.bind(this);\n    this.getPristine = this.getPristine.bind(this);\n    this.getFormState = this.getFormState.bind(this);\n    this.getFormApi = this.getFormApi.bind(this);\n    this.getFieldState = this.getFieldState.bind(this);\n    this.getValid = this.getValid.bind(this);\n    this.on = this.on.bind(this);\n    this.emit = this.emit.bind(this);\n    this.removeListener = this.removeListener.bind(this);\n    this.remove = this.remove.bind(this);\n    this.swap = this.swap.bind(this);\n    this.pullOut = this.pullOut.bind(this);\n    this.register = this.register.bind(this);\n    this.deregister = this.deregister.bind(this);\n    this.getInitialValue = this.getInitialValue.bind(this);\n    this.initialize = this.initialize.bind(this);\n    this.reformat = this.reformat.bind(this);\n    this.lockRemoval = this.lockRemoval.bind(this);\n    this.unlockRemoval = this.unlockRemoval.bind(this);\n    this.resetField = this.resetField.bind(this);\n    this.getRemovalLocked = this.getRemovalLocked.bind(this);\n    this.isRemovalLocked = this.isRemovalLocked.bind(this);\n    this.submitForm = this.submitForm.bind(this);\n    this.touchAllFields = this.touchAllFields.bind(this);\n    this.keyDown = this.keyDown.bind(this);\n    this.validateAsync = this.validateAsync.bind(this);\n    this.gatherData = this.gatherData.bind(this);\n    this.validated = this.validated.bind(this);\n    this.debouncedValidateAsync = debounceByName(this.validateAsync);\n    this.debouncedGatherInfo = debounceByName(this.gatherData);\n    this.getOptions = this.getOptions.bind(this);\n    this.validateField = this.validateField.bind(this);\n    this.getErrorMessage = this.getErrorMessage.bind(this);\n    this.clearValue = this.clearValue.bind(this);\n    this.clearError = this.clearError.bind(this);\n    this.getData = this.getData.bind(this);\n    this.setData = this.setData.bind(this);\n    this.getModified = this.getModified.bind(this);\n    this.updateValid = this.updateValid.bind(this);\n    this.focusFirstError = this.focusFirstError.bind(this);\n    this.setPristine = this.setPristine.bind(this);\n    this.disableForm = this.disableForm.bind(this);\n    this.enableForm = this.enableForm.bind(this);\n  }\n\n  getOptions() {\n    return this.options.current;\n  }\n\n  getValue(name) {\n    return ObjectMap.get(this.state.values, name);\n  }\n\n  getMaskedValue(name) {\n    return ObjectMap.get(this.state.maskedValues, name);\n  }\n\n  setMaskedValue(name, value) {\n    return ObjectMap.set(this.state.maskedValues, name, value);\n  }\n\n  setModifiedValue(name, value) {\n    return ObjectMap.set(this.state.modified, name, value);\n  }\n\n  updateValid() {\n    // Store previous state\n    const prevValid = this.state.valid;\n\n    // Now update\n    this.state.valid = ObjectMap.empty(this.state.errors);\n    this.state.invalid = !this.state.valid;\n\n    // Call change handlers if needed\n    if (prevValid && !this.state.valid) {\n      this.emit('invalid');\n    }\n    if (!prevValid && this.state.valid) {\n      this.emit('valid');\n    }\n  }\n\n  setValues(values) {\n    this.fieldsMap.forEach(fieldMeta => {\n      // Get value out of values object basd on path\n      const val = ObjectMap.get(values, fieldMeta.current.name);\n      fieldMeta.current.fieldApi.setValue(val);\n    });\n  }\n\n  disableForm() {\n    this.disabled = true;\n    // This will make all fields re render with updated value\n    this.emit('field', '_ALL_');\n  }\n\n  enableForm() {\n    this.disabled = undefined;\n    // This will make all fields re render with updated value\n    this.emit('field', '_ALL_');\n  }\n\n  setTheseValues(values) {\n    this.fieldsMap.forEach(fieldMeta => {\n      // Get value out of values object basd on path\n      const val = ObjectMap.get(values, fieldMeta.current.name);\n      // Only set if it is there\n      if (val != null) {\n        fieldMeta.current.fieldApi.setValue(val);\n      }\n    });\n  }\n\n  resetPath(path) {\n    this.fieldsMap.forEach(fieldMeta => {\n      // Only reset if parent path\n      if (isChild(path, fieldMeta.current.name)) {\n        fieldMeta.current.fieldApi.reset();\n      }\n    });\n  }\n\n  setValueQuietly(name, value) {\n    this.setValue(name, value, undefined, undefined, true);\n  }\n\n  setValue(name, value, e, key, quiet) {\n    debug(`setValue ${name}`, value);\n\n    // Get meta for field\n    const meta = this.fieldsMap.get(name)?.current || {};\n\n    // Remember Cursor position!\n    // Need try catch because of Safari Bullshit issue\n    try {\n      if (e && e.target && e.target.selectionStart) {\n        meta.setCursor(e.target.selectionStart, key);\n      }\n    } catch (e) {\n      // Need try catch because of Safari Bullshit issue\n      if (!(e instanceof TypeError)) {\n        throw e;\n      }\n    }\n\n    if (value === '') {\n      if (meta.allowEmptyString) {\n        debug(`Setting ${name}'s value to '' because allowEmptyString is set`);\n        ObjectMap.set(this.state.values, name, value);\n        // Special if check for modified\n        if (meta.getInitialValue && meta.getInitialValue() != value) {\n          ObjectMap.set(this.state.modified, name, value);\n        } else {\n          debug(`Removing ${name}'s modified`);\n          ObjectMap.delete(this.state.modified, name);\n        }\n        ObjectMap.set(this.state.maskedValues, name, value);\n      } else {\n        debug(`Setting ${name}'s value to undefiend`);\n        ObjectMap.set(this.state.values, name, undefined);\n        ObjectMap.set(this.state.modified, name, undefined);\n        ObjectMap.set(this.state.maskedValues, name, undefined);\n      }\n    } else if (meta?.type === 'number' && value !== undefined) {\n      let val = value;\n      let maskedVal = value;\n\n      // call mask if passed\n      if (meta.mask) {\n        maskedVal = meta.mask(val);\n      }\n\n      // // Only parse if parser was passed\n      if (meta.parser) {\n        val = val != null ? informedParse(val, meta.parser) : val;\n      }\n\n      debug(`Setting ${name}'s value to ${+val}`);\n      ObjectMap.set(this.state.values, name, +val);\n\n      // Special if check for modified\n      if (meta.getInitialValue && meta.getInitialValue() != val) {\n        ObjectMap.set(this.state.modified, name, +val);\n      } else {\n        debug(`Removing ${name}'s modified`);\n        ObjectMap.delete(this.state.modified, name);\n      }\n\n      debug(`Setting ${name}'s maskedValue to`, +maskedVal);\n      ObjectMap.set(this.state.maskedValues, name, +maskedVal);\n    } else {\n      let val = value;\n      let maskedVal = value;\n\n      // Only clean if clean was passed\n      if (meta.clean) {\n        val = meta.clean(val);\n        maskedVal = val;\n      }\n\n      // Call formatter parser if passed\n      if (meta.formatter) {\n        const res = informedFormat(\n          val,\n          meta.formatter,\n          this.getMaskedValue(name)\n        );\n        meta.setCursorOffset(res.offset, key);\n        maskedVal = res.value;\n        val = maskedVal;\n      }\n\n      // call mask if passed\n      if (meta.mask) {\n        val = meta.mask(val);\n        maskedVal = val;\n      }\n\n      // // Only parse if parser was passed\n      if (meta.parser) {\n        val = val != null ? informedParse(val, meta.parser) : val;\n      }\n\n      debug(`Setting ${name}'s value to`, val);\n      ObjectMap.set(this.state.values, name, val);\n\n      // Special if check for modified\n      // We want to set even if field is not on screen ( does not have getter for initial )\n      if (!meta.getInitialValue || meta.getInitialValue() != val) {\n        debug(`Setting ${name}'s modified to`, val);\n        ObjectMap.set(this.state.modified, name, val);\n      } else {\n        debug(`Removing ${name}'s modified`);\n        ObjectMap.delete(this.state.modified, name);\n      }\n\n      debug(`Setting ${name}'s maskedValue to`, maskedVal);\n      ObjectMap.set(this.state.maskedValues, name, maskedVal);\n    }\n\n    // We only need to call validate if the user gave us one\n    // and they want us to validate on change\n    // Example validateOn = \"change\" (\"change-change\")==> true\n    // Example validateOn = \"blur\" (\"blur-blur\") ==> false\n    // Example validateOn = \"submit\" (\"submit-submit\")==> false\n    // Example validateOn = \"change-blur\" ==> true\n    // Example validateOn = \"change-submit\" ==> true\n    // Example validateOn = \"blur-submit\" ==> false\n    if (meta.validate && meta.validateOn.includes('change')) {\n      const val = ObjectMap.get(this.state.values, name);\n      debug(`Validating after change ${name} ${val}`);\n      ObjectMap.set(\n        this.state.errors,\n        name,\n        meta.validate(val, this.state.values)\n      );\n    }\n    // Same thing but for YUP schema\n    // I dont think we need this anymore as its done by the generate function ..... TODO maybe remove\n    if (meta.yupSchema && meta.validateOn.includes('change')) {\n      // Only call if we dont already have error\n      if (this.getError(name) === undefined) {\n        const val = ObjectMap.get(this.state.values, name);\n        debug(`Validating YUP after change ${name} ${val}`);\n        ObjectMap.set(\n          this.state.errors,\n          name,\n          validateYupField(meta.yupSchema, val)\n        );\n      }\n    }\n\n    // We only need to call asyncValidate if\n    // 1. the user gave us one\n    // 2. they want us to validate on change\n    // 3. We don't have a sync error\n    // Example validateOn = \"change\" (\"change-change\")==> true\n    // Example validateOn = \"blur\" (\"blur-blur\") ==> false\n    // Example validateOn = \"submit\" (\"submit-submit\")==> false\n    // Example validateOn = \"change-blur\" ==> false\n    // Example validateOn = \"change-submit\" ==> false\n    // Example validateOn = \"blur-submit\" ==> false\n    if (meta.asyncValidate && meta.validateOn === 'change') {\n      // Get error to determine if we even want to validateAsync\n      if (this.getError(name) === undefined) this.debouncedValidateAsync(name);\n    }\n\n    // Always remember to update pristine and valid here\n    if (!quiet) {\n      this.state.pristine = false;\n      this.state.dirty = !this.state.pristine;\n      ObjectMap.set(this.state.dirt, name, true);\n    }\n\n    // Remember to update valid\n    this.updateValid();\n\n    // Call users onChange if it exists\n    if (meta.onChange) {\n      const fieldState = this.getFieldState(name);\n      meta.onChange(fieldState, e);\n    }\n\n    // Call users onNativeChange if we had native event and func\n    if (e && meta.onNativeChange) {\n      const fieldState = this.getFieldState(name);\n      meta.onNativeChange(fieldState, e);\n    }\n\n    if (meta.gatherData) {\n      // Get error to determine if we even want to validateAsync\n      this.debouncedGatherInfo(name);\n    }\n\n    // Normal field event\n    this.emit('field', name);\n\n    // Special event when fields value changes\n    this.emit('field-value', name);\n    this.emit('field-modified', name);\n    this.emit('field-value-set', name);\n  }\n\n  validateField(name) {\n    // Get meta for field\n    const meta = this.fieldsMap.get(name)?.current;\n\n    if (meta.validate) {\n      const val = ObjectMap.get(this.state.values, name);\n      debug(`Validating field ${name} via validateField with value ${val}`);\n      ObjectMap.set(\n        this.state.errors,\n        name,\n        meta.validate(val, this.state.values)\n      );\n    }\n    // Same thing but for YUP schema\n    if (meta.yupSchema) {\n      // Only call if we dont already have error\n      if (this.getError(name) === undefined) {\n        const val = ObjectMap.get(this.state.values, name);\n        debug(`Validating YUP field via validateField ${name} ${val}`);\n        ObjectMap.set(\n          this.state.errors,\n          name,\n          validateYupField(meta.yupSchema, val)\n        );\n      }\n    }\n\n    // TODO maybe do async validation here !?!?!?!\n\n    // Remember to update valid\n    this.updateValid();\n\n    this.emit('field', name);\n  }\n\n  getModified(name) {\n    return ObjectMap.get(this.state.modified, name);\n  }\n\n  getFocused(name) {\n    return ObjectMap.get(this.state.focused, name);\n  }\n\n  setFocused(name, value, e) {\n    debug(`Setting ${name}'s focused to ${value}`);\n\n    // Get meta for field\n    const meta = this.fieldsMap.get(name)?.current || {};\n\n    // Update the state\n    ObjectMap.set(this.state.focused, name, value);\n\n    // Call users onFoucs if it exists\n    if (meta.onFocus) {\n      const fieldState = this.getFieldState(name);\n      meta.onFocus(fieldState, e);\n    }\n\n    // emit field update\n    this.emit('field', name);\n  }\n\n  getTouched(name) {\n    return ObjectMap.get(this.state.touched, name);\n  }\n\n  setTouched(name, value, e) {\n    debug(`Setting ${name}'s touched to ${value}`);\n\n    // Get meta for field\n    const meta = this.fieldsMap.get(name)?.current || {};\n\n    // Update the state\n    ObjectMap.set(this.state.touched, name, value);\n\n    // We only need to call validate if the user gave us one\n    // and they want us to validate on blur\n    // Example validateOn = \"change\" (\"change-change\")==> true\n    // Example validateOn = \"blur\" (\"blur-blur\") ==> true\n    // Example validateOn = \"submit\" (\"submit-submit\")==> false\n    // Example validateOn = \"change-blur\" ==> true\n    // Example validateOn = \"change-submit\" ==> true\n    // Example validateOn = \"blur-submit\" ==> true\n    if (\n      meta.validate &&\n      (meta.validateOn.includes('blur') || meta.validateOn.includes('change'))\n    ) {\n      const val = ObjectMap.get(this.state.values, name);\n      debug(`Validating after blur ${name} ${val}`);\n      ObjectMap.set(\n        this.state.errors,\n        name,\n        meta.validate(val, this.state.values)\n      );\n    }\n\n    // We only need to call asyncValidate if\n    // 1. the user gave us one\n    // 2. they want us to validate on blur\n    // 3. We don't have a sync error\n    // Example validateOn = \"change\" (\"change-change\")==> true\n    // Example validateOn = \"blur\" (\"blur-blur\") ==> true\n    // Example validateOn = \"submit\" (\"submit-submit\")==> false\n    // Example validateOn = \"change-blur\" ==> true\n    // Example validateOn = \"change-submit\" ==> false\n    // Example validateOn = \"blur-submit\" ==> false\n    if (\n      meta.asyncValidate &&\n      (meta.validateOn === 'blur' ||\n        meta.validateOn === 'change-blur' ||\n        meta.validateOn === 'change')\n    ) {\n      // Get error to determine if we even want to validateAsync\n      if (this.getError(name) === undefined) {\n        this.validateAsync(name);\n      }\n    }\n\n    // Remember to update valid\n    this.updateValid();\n\n    // Call users onBlur if it exists\n    if (meta.onBlur) {\n      const fieldState = this.getFieldState(name);\n      meta.onBlur(fieldState, e);\n    }\n\n    this.emit('field', name);\n  }\n\n  getData(name) {\n    return ObjectMap.get(this.state.data, name);\n  }\n\n  setData(name, value) {\n    debug(`Setting ${name}'s data to ${value}`);\n    ObjectMap.set(this.state.data, name, value);\n    this.emit('field', name);\n  }\n\n  getError(name) {\n    return ObjectMap.get(this.state.errors, name);\n  }\n\n  setError(name, value) {\n    debug(`Setting ${name}'s error to ${value}`);\n    ObjectMap.set(this.state.errors, name, value);\n    this.state.valid = ObjectMap.empty(this.state.errors);\n    this.state.invalid = !this.state.valid;\n    this.emit('field', name);\n  }\n\n  getInitialValue(name) {\n    return ObjectMap.get(this.state.initialValues, name);\n  }\n\n  getDirty(name) {\n    return !!ObjectMap.get(this.state.dirt, name);\n  }\n\n  setDirt(name, value) {\n    return ObjectMap.set(this.state.dirt, name, value);\n  }\n\n  getPristine(name) {\n    return !this.getDirty(name);\n  }\n\n  getValid(name) {\n    // Valid when we have no error\n    return ObjectMap.get(this.state.errors, name) === undefined;\n  }\n\n  getFormState() {\n    return this.state;\n  }\n\n  clearValue(name) {\n    this.setValue(name, undefined);\n  }\n\n  clearError(name) {\n    this.setError(name, undefined);\n  }\n\n  setPristine(pristine) {\n    this.state.pristine = pristine;\n    this.state.dirty = !this.state.pristine;\n\n    // Just need to trigger a form state update\n    this.emit('field');\n  }\n\n  getFormApi() {\n    return {\n      getValue: this.getValue,\n      setValue: this.setValue,\n      setValueQuietly: this.setValueQuietly,\n      getMaskedValue: this.getMaskedValue,\n      setMaskedValue: this.setMaskedValue,\n      setModifiedValue: this.setModifiedValue,\n      getTouched: this.getTouched,\n      setTouched: this.setTouched,\n      getError: this.getError,\n      setError: this.setError,\n      getFocused: this.getFocused,\n      setFocused: this.setFocused,\n      getData: this.getData,\n      setData: this.setData,\n      getModified: this.getModified,\n      resetField: this.resetField,\n      reset: this.reset,\n      getFormState: this.getFormState,\n      getPristine: this.getPristine,\n      getDirty: this.getDirty,\n      setDirt: this.setDirt,\n      validateField: this.validateField,\n      getFieldState: this.getFieldState,\n      getInitialValue: this.getInitialValue,\n      touchAllFields: this.touchAllFields,\n      validate: this.validate,\n      asyncValidate: this.asyncValidate,\n      setValues: this.setValues,\n      setTheseValues: this.setTheseValues,\n      resetPath: this.resetPath,\n      submitForm: this.submitForm,\n      clearValue: this.clearValue,\n      clearError: this.clearError,\n      focusFirstError: this.focusFirstError,\n      setPristine: this.setPristine,\n      disable: this.disableForm,\n      enable: this.enableForm\n    };\n  }\n\n  getFieldState(name) {\n    // Get meta for field\n    const meta = this.fieldsMap.get(name)?.current || {};\n    const error = this.getError(name);\n    const focused = !!this.getFocused(name);\n    const modified = !!this.getModified(name);\n    const dirty = this.getDirty(name);\n    const valid = this.getValid(name);\n    const touched = !!this.getTouched(name);\n    const pristine = !dirty;\n    const validating = !!this.validationRequests.get(name);\n    const gathering = !!this.dataRequests.get(name);\n\n    let showError = false;\n    if (meta && meta.showErrorIfError) {\n      showError = error !== undefined;\n    } else if (meta && meta.showErrorIfDirty) {\n      showError = error !== undefined && (dirty || touched);\n    } else if (meta && meta.showErrorIfTouched) {\n      showError = error !== undefined && touched;\n    }\n\n    // $relevant\n    // $focused\n\n    return {\n      value: this.getValue(name),\n      maskedValue: this.getMaskedValue(name),\n      modified,\n      touched,\n      error: this.getError(name),\n      data: this.getData(name),\n      pristine,\n      dirty,\n      valid,\n      invalid: !valid,\n      showError,\n      validating,\n      gathering,\n      focused\n    };\n  }\n\n  remove(name, options = {}) {\n    debug('Remove', name);\n\n    if (!this.removalLocked) {\n      const {\n        value: keepValue = false,\n        error: keepError = false,\n        touched: keepTouched = false\n      } = options;\n\n      if (!keepValue) {\n        debug('Delete Value', name);\n        ObjectMap.delete(this.state.values, name);\n        debug('Delete Modified', name);\n        ObjectMap.delete(this.state.modified, name);\n        debug('Delete Masked', name);\n        ObjectMap.delete(this.state.maskedValues, name);\n      }\n      if (!keepTouched) {\n        debug('Delete Touched', name);\n        ObjectMap.delete(this.state.touched, name);\n      }\n      if (!keepError) {\n        debug('Delete Errors', name);\n        ObjectMap.delete(this.state.errors, name);\n      }\n      debug('Delete Dirt', name);\n      ObjectMap.delete(this.state.dirt, name);\n      debug('Delete Focused', name);\n      ObjectMap.delete(this.state.focused, name);\n      debug('Delete Info', name);\n      ObjectMap.delete(this.state.data, name);\n\n      // Remember to update valid\n      this.updateValid();\n\n      // Final field change\n      this.emit('field', name);\n      // Special event when fields value changes\n      this.emit('field-value', name);\n      this.emit('field-modified', name);\n    } else {\n      debug('Removal locked so NOT removing', name);\n    }\n  }\n\n  swap(name, a, b) {\n    debug('Swap', name, a, b);\n    ObjectMap.swap(this.state.values, name, a, b);\n    ObjectMap.swap(this.state.modified, name, a, b);\n    ObjectMap.swap(this.state.maskedValues, name, a, b);\n    ObjectMap.swap(this.state.touched, name, a, b);\n    ObjectMap.swap(this.state.errors, name, a, b);\n    ObjectMap.swap(this.state.dirt, name, a, b);\n    ObjectMap.swap(this.state.focused, name, a, b);\n    ObjectMap.swap(this.state.data, name, a, b);\n    // DO NOT emit event here we want to delay it on purpose because otherwise relevance will trigger with bad state\n    // this.emit(\"field\", name);\n    this.state.pristine = false;\n    this.state.dirty = !this.state.pristine;\n  }\n\n  pullOut(name) {\n    debug('Pull', name);\n    ObjectMap.delete(this.state.values, name);\n    ObjectMap.delete(this.state.modified, name);\n    ObjectMap.delete(this.state.maskedValues, name);\n    ObjectMap.delete(this.state.touched, name);\n    ObjectMap.delete(this.state.errors, name);\n    ObjectMap.delete(this.state.dirt, name);\n    ObjectMap.delete(this.state.focused, name);\n    ObjectMap.delete(this.state.data, name);\n    // DO NOT emit event here we want to delay it on purpose because otherwise relevance will trigger with bad state\n    // this.emit(\"field\", name);\n    this.state.pristine = false;\n    this.state.dirty = !this.state.pristine;\n  }\n\n  register(name, meta) {\n    debug('Register', name, meta);\n    // Register the meta\n    if (!this.fieldsMap.get(name)) {\n      this.fieldsMap.set(name, meta);\n      this.emit('field', name);\n    }\n  }\n\n  deregister(name) {\n    debug('De-Register', name);\n    if (this.fieldsMap.get(name)) {\n      this.fieldsMap.delete(name);\n      this.emit('field', name);\n    }\n  }\n\n  initialize(name, meta) {\n    debug('Initialize', name, this.state);\n    // Initialize value if needed\n    // If we already have value i.e \"saved\"\n    // use that ( it was not removed on purpose! )\n    // Otherwise use the fields initial value\n    if (\n      !this.getValue(name) &&\n      meta.current.initialValue != null &&\n      (meta.current.initializeValueIfPristine ? this.state.pristine : true)\n    ) {\n      const { formatter, parser, initialize, clean, mask } = meta.current;\n\n      // Clean value if we have clean function\n      const cleanedValue = clean\n        ? clean(meta.current.initialValue)\n        : meta.current.initialValue;\n\n      const initialValue = initializeValue(cleanedValue, {\n        formatter,\n        parser,\n        initialize,\n        mask\n      });\n      const initialMask = initializeMask(cleanedValue, {\n        formatter,\n        initialize,\n        mask\n      });\n\n      debug(`Initializing ${name}'s value to ${initialValue}`);\n      ObjectMap.set(this.state.values, name, initialValue);\n\n      debug(`Initializing ${name}'s maskedValue to ${initialMask}`);\n      ObjectMap.set(this.state.maskedValues, name, initialMask);\n    }\n\n    // Might need to set initial error\n    if (meta.current.validate && meta.current.validateOnMount) {\n      const val = ObjectMap.get(this.state.values, name);\n      debug(`Validating on mount ${name} ${val}`, this.state);\n      ObjectMap.set(\n        this.state.errors,\n        name,\n        meta.current.validate(val, this.state.values)\n      );\n    }\n\n    // validateOnMount=\"sync\" DONT validateOnMount={true} DO\n    if (meta.current.asyncValidate && meta.current.validateOnMount === true) {\n      // Get error to determine if we even want to validateAsync\n      if (this.getError(name) === undefined) this.validateAsync(name);\n    }\n\n    // Check if the form is valid\n    this.state.valid = ObjectMap.empty(this.state.errors);\n    this.state.invalid = !this.state.valid;\n\n    if (meta.current.gatherData && meta.current.gatherOnMount === true) {\n      // Get error to determine if we even want to validateAsync\n      this.debouncedGatherInfo(name);\n    }\n\n    this.emit('field', name);\n\n    // Special event when fields value changes ( this if first time so its technically a change to initial value)\n    this.emit('field-value', name);\n    // Specifically did NOT call field-modified here\n  }\n\n  validated(name, res) {\n    debug(\n      `Setting ${name}'s error to ${res} with ${\n        this.state.validating\n      } validations left`\n    );\n    ObjectMap.set(this.state.errors, name, res);\n\n    // Remember to update valid\n    this.updateValid();\n\n    // Clear out validating\n    this.validationRequests.delete(name);\n\n    // If we are not still validating, and we were submitting, then submit form\n    // If we are async validating then dont submit yet\n    if (this.state.validating > 0) {\n      debug(\n        `Still validating ${this.state.validating} others so just update state.`\n      );\n      this.emit('field', name);\n      return;\n    }\n\n    // If we were submitting\n    if (this.state.submitting) {\n      // Check validity and perform submission if valid\n      if (this.valid()) {\n        debug('Submit', this.state);\n        this.emit('field', name);\n        this.emit('submit');\n      } else {\n        debug('Fail', this.state);\n        if (this.options.current.focusOnInvalid) {\n          this.focusFirstError();\n        }\n        this.emit('field', name);\n        this.emit('failure');\n      }\n      this.state.submitting = false;\n    }\n\n    // If we had done function\n    if (this.done) {\n      // Call done only if valid\n      if (this.valid()) this.done();\n      // Then always clear\n      this.done = undefined;\n    }\n\n    // Always update\n    this.emit('field', name);\n  }\n\n  gathered(name, res) {\n    debug(\n      `Setting ${name}'s data to ${res} with ${\n        this.state.gathering\n      } gatherers left`\n    );\n    ObjectMap.set(this.state.data, name, res);\n\n    // Clear out validating\n    this.dataRequests.delete(name);\n\n    // Always update\n    this.emit('field', name);\n    this.emit('field-value', name);\n  }\n\n  validateAsync(name) {\n    debug('VALIDATING ASYNC', name);\n    // Get meta for field\n    const meta = this.fieldsMap.get(name)?.current;\n\n    // Get the value\n    const value = this.getValue(name);\n\n    if (meta && meta.asyncValidate) {\n      this.state.validating = this.state.validating + 1;\n      const uuid = uuidv4();\n      debug('REQUEST', uuid);\n      this.validationRequests.set(name, { uuid, value });\n\n      // Because we may have been debounced need to update field here\n      this.emit('field', name);\n\n      meta\n        .asyncValidate(value, this.state.values)\n        .then(res => {\n          this.state.validating = this.state.validating - 1;\n          const stale = this.validationRequests.get(name).uuid !== uuid;\n\n          // What in the hell is invalid and why do I need it??\n          // 1. User types ddddd ( 5 inputs so we pass sync validation )\n          // 2. Because there is no sync validation async will trigger to validate username\n          // 3. While that occurs, user starts to Backspace the ddddd\n          // 4. The second user backspaces, sync has error so async never \"re-occurs\"\n          // 5. the sync request made on step 2 completes\n          // 6. It wipes out sync error\n          const invalid =\n            this.validationRequests.get(name).value !== this.getValue(name);\n          if (!stale && !invalid) {\n            debug('FINISH', uuid);\n            this.validated(name, res);\n          } else {\n            debug(\n              `${stale ? 'STALE' : 'INVALID'} THEN`,\n              uuid,\n              value,\n              this.getValue(name)\n            );\n          }\n        })\n        .catch(err => {\n          this.state.validating = this.state.validating - 1;\n          const stale = this.validationRequests.get(name).uuid !== uuid;\n          const invalid =\n            this.validationRequests.get(name).value !== this.getValue(name);\n          if (!stale && !invalid) {\n            debug('FINISH', uuid);\n            this.validated(name, err.message);\n          } else {\n            debug(\n              `${stale ? 'STALE' : 'INVALID'} THEN`,\n              uuid,\n              value,\n              this.getValue(name)\n            );\n          }\n        });\n    }\n  }\n\n  gatherData(name) {\n    debug('EXECUTING INFO ASYNC', name);\n    // Get meta for field\n    const meta = this.fieldsMap.get(name)?.current;\n\n    // Get the value\n    const value = this.getValue(name);\n\n    if (meta && meta.gatherData) {\n      this.state.gathering = this.state.gathering + 1;\n      const uuid = uuidv4();\n      debug('DATA REQUEST', uuid);\n      this.dataRequests.set(name, { uuid, value });\n\n      // Because we may have been debounced need to update field here\n      this.emit('field', name);\n\n      meta\n        .gatherData(value, this.state)\n        .then(res => {\n          this.state.gathering = this.state.gathering - 1;\n          const stale = this.dataRequests.get(name).uuid !== uuid;\n\n          // What in the hell is invalid and why do I need it??\n          // because the value can be outdated\n          const invalid =\n            this.dataRequests.get(name).value !== this.getValue(name);\n          if (!stale && !invalid) {\n            debug('DATA FINISH', uuid);\n            this.gathered(name, res);\n          } else {\n            debug(\n              `${stale ? 'STALE' : 'INVALID'} THEN`,\n              uuid,\n              value,\n              this.getValue(name)\n            );\n          }\n        })\n        .catch(err => {\n          this.state.gathering = this.state.gathering - 1;\n          const stale = this.dataRequests.get(name).uuid !== uuid;\n          const invalid =\n            this.dataRequests.get(name).value !== this.getValue(name);\n          if (!stale && !invalid) {\n            debug('DATA FINISH', uuid);\n            this.gathered(name, err.message);\n          } else {\n            debug(\n              `${stale ? 'STALE' : 'INVALID'} THEN`,\n              uuid,\n              value,\n              this.getValue(name)\n            );\n          }\n        });\n    }\n  }\n\n  reset() {\n    this.state = {\n      pristine: true,\n      dirty: false,\n      submitted: false,\n      invalid: false,\n      valid: true,\n      submitting: false,\n      validating: 0,\n      gathering: 0,\n      values: {},\n      errors: {},\n      touched: {},\n      maskedValues: {},\n      dirt: {},\n      focused: {},\n      modified: {},\n      data: {},\n      initialValues: this.options.current.initialValues || {}\n    };\n\n    this.fieldsMap.forEach(fieldMeta => {\n      fieldMeta.current.fieldApi.reset();\n    });\n\n    this.emit('reset');\n  }\n\n  focusFirstError() {\n    if (this.options.current.focusOnInvalid) {\n      // Itterate through and call validate on every field\n\n      Array.from(this.fieldsMap.values()).some(fieldMeta => {\n        // Get meta off field\n        const meta = fieldMeta.current;\n\n        // Get ref to input\n        const formFieldRef = meta.fieldRef;\n\n        // Get error for that field\n        const err = this.getError(meta.name);\n\n        // Only focus if we can\n        if (err && formFieldRef) {\n          if (typeof formFieldRef.current.focus === 'function') {\n            debug('Focusing onto', meta.name);\n            formFieldRef.current.focus();\n          }\n          return true;\n        }\n        return false;\n      });\n    }\n  }\n\n  resetField(name, options = {}) {\n    debug('Resetting', name);\n    // Get meta for field\n    const meta = this.fieldsMap.get(name)?.current || {};\n\n    const { formatter, parser, initialize, mask } = meta;\n    const {\n      value,\n      resetError = true,\n      resetTouched = true,\n      resetDirt = true,\n      resetModified = true\n    } = options;\n\n    if (value) {\n      const initializedValue = initializeValue(value, {\n        formatter,\n        parser,\n        initialize,\n        mask\n      });\n\n      debug(`Resetting ${name}'s value to ${initializedValue}`);\n      ObjectMap.set(this.state.values, name, initializedValue);\n\n      const maskedValue = initializeMask(value, { formatter, parser, mask });\n      debug(`Resetting ${name}'s maskedValue to ${maskedValue}`);\n      ObjectMap.set(this.state.maskedValues, name, maskedValue);\n    } else {\n      const initialValue = initializeValue(\n        meta.getInitialValue && meta.getInitialValue(),\n        {\n          formatter,\n          parser,\n          initialize,\n          mask\n        }\n      );\n\n      const initialMask = initializeMask(\n        meta.getInitialValue && meta.getInitialValue(),\n        {\n          formatter,\n          initialize,\n          mask\n        }\n      );\n\n      debug(`Resetting ${name}'s value to ${initialValue}`);\n      ObjectMap.set(this.state.values, name, initialValue);\n\n      debug(`Resetting ${name}'s maskedValue to ${initialMask}`);\n      ObjectMap.set(this.state.maskedValues, name, initialMask);\n    }\n\n    if (resetError) {\n      debug(`Resetting ${name}'s error`);\n      ObjectMap.delete(this.state.errors, name);\n    }\n\n    if (resetTouched) {\n      debug(`Resetting ${name}'s touched`);\n      ObjectMap.delete(this.state.touched, name);\n    }\n\n    if (resetDirt) {\n      debug(`Resetting ${name}'s dirt`);\n      ObjectMap.delete(this.state.dirt, name);\n    }\n\n    if (resetModified) {\n      debug(`Resetting ${name}'s modified`);\n      ObjectMap.delete(this.state.modified, name);\n    }\n\n    // Might need to set initial error\n    if (meta.validate && meta.validateOnMount) {\n      const val = ObjectMap.get(this.state.values, name);\n      debug(\n        `Validating on reset because of validateOnMount ${name} ${val}`,\n        this.state\n      );\n      ObjectMap.set(\n        this.state.errors,\n        name,\n        meta.validate(val, this.state.values)\n      );\n    }\n\n    // Check if the form is valid\n    this.state.valid = ObjectMap.empty(this.state.errors);\n    this.state.invalid = !this.state.valid;\n\n    if (meta.gatherData && meta.gatherOnMount === true) {\n      // Get error to determine if we even want to validateAsync\n      this.debouncedGatherInfo(name);\n    }\n\n    this.emit('field', name);\n\n    // Special event when fields value changes ( its a reset so it changes )\n    this.emit('field-value', name);\n    this.emit('field-modified', name);\n  }\n\n  reformat(name) {\n    debug('Reformatting', name);\n    // Get meta for field\n    const meta = this.fieldsMap.get(name)?.current;\n\n    // Get current value\n    const currentValue = ObjectMap.get(this.state.values, name);\n\n    const { formatter, parser, initialize } = meta;\n\n    const newValue = initializeValue(currentValue, {\n      formatter,\n      parser,\n      initialize\n    });\n    const newMaskedValue = initializeMask(currentValue, {\n      formatter\n    });\n\n    debug(`Reformatting ${name}'s value to ${newValue}`);\n    ObjectMap.set(this.state.values, name, newValue);\n\n    debug(`Reformatting ${name}'s maskedValue to ${newMaskedValue}`);\n    ObjectMap.set(this.state.maskedValues, name, newMaskedValue);\n\n    this.emit('field', name);\n\n    // Special event when fields value changes\n    this.emit('field-value', name);\n    this.emit('field-modified', name);\n  }\n\n  lockRemoval(i) {\n    debug('LOCKREMOVAL', i);\n    this.removalLocked = i;\n  }\n\n  unlockRemoval() {\n    debug('UNLOCK REMOVAL');\n    this.removalLocked = undefined;\n  }\n\n  getRemovalLocked() {\n    return this.removalLocked;\n  }\n\n  isRemovalLocked() {\n    return this.removalLocked != null;\n  }\n\n  valid() {\n    const errors = this.state.errors;\n    return !!ObjectMap.empty(errors);\n  }\n\n  keyDown(e) {\n    // If preventEnter then return\n    if (e.keyCode == 13 && this.options.current.preventEnter) {\n      e.preventDefault(e);\n      return false;\n    }\n  }\n\n  validate() {\n    debug('Validating all fields');\n    let values = this.state.values;\n\n    const validateModified = this.options.current.validateModified;\n\n    if (validateModified) {\n      values = this.state.modified;\n    }\n    let errors = {};\n\n    // Validate schema if needed\n    if (this.options.current.yupSchema) {\n      const yupErrors = validateYupSchema(\n        this.options.current.yupSchema,\n        values\n      );\n      errors = { ...errors, ...yupErrors };\n    }\n\n    // Validate AJV schema if needed\n    if (this.options.current.schema && this.options.current.ajv) {\n      const ajvErrors = validateAjvSchema(this.ajvValidate, values);\n      errors = { ...errors, ...ajvErrors };\n    }\n\n    // Call the forms field level validation\n    if (this.options.current.validateFields) {\n      const fieldErrors = this.options.current.validateFields(values);\n      errors = { ...errors, ...fieldErrors };\n      errors = ObjectMap.purge(errors);\n    }\n\n    // Itterate through and call validate on every field\n    this.fieldsMap.forEach(fieldMeta => {\n      const meta = fieldMeta.current;\n      const value = this.getValue(meta.name);\n      const error = meta.validate ? meta.validate(value, values) : undefined;\n      if (error != null) {\n        ObjectMap.set(errors, meta.name, error);\n      }\n    });\n\n    // Update the errors\n    this.state.errors = errors;\n\n    // Remember to update valid\n    this.updateValid();\n\n    // Let everyone know!\n    this.emit('field', '_ALL_');\n  }\n\n  asyncValidate(done) {\n    debug('Async Validating all fields');\n    this.done = done;\n\n    // Itterate through and call validate on every field\n    this.fieldsMap.forEach(meta => {\n      const { name } = meta.current;\n      // Get error to determine if we even want to validateAsync\n      if (this.getError(name) === undefined) this.validateAsync(name);\n    });\n  }\n\n  getErrorMessage(key, n) {\n    debug(`Getting ${key} error message for ${n} Validating all fields`);\n\n    let name = n;\n\n    if (this.options.current.schema) {\n      debug('We have schema so looking in there for error message');\n\n      // Try to grab message from schema first\n      // Example schema\n      // const schema = {\n      //   errorMessage: {\n      //     minLength: 'name must be longer',\n      //     maxLength: 'must be shorter'\n      //   },\n      //   properties: {\n      //     name: {\n      //       minLength: 6, // This will get 'name must be longer' message\n      //     },\n      //     brother: {\n      //       errorMessage: {\n      //         minLength: 'brothers name must be longer',\n      //       },\n      //       properties: {\n      //         name: {\n      //           minLength: 6, // This will get 'brothers name must be longer'\n      //         },\n      //         age: {\n      //           minLength: 6,\n      //           errorMessage: {\n      //             minLength: 'brothers age must be longer', // This will get 'brothers age must be longer'\n      //           }\n      //         },\n      //         test: {\n      //           maxLength: 6, // This will get 'must be shorter'\n      //         },\n      //       }\n      //     }\n      //   }\n      // };\n      // How are we going to get this? start at the property and drill up\n      // First we go down to the fields location in the schema\n      // Example\n      // Start\n      // name = brother.siblings[1].friend.name\n      // path = properties.brother.properties.siblings.items.properties.friend.properties.name\n      // Iteration 1\n      // next = brother.siblings[1].friend\n      // nextPath = properties.brother.properties.siblings.items.properties.friend\n      // Iteration 2\n      // next = brother.siblings[1]\n      // nextPath = properties.brother.properties.siblings.items\n      // Iteration 3\n      // next = brother\n      // nextPath = properties.brother\n      // Iteration 4\n      // next = ''\n      // nextPath = ''\n      // Done ---------------\n      while (name !== '') {\n        debug(`Looking for message at ${name}`);\n        const path = getSchemaPathFromJsonPath(name);\n        debug(`Looking for message at schema path ${path}`);\n        const property = ObjectMap.get(this.options.current.schema, path);\n        // If the property has an error message use that\n        if (property && property.errorMessage) {\n          const message =\n            typeof property.errorMessage === 'string'\n              ? property.errorMessage\n              : property.errorMessage[key];\n          // Only return a message if we had one... maybe we don't have that defined at field level!\n          if (message) {\n            return message;\n          }\n        }\n        debug(`Did not find message in schema for ${path}`, property);\n        // If we get here we did not find the error message so keep going up\n        name = name.substring(0, name.lastIndexOf('.'));\n      }\n\n      // Last but not least check schema\n      const property = this.options.current.schema;\n      if (property.errorMessage) {\n        const message =\n          typeof property.errorMessage === 'string'\n            ? property.errorMessage\n            : property.errorMessage[key];\n        // Only return a message if we had one... maybe we don't have that defined at field level!\n        if (message) {\n          return message;\n        }\n      }\n    }\n\n    // Next we check the errorMessage option if it was passed explicitly to an input\n    const meta = this.fieldsMap.get(n)?.current;\n\n    if (meta && meta.errorMessage) {\n      const message =\n        typeof meta.errorMessage === 'string'\n          ? meta.errorMessage\n          : meta.errorMessage[key];\n      // Only return a message if we had one... maybe we don't have that defined at field level!\n      if (message) {\n        return message;\n      }\n    }\n\n    // Finally we check the forms errorMessage prop\n    if (this.options.current.errorMessage) {\n      const message =\n        typeof this.options.current.errorMessage === 'string'\n          ? this.options.current.errorMessage\n          : this.options.current.errorMessage[key];\n      // Only return a message if we had one... maybe we don't have that defined at field level!\n      if (message) {\n        return message;\n      }\n    }\n  }\n\n  touchAllFields() {\n    // Touch all the fields\n    // TODO maybe do this all at once !?\n    this.fieldsMap.forEach(meta => {\n      if (!meta.current.arrayField) {\n        debug(\n          `TouchAllFields - setting ${meta.current.name}'s touched to true`\n        );\n        ObjectMap.set(this.state.touched, meta.current.name, true);\n      }\n    });\n  }\n\n  submitForm(e) {\n    this.state.submitting = true;\n\n    if (!this.options.current.dontPreventDefault && e) {\n      // Prevent default browser form submission\n      e.preventDefault(e);\n    }\n\n    // Validate the form\n    this.validate();\n\n    // Touch all the fields\n    this.touchAllFields();\n\n    // Let everyone know!\n    this.emit('field', '_ALL_');\n\n    // Trigger all async validations\n    this.asyncValidate();\n\n    // Check validity and perform submission if valid\n    // Only submit if we are valid and we are NOT currently async validating\n    if (this.valid() && this.state.validating === 0) {\n      debug('Submit', this.state);\n      this.state.submitted = true;\n      this.emit('submit');\n    } else {\n      debug('Fail', this.state);\n      if (this.options.current.focusOnInvalid) {\n        this.focusFirstError();\n      }\n      this.emit('failure');\n    }\n\n    // Only set to false if we are not async validating\n    if (this.state.validating === 0) {\n      this.state.submitting = false;\n    }\n\n    this.emit('field');\n  }\n\n  /* -------------------------------- Event Emitter ------------------------------ */\n\n  emit(event, ...args) {\n    // Grab the set based on the event\n    const listeners = this.subscriptions.get(event);\n    // Only call if we have listeners on that event ( null check )\n    if (listeners) {\n      listeners.forEach(listener => listener(...args));\n    }\n  }\n\n  on(event, listener) {\n    // Singleton check\n    if (!this.subscriptions.get(event)) {\n      this.subscriptions.set(event, new Set());\n    }\n    // Add listener\n    const listeners = this.subscriptions.get(event);\n    listeners.add(listener);\n  }\n\n  removeListener(event, listener) {\n    // Remove listener\n    const listeners = this.subscriptions.get(event);\n    listeners.delete(listener);\n  }\n}\n","import { Debug } from './debug';\nconst debug = Debug('informed:ObjMap' + '\\t');\n\n/**\n *\n * A data structure to read and write to a JS object via\n * JSPAN ( Java Script Property Access Notation )\n */\n\n/* -------------------- toPath -------------------- */\n\nconst ldtoPath = (path = '') => {\n  return String.prototype.replace\n    .call(path, /\\['(.+?)'\\]/g, '.$1')\n    .split(/[,[\\].]+?/)\n    .filter(Boolean);\n};\n\n/* --------------------- get --------------------- */\n\nconst ldget = (obj, path = '', defaultValue) => {\n  const result = String.prototype.replace\n    .call(path, /\\['(.+?)'\\]/g, '.$1')\n    .split(/[,[\\].]+?/)\n    .filter(Boolean)\n    .reduce(\n      (res, key) => (res !== null && res !== undefined ? res[key] : res),\n      obj\n    );\n  return result === undefined || result === obj ? defaultValue : result;\n};\n\n/* --------------------- swap --------------------- */\nconst ldSwap = (arr, a, b) => {\n  if (arr[a] && arr[b]) {\n    const oldA = arr[a];\n    const oldB = arr[b];\n    arr[a] = oldB;\n    arr[b] = oldA;\n  } else {\n    // eslint-disable-next-line no-console\n    console.warn(\n      `Attempted to swap ${a} with ${b} but one of them does not exist :(`\n    );\n  }\n};\n\n/* --------------------- has --------------------- */\n\n// foo -->\n// foo.bar --> foo\n// foo.bar[3] --> foo.bar\n// foo.bar.baz[2].raz.taz[5].laz --> foo.bar.baz[2].raz.taz[5]\nconst parentPath = path => {\n  return `.${path}`.replace(/(.*)[.[].*/, '$1').replace(/\\./, '');\n};\n\n// foo --> foo\n// foo.bar --> bar\n// foo.bar[3] --> [3]\n// foo.bar.baz[2].raz.taz[5].laz --> laz\nconst pathKey = path => {\n  return path.replace(parentPath(path), '').replace(/\\./, '');\n};\n\nconst ldhas = (obj, path) => {\n  const pPath = parentPath(path);\n  const key = pathKey(path);\n  // If we have parent path then get the object at that location\n  // .. otherwise its the root object\n  const parentObj = pPath ? ldget(obj, pPath) : obj;\n  // If its [3] turn key into 3\n  return !!(\n    parentObj &&\n    Object.hasOwnProperty.call(parentObj, key.replace(/\\[(.*)\\]/, '$1'))\n  );\n};\n\n/* --------------------- set --------------------- */\n\nconst ldset = (obj, path = '', val) => {\n  String.prototype.replace\n    .call(path, /\\['(.+?)'\\]/g, '.$1')\n    .split(/[,[\\].]+?/)\n    .filter(Boolean)\n    .reduce((res, key, i, arr) => {\n      //console.log('RES', res, 'Key', key, 'I', i, 'Arr', arr, 'OBJ', obj);\n      // At the leaf set the value\n      if (i === arr.length - 1) {\n        res[key] = val;\n        return res[key];\n      }\n      // Initialize to new array or object if needed\n      // OLD CODE: if (res[key] === undefined) {\n      // Note I left comment above because it used to be undefined check\n      // I had to change it to object in case someone tried to set\n      // a value on an existing non object type\n      // Example ldSet({ foo: 'HelloWorld' }, 'foo.bar', 'Hello World')\n      // ==> { foo: { bar: 'HelloWorld' } }\n      if (typeof res[key] !== 'object') {\n        if (Number.isInteger(+arr[i + 1])) {\n          res[key] = [];\n        } else {\n          res[key] = {};\n        }\n        return res[key];\n      }\n      // Exception for if the value is changeing to an array\n      if (Number.isInteger(+arr[i + 1]) && !Array.isArray(res[key])) {\n        res[key] = [];\n      }\n      //TODO exception for if object ??\n\n      // Otherwise keep whats there\n      return res[key];\n    }, obj);\n};\n\n/* --------------------- unset --------------------- */\n\nconst ldunset = (obj, path = '') => {\n  let found = false;\n  String.prototype.replace\n    .call(path, /\\['(.+?)'\\]/g, '.$1')\n    .split(/[,[\\].]+?/)\n    .filter(Boolean)\n    .reduce((res, key, i, arr) => {\n      // Base case res is undefined\n      if (res === undefined) {\n        return res;\n      }\n      // At the leaf delete the value\n      if (i === arr.length - 1) {\n        delete res[key];\n        found = true;\n        return res[key];\n      }\n      // Otherwise keep going\n      return res[key];\n    }, obj);\n  return found;\n};\n\n/* --------------------- pullAt --------------------- */\n\nconst ldpullAt = (obj, path = '') => {\n  let pulled;\n  String.prototype.replace\n    .call(path, /\\['(.+?)'\\]/g, '.$1')\n    .split(/[,[\\].]+?/)\n    .filter(Boolean)\n    .reduce((res, key, i, arr) => {\n      // Base case res is undefined\n      if (res === undefined) {\n        return res;\n      }\n      // At the leaf delete the value\n      if (i === arr.length - 1 && Array.isArray(res)) {\n        // Pull out one value at index ( key )\n        pulled = res.splice(key, 1);\n        return res[key];\n      }\n      // Otherwise keep going\n      return res[key];\n    }, obj);\n  return pulled;\n};\n\n/* --------------------- values --------------------- */\n\n// eslint-disable-next-line no-unused-vars\nconst ldvalues = (obj = {}) => {\n  const props = Object.keys(obj);\n  return props.map(key => obj[key]);\n};\n\nconst pathToArrayElem = path => {\n  const pathArray = ldtoPath(path);\n  return Number.isInteger(+pathArray[pathArray.length - 1]);\n};\n\nexport class ObjectMap {\n  static empty(object) {\n    // return ldvalues(object).length === 0;\n    for (let i in object) return false;\n    return true;\n  }\n\n  static get(object, path) {\n    const val = ldget(object, path);\n    //debug('GOT', path, val);\n    return val;\n  }\n\n  static has(object, path) {\n    return ldhas(object, path);\n  }\n\n  static set(object, path, value) {\n    if (value !== undefined) {\n      debug('Setting', path, value);\n      ldset(object, path, value);\n    } else {\n      // Setting things to undefined in informed is special!\n      // so in this else statement we deal with that\n\n      // If the path is to an array leaf then we want to set to undefined\n      // Example:\n      // path = 'foo.bar[2]'\n      // foo.bar = [ 'baz', 'raz', 'taz' ]\n      // setting taz to undefined   ^^^\n      if (pathToArrayElem(path) && ObjectMap.get(object, path) !== undefined) {\n        debug('Special case SETTING', path, 'to undefined');\n        ldset(object, path, undefined);\n        let pathArray = ldtoPath(path);\n        pathArray = pathArray.slice(0, pathArray.length - 1);\n        cleanup(object, pathArray, false);\n      }\n      // Only delete the field if it needs to be deleted and its not a path to an array ( array leaf )\n      // Example:\n      // path = 'foo.bar'\n      // foo.bar = 'baz'\n      // removing foo.bar from the object completley\n      else if (\n        !pathToArrayElem(path) &&\n        ObjectMap.get(object, path) !== undefined\n      ) {\n        debug('Special case REMOVING', path, 'from object completley');\n        ObjectMap.delete(object, path);\n      }\n    }\n  }\n\n  static delete(object, path) {\n    debug('DELETE', path);\n\n    // Special case for arrays\n    if (pathToArrayElem(path)) {\n      debug('ARRAY PATH', path);\n      //ldunset(object, path);\n      this.pullOut(object, path);\n    } else {\n      ldunset(object, path);\n    }\n\n    let pathArray = ldtoPath(path);\n    pathArray = pathArray.slice(0, pathArray.length - 1);\n    cleanup(object, pathArray);\n    debug('DELETED', path);\n  }\n\n  // Very important ;)\n  static pullOut(object, path) {\n    // Get the path to the array\n    let pathArray = ldtoPath(path);\n    // debug('PathArray1', pathArray);\n    const index = pathArray[pathArray.length - 1];\n    pathArray = pathArray.slice(0, pathArray.length - 1);\n    debug('Pulling out:', pathArray, 'index', index);\n    // Get the array\n    const arr = ldget(object, pathArray);\n    debug('Array Before', arr);\n    // Pull out of array\n    if (Array.isArray(arr)) {\n      ldpullAt(arr, index);\n    }\n    debug('Array After', arr);\n    cleanup(object, pathArray);\n  }\n\n  static purge(obj) {\n    let newObj = Array.isArray(obj) ? [] : {};\n    Object.keys(obj).forEach(key => {\n      // Its an object recur\n      if (typeof obj[key] === 'object') {\n        newObj[key] = ObjectMap.purge(obj[key]);\n        // If its empty after purge delete\n        if (Object.keys(newObj[key]).length === 0) {\n          delete newObj[key];\n        }\n      } else if (obj[key] !== undefined) {\n        newObj[key] = obj[key];\n      }\n    });\n    return newObj;\n  }\n\n  // Very important ;)\n  static swap(object, path, i, j) {\n    // Get the path to the array\n    console.log('Swaping out out:', path, i, j);\n    // Get the array\n    const arr = ldget(object, path);\n    console.log('Array', arr);\n    // Pull out of array\n    if (Array.isArray(arr)) {\n      ldSwap(arr, i, j);\n    }\n  }\n}\n\nfunction cleanup(obj, path) {\n  // uncomment this to add third param back\n  //,pull = true) {\n\n  // Base case no path left\n  if (path.length === 0) {\n    return;\n  }\n\n  const object = ldget(obj, path);\n\n  // Clean up undefined from array\n  // if (Array.isArray(object) && pull) {\n  //   ldpull(object, undefined);\n  // }\n\n  // Delete object if its empty\n  if (\n    Array.isArray(object)\n      ? object.every(e => e == null)\n      : JSON.stringify(object) === '{}'\n  ) {\n    ldunset(obj, path);\n  }\n  // Recur\n  cleanup(obj, path.slice(0, path.length - 1));\n}\n","import React, { useContext, useMemo, useState, useCallback } from 'react';\nimport { Relevant } from './Relevant';\nimport { useArrayField } from '../hooks/useArrayField';\n// import { useFieldSubscription } from '../hooks/useFieldSubscription';\nimport {\n  ArrayFieldStateContext,\n  ArrayFieldItemApiContext,\n  ArrayFieldItemStateContext,\n  FormControllerContext,\n  ScopeContext\n} from '../Context';\nimport { useFormController } from '../hooks/useFormController';\nimport { useFieldState } from '../hooks/useFieldState';\nimport { Debug } from '../debug';\nimport { useScopedApi } from '../hooks/useScopedApi';\n\nconst debug = Debug('informed:ArrayField' + '\\t');\n\nconst ArrayField = ({\n  relevant,\n  relevanceWhen,\n  relevanceDeps,\n  name,\n  ...props\n}) => {\n  if (relevant) {\n    return (\n      <Relevant\n        when={relevant}\n        relevanceWhen={relevanceWhen}\n        relevanceDeps={relevanceDeps}>\n        <ArrayFieldWrapper name={name} {...props} />\n      </Relevant>\n    );\n  } else {\n    return <ArrayFieldWrapper name={name} {...props} />;\n  }\n};\n\nconst ArrayFieldWrapper = ({ children, ...props }) => {\n  const { render, arrayFieldState, arrayFieldApi } = useArrayField(props);\n\n  if (typeof children === 'function') {\n    return render(\n      children({\n        arrayFieldApi,\n        arrayFieldState,\n        // Make it easier for user\n        ...arrayFieldApi,\n        ...arrayFieldState\n      })\n    );\n  }\n\n  return render(children);\n};\n\nconst ArrayFieldItem = ({\n  arrayFieldItemState,\n  arrayFieldItemApi,\n  children\n  // hidden\n}) => {\n  const formController = useFormController();\n\n  // Map will store all fields by name\n  // Key => name\n  // Val => fieldMetaRef\n  // Why? so the array knows about all its field meta\n  const [fieldsMap] = useState(() => new Map());\n\n  // Register for child field updates\n  const subState = useFieldState(arrayFieldItemState.name);\n\n  // Get scoped api for item api\n  const itemApi = useScopedApi(arrayFieldItemState.name);\n\n  // Example evaluateWhen = [\"name\", \"age\"]\n  // TODO maybe add this\n  // useFieldSubscription(\n  //   'field-modified',\n  //   [arrayFieldItemState.name],\n  //   target => {\n  //     debug(`updating hidden field ${hidden} for ${name} because of ${target}`);\n  //     formController.setModifiedValue(\n  //       `${arrayFieldItemState.name}.${hidden}`,\n  //       formController.getValue(`${arrayFieldItemState.name}.${hidden}`)\n  //     );\n  //     console.log(\n  //       `updating hidden field ${hidden} for ${name} because of ${target}`\n  //     );\n  //   },\n  //   false\n  // );\n\n  // Need to memoize to prevent re renders\n  const wrappedController = useMemo(\n    () => {\n      return {\n        ...formController,\n        register: (n, m) => {\n          fieldsMap.set(n, m);\n          formController.register(n, m);\n        },\n        deregister: (n, m) => {\n          fieldsMap.delete(n);\n          formController.deregister(n, m);\n          // When the very last field from the array is removed unlock\n          const lockedUntil = formController.getRemovalLocked();\n          debug(\n            // fieldsMap,\n            'DEREGISTER',\n            n,\n            'SIZE',\n            fieldsMap.size,\n            'INDEX',\n            arrayFieldItemState.index,\n            'LOCKEDUNTIL',\n            lockedUntil\n          );\n          if (\n            lockedUntil != null &&\n            lockedUntil.index === arrayFieldItemState.index &&\n            lockedUntil.name === arrayFieldItemState.parent &&\n            // We are the last field in this item\n            // 1. Example fieldsMap.keys() ==> [ 'friends[0].name' ]\n            // 2. We are de registering friends[1].age\n            // 3. We look to see if friends[1] is in the field map\n            // 4. If its not, we are done and can unlock!!\n            !Array.from(fieldsMap.keys()).some(k => {\n              // debug(\n              //   'CHECKING',\n              //   k,\n              //   `${arrayFieldItemState.parent}[${lockedUntil.index}]`\n              // );\n              return k.includes(\n                `${arrayFieldItemState.parent}[${lockedUntil.index}]`\n              );\n            })\n          ) {\n            debug('UNLOCKING');\n            formController.unlockRemoval();\n          }\n        }\n      };\n    },\n    // WHATEVER YOU DO... DONT REMOVE THIS... need updated controller when index changes\n    [arrayFieldItemState.index]\n  );\n\n  const reset = useCallback(\n    () => {\n      fieldsMap.forEach(fieldMeta => {\n        fieldMeta.current.fieldApi.reset();\n      });\n    },\n    [arrayFieldItemState.name, arrayFieldItemState.index]\n  );\n\n  const arrayFieldStateValue = {\n    ...arrayFieldItemState,\n    values: subState.value,\n    errors: subState.error,\n    touched: subState.touched\n  };\n\n  const arrayFieldItemApiValue = useMemo(\n    () => {\n      return {\n        ...arrayFieldItemApi,\n        ...itemApi,\n        reset\n      };\n    },\n    [arrayFieldItemState.name, arrayFieldItemState.index]\n  );\n\n  // const memoizedChildren = useMemo(\n  //   () => {\n  //     debug('Rendering');\n  //     return children({\n  //       ...arrayFieldItemApiValue,\n  //       name: arrayFieldItemState.name,\n  //       index: arrayFieldItemState.index\n  //     });\n  //   },\n  //   [arrayFieldItemState.name, arrayFieldItemState.index]\n  // );\n\n  if (typeof children === 'function') {\n    return (\n      <FormControllerContext.Provider value={wrappedController}>\n        <ArrayFieldItemApiContext.Provider value={arrayFieldItemApiValue}>\n          <ArrayFieldItemStateContext.Provider value={arrayFieldStateValue}>\n            <ScopeContext.Provider value={arrayFieldItemState.name}>\n              {/* <h3>{arrayFieldItemState.key}</h3> */}\n              {/* {memoizedChildren} */}\n              {children({\n                ...arrayFieldItemApiValue,\n                name: arrayFieldItemState.name,\n                index: arrayFieldItemState.index\n              })}\n            </ScopeContext.Provider>\n          </ArrayFieldItemStateContext.Provider>\n        </ArrayFieldItemApiContext.Provider>\n      </FormControllerContext.Provider>\n    );\n  }\n\n  return (\n    <FormControllerContext.Provider value={wrappedController}>\n      <ArrayFieldItemApiContext.Provider value={arrayFieldItemApi}>\n        <ArrayFieldItemStateContext.Provider value={arrayFieldItemState}>\n          <ScopeContext.Provider value={arrayFieldItemState.name}>\n            {children}\n          </ScopeContext.Provider>\n        </ArrayFieldItemStateContext.Provider>\n      </ArrayFieldItemApiContext.Provider>\n    </FormControllerContext.Provider>\n  );\n};\n\nArrayField.Items = ({ children }) => {\n  // TODO maybe add this { hidden, fields } =\n  const { fields } = useContext(ArrayFieldStateContext);\n  // console.log(\"FIELDS\", fields);\n  return fields.map(({ arrayFieldItemState, arrayFieldItemApi }) => {\n    const { key } = arrayFieldItemState;\n    return (\n      <ArrayFieldItem\n        key={key}\n        // hidden={hidden}\n        arrayFieldItemApi={arrayFieldItemApi}\n        arrayFieldItemState={arrayFieldItemState}>\n        {children}\n      </ArrayFieldItem>\n    );\n  });\n};\n\nexport { ArrayField };\n","import React from 'react';\nimport { useFormState } from '../hooks/useFormState';\n\nexport const Debug = props => {\n  const formState = useFormState();\n\n  let displayState = {};\n\n  if (Object.keys(props).length > 0) {\n    Object.keys(props).forEach(key => {\n      displayState[key] = formState[key];\n    });\n  } else {\n    displayState = formState;\n  }\n  return (\n    <pre>\n      <code>{JSON.stringify(displayState, null, 2)}</code>\n    </pre>\n  );\n};\n","import React from 'react';\nimport { useFieldState } from '../hooks/useFieldState';\n\nexport const DebugField = ({ name, ...props }) => {\n  const fieldState = useFieldState(name);\n\n  let displayState = {};\n\n  if (Object.keys(props).length > 0) {\n    Object.keys(props).forEach(key => {\n      displayState[key] = fieldState[key];\n    });\n  } else {\n    displayState = fieldState;\n  }\n  return (\n    <pre>\n      <code>{JSON.stringify(displayState, null, 2)}</code>\n    </pre>\n  );\n};\n","import React from 'react';\nimport { Debug } from '../debug';\nimport { useForm } from '../hooks/useForm';\n\nconst debug = Debug('informed:Form' + '\\t\\t');\n\nexport const Form = ({ children, ...rest }) => {\n  debug('Render FORM');\n\n  const { formApi, formController, formState, render, userProps } = useForm(\n    rest\n  );\n\n  const getContent = () => {\n    const props = {\n      formState,\n      formApi\n    };\n    if (typeof children === 'function') {\n      return children(props);\n    }\n    return children;\n  };\n\n  /* --- Render Content --- */\n  return render(\n    <form\n      {...userProps}\n      noValidate\n      onReset={formController.reset}\n      onSubmit={formController.submitForm}\n      onKeyDown={formController.keyDown}>\n      {getContent()}\n    </form>\n  );\n};\n","import React from 'react';\nimport { useFormController } from '../hooks/useFormController';\n\nconst FormComponents = ({ components }) => {\n  // Get the field map off the forms context\n  const { fieldMap, getOptions } = useFormController();\n\n  // Grab the schema\n  const options = getOptions();\n\n  if (!components) return null;\n\n  return components.map((comp, i) => {\n    const { 'ui:control': componentType, 'ui:props': props } = comp;\n    const Component =\n      fieldMap[componentType] ??\n      (options.components ? options.components[componentType] : null);\n    return <Component key={`ui-comp-${i}`} {...props} />;\n  });\n};\n\nexport { FormComponents };\n","import React, { useMemo, useEffect, useState } from 'react';\nimport {\n  computeFieldFromProperty,\n  getSchemaPathFromJsonPath,\n  checkCondition,\n  sanitize\n} from '../utils';\nimport { ObjectMap } from '../ObjectMap';\nimport { useFormController } from '../hooks/useFormController';\nimport { useScope } from '../hooks/useScope';\nimport { useConditional } from '../hooks/useConditional';\nimport { Debug } from '../debug';\nimport { FormFields } from './FormFields';\nimport { Relevant } from './Relevant';\nimport { Scope } from './Scope';\nimport { useFieldApi } from '../hooks/useFieldApi';\nimport { useUpdateEffect } from '../hooks/useUpdateEffect';\n// import { useForceUpdate } from '../hooks/useForceUpdate';\nconst logger = Debug('informed:FormField' + '\\t');\n\nconst FormField = ({ name, schema, ...rest }) => {\n  // Get the field map off the forms context\n  const { fieldMap, getOptions, emitter } = useFormController();\n\n  // Name might be scoped\n  const fullName = useScope(name);\n\n  // Grab the schema\n  const options = getOptions();\n\n  // Grap api\n  const fieldApi = useFieldApi(name);\n\n  // For conditional props\n  const [condProp, setCondProp] = useState({});\n\n  // IF schema was passed its a sub schema and we lookup via name otherwise we look at whole schema\n  const lookupName = schema ? name : fullName;\n  const lookupSchema = schema ?? options.schema;\n\n  // First find property from the schema via the path to that field\n\n  // Examples\n  // field = \"name\" ---> properties.name\n  // field = \"brother.name\" ---> properties.brother.properties.name\n  // field = \"brother.siblings[1].friend.name\" ---> properties.brother.properties.siblings.items.properties.friend.properties.name\n  const path = getSchemaPathFromJsonPath(lookupName);\n  let property = ObjectMap.get(lookupSchema, path);\n\n  // console.log(\n  //   'Lookup Name:',\n  //   lookupName,\n  //   '\\nSchema Path:',\n  //   path,\n  //   '\\nProperty:',\n  //   lookupSchema\n  // );\n\n  // If property was not found try to find it in conditions\n  let condition;\n  if (!property) {\n    if (lookupSchema.allOf) {\n      lookupSchema.allOf.forEach(item => {\n        if (item.if) {\n          property = ObjectMap.get(item.then, path);\n          condition = item.if;\n        }\n      });\n    }\n    // If property was still not found return null\n    if (!property) {\n      return null;\n    }\n  }\n\n  // Next compute the field from property\n  const schemaField = useMemo(() => computeFieldFromProperty(name, property), [\n    name\n  ]);\n\n  const {\n    props: schemaProps,\n    type,\n    properties,\n    items,\n    componentType,\n    uiBefore,\n    uiAfter\n  } = schemaField;\n\n  // Register for events on our field\n  useEffect(\n    () => {\n      const updater = (target, property) => {\n        // Example\n        // target=\"foo\"\n        // property =\n        // {\n        //     oneOf: [\n        //       { const: '', title: '- Select -' },\n        //       { const: 'modelS', title: 'Model S' },\n        //       { const: 'modelX', title: 'Model X' },\n        //       { const: 'model3', title: 'Model 3' }\n        //     ]\n        //   }\n\n        if (target === name) {\n          logger(\n            `Updating field props for ${target}`,\n            computeFieldFromProperty(name, property)\n          );\n          setCondProp(computeFieldFromProperty(name, property));\n        }\n      };\n\n      const remover = target => {\n        if (target === name) {\n          setCondProp({});\n        }\n      };\n\n      emitter.on('update-combine', updater);\n      emitter.on('update-remove', remover);\n\n      return () => {\n        emitter.removeListener('update-combine', updater);\n        emitter.removeListener('update-remove', remover);\n      };\n    },\n    [name]\n  );\n\n  const hookProps = useConditional({\n    name: schemaProps.name,\n    evaluate: schemaProps.evaluate,\n    evaluateWhen: schemaProps.evaluateWhen,\n    dependsOn: schemaProps.dependsOn\n  });\n\n  // Combine any conditional props with the schema props\n  const props = useMemo(\n    () => {\n      // Pull new props off of cond property\n      const condProps = condProp.props;\n\n      // Lay those on top of existing ones\n      const newSchemaProps = sanitize(schemaProps);\n      const newCondProps = sanitize(condProps);\n      const newHookProps = sanitize(hookProps);\n\n      // Temp fix\n      if (\n        schemaProps?.required ||\n        newCondProps?.required ||\n        newHookProps?.required\n      ) {\n        rest.required = true;\n      }\n\n      const newProps = {\n        ...newSchemaProps,\n        ...newCondProps,\n        ...newHookProps,\n        ...rest\n      };\n      logger(`Schema Props for ${name}`, newSchemaProps);\n      logger(`Cond Props for ${name}`, newCondProps);\n      logger(`Hook Props for ${name}`, newHookProps);\n      logger(`New Props for ${name}`, newProps);\n      return newProps;\n    },\n    [condProp, hookProps]\n  );\n\n  useUpdateEffect(\n    () => {\n      if (props.options) {\n        logger('options changed', props.options);\n        fieldApi.reset();\n      }\n    },\n    [props.options]\n  );\n\n  // Component is either on field map or components list passed in\n  let Component =\n    fieldMap[componentType] ??\n    (options.components ? options.components[componentType] : null);\n\n  // Maybe its with options\n  // Example adapter:\n  //  withOptions: {\n  //    array: CheckboxGroup,\n  //  },\n  if (schemaProps.options && fieldMap.withOptions && !items) {\n    Component = fieldMap.withOptions[componentType] || Component;\n    // console.log('HERE!!!!!', componentType, fieldMap.withOptions);\n  }\n\n  // console.log('WTF', schemaField);\n  logger('Rendering Field', name, schemaField);\n\n  // Scope for nested\n  if (!Component && type === 'object' && properties) {\n    return (\n      <Scope scope={name}>\n        <FormFields schema={schemaField} />\n      </Scope>\n    );\n  }\n\n  // Just component\n  if (Component && type === 'object' && properties) {\n    return (\n      <Scope scope={name}>\n        <Component {...props}>\n          <FormFields schema={schemaField} />\n        </Component>\n      </Scope>\n    );\n  }\n\n  // Array field for array ( if none was provided use our default )\n  if (!Component && type === 'array' && items) {\n    return (\n      <ArrayField\n        name={name}\n        items={items}\n        uiBefore={uiBefore}\n        uiAfter={uiAfter}\n        {...props}\n      />\n    );\n  }\n\n  // User created custom array field\n  if (Component && componentType === 'array' && items && type === 'array') {\n    return (\n      <Component\n        name={name}\n        items={items}\n        uiBefore={uiBefore}\n        uiAfter={uiAfter}\n        {...props}\n      />\n    );\n  }\n\n  // If no component return null ( dont render )\n  if (!Component) {\n    return null;\n  }\n\n  if (condition) {\n    const { properties: conditions } = condition;\n    const when = ({ formApi, scope }) => {\n      // Example key \"married, Example condition: \"{ const: 'yes' }\"\n      return Object.entries(conditions).every(([propertyName, condition]) => {\n        return checkCondition(\n          condition,\n          formApi.getValue(scope ? `${scope}.${propertyName}` : propertyName)\n        );\n      });\n    };\n\n    const Comp = () => (\n      <Relevant when={when}>\n        <Component name={name} {...props} />\n      </Relevant>\n    );\n\n    // console.log('WTF', Component);\n\n    return <Comp />;\n  }\n\n  // Note we DONT pass in scoped name here because useField is already scoped\n  return <Component name={name} {...props} />;\n};\n\nexport { FormField };\n","import React, { useMemo } from 'react';\nimport { useFormController } from '../hooks/useFormController';\nimport { checkCondition, computeFieldsFromSchema, uuidv4 } from '../utils';\nimport { FormField } from './FormField';\nimport { Relevant } from './Relevant';\nimport { UpdateFields } from './UpdateFields';\n\n// const logger = Debug('informed:FormFields' + '\\t');\n\nconst FormFields = ({ schema, onlyValidateSchema }) => {\n  const { getOptions } = useFormController();\n\n  const { components: componentsMap } = getOptions();\n\n  const fields = useMemo(\n    () => {\n      const { properties, conditions, components } = computeFieldsFromSchema(\n        schema,\n        onlyValidateSchema\n      );\n\n      let mappedProperties = properties.map(name => {\n        // Not for\n        // ui:component:id ---> foobar\n        // Only for\n        // ui:foobar ---> foobar\n        if (name.includes('ui:') && name.split(':').length !== 3) {\n          return {\n            $id: name.split('ui:')[1]\n          };\n        }\n\n        // Need to get required off schema\n        const required =\n          schema.required && schema.required.includes(name) ? true : undefined;\n\n        const uuid = uuidv4();\n\n        const Component = (\n          <FormField\n            name={name}\n            schema={schema}\n            key={`schema-field-${name}-${uuid}`}\n            required={required}\n          />\n        );\n\n        return {\n          Component\n        };\n      });\n\n      const mappedComponents = components.map(component => {\n        // console.log('WTF', component);\n        if (component['ui:control']) {\n          const RenderedComponent = componentsMap[component['ui:control']];\n          const Component = (\n            <RenderedComponent>\n              <FormFields schema={component} />\n            </RenderedComponent>\n          );\n\n          return {\n            Component,\n            $id: component.$id\n          };\n        }\n      });\n\n      // For conditionals\n      const mappedConditionals = conditions.map((conditional, j) => {\n        // Example then ( its a subschema )\n        // then: {\n        //   properties: {\n        //     spouse: {\n        //       type: 'string',\n        //       title: 'Spouse name',\n        //       'ui:control': 'input'\n        //     }\n        //   }\n        // }\n        const subSchema = conditional.then;\n        // console.log('SUBSCHEMA', subSchema);\n        const $id = conditional.$id;\n        const thenProps = conditional.thenProps;\n\n        // Turn the if into a when function for informed\n        // Example if condition\n        // if: {\n        //   properties: {\n        //     married: { const: 'yes' }\n        //   },\n        //   required: ['married']\n        // },\n        const { properties: conditions } = conditional.if;\n        const when = ({ formApi, scope }) => {\n          // Example key \"married, Example condition: \"{ const: 'yes' }\"\n          return Object.entries(conditions).every(\n            ([propertyName, condition]) => {\n              return checkCondition(\n                condition,\n                formApi.getValue(\n                  scope ? `${scope}.${propertyName}` : propertyName\n                )\n              );\n            }\n          );\n        };\n\n        const Component = (\n          <Relevant key={`Conditional-ScheamField-${j}`} when={when}>\n            {subSchema ? <FormFields schema={subSchema} /> : null}\n            {thenProps ? <UpdateFields schema={thenProps} /> : null}\n          </Relevant>\n        );\n\n        return {\n          Component,\n          $id\n        };\n      });\n\n      const mappedFields = [];\n\n      // Iterate through the mapped properties\n      mappedProperties.forEach(({ $id, Component }) => {\n        if (Component) {\n          mappedFields.push(Component);\n        } else if ($id) {\n          // Grab the id from the mapped conditionals\n          const conditional = mappedConditionals.find(c => c.$id === $id);\n          const component = mappedComponents.find(c => c.$id === $id);\n          if (conditional) {\n            mappedFields.push(conditional.Component);\n            // Make sure to take it off so we dont render it twice ( defaults at the end )\n            const index = mappedConditionals.findIndex(c => c.$id === $id);\n            mappedConditionals.splice(index, 1);\n          } else if (component) {\n            mappedFields.push(component.Component);\n          } else {\n            console.error('MappedConditionals', mappedConditionals);\n            throw new Error(`Unable to find mapping for ${$id}`);\n          }\n        } else {\n          throw new Error('Found property with no ID or component...');\n        }\n      });\n\n      // Add whatever is left at the end\n      mappedConditionals.forEach(({ Component }) => {\n        mappedFields.push(Component);\n      });\n\n      return mappedFields;\n    },\n    [schema]\n  );\n\n  return fields;\n};\n\nexport { FormFields };\n","import React from 'react';\nimport { Debug } from '../debug';\nimport { useForm } from '../hooks/useForm';\n\nconst debug = Debug('informed:Form' + '\\t\\t');\n\nexport const FormProvider = ({ children, ...rest }) => {\n  debug('Render Form Provider');\n\n  const { formApi, formState, render } = useForm(rest);\n\n  const getContent = () => {\n    const props = {\n      formState,\n      formApi\n    };\n    if (typeof children === 'function') {\n      return children(props);\n    }\n    return children;\n  };\n\n  /* --- Render Content --- */\n  return render(<>{getContent()}</>);\n};\n","// eslint-disable-next-line no-unused-vars\nimport React from 'react';\nimport { useFormState } from '../hooks/useFormState';\n\nexport const FormStateAccessor = ({ children }) => {\n  const formState = useFormState();\n  return children(formState);\n};\n","import React, { useState } from 'react';\nimport { Debug } from '../debug';\nimport { InformedContext } from '../Context';\nconst debug = Debug('informed:Informed' + '\\t\\t');\n\n/* -------------------------------- Event Emitter ------------------------------ */\nclass Emitter {\n  constructor() {\n    // Initialize listeners\n    this.subscriptions = new Map();\n\n    // This is the emitter lol\n    this.emitter = this;\n\n    // Bind functions that will be called externally\n    this.on = this.on.bind(this);\n    this.emit = this.emit.bind(this);\n  }\n\n  emit(event, ...args) {\n    // Grab the set based on the event\n    const listeners = this.subscriptions.get(event);\n    // Only call if we have listeners on that event ( null check )\n    if (listeners) {\n      listeners.forEach(listener => listener(...args));\n    }\n  }\n\n  on(event, listener) {\n    // Singleton check\n    if (!this.subscriptions.get(event)) {\n      this.subscriptions.set(event, new Set());\n    }\n    // Add listener\n    const listeners = this.subscriptions.get(event);\n    listeners.add(listener);\n  }\n\n  removeListener(event, listener) {\n    // Remove listener\n    const listeners = this.subscriptions.get(event);\n    listeners.delete(listener);\n  }\n}\n\n/* ----------------------- InformedController ----------------------- */\n\nclass InformedController {\n  constructor() {\n    this.emitter = new Emitter();\n\n    // Map will store all forms by name\n    // Key => name\n    // Val => fieldMetaRef\n    // Why? so the form knows about field meta\n    this.formMap = new Map();\n\n    // For saving values\n    this.savedValues = new Map();\n\n    this.getController = this.getController.bind(this);\n    this.register = this.register.bind(this);\n    this.deregister = this.deregister.bind(this);\n  }\n\n  register(name, controller) {\n    debug('Register', name, controller);\n    // Clear out old controller\n    if (this.formMap.get(name)) {\n      this.formMap.delete(name);\n    }\n    this.formMap.set(name, controller);\n    this.emitter.emit(name, '_ALL_');\n  }\n\n  deregister(name) {\n    debug('De-Register', name);\n    if (this.formMap.get(name)) {\n      this.formMap.delete(name);\n      this.emitter.emit(name, '_ALL_');\n    }\n  }\n\n  getController(name) {\n    return this.formMap.get(name);\n  }\n\n  inform(name, target) {\n    this.emitter.emit(name, target);\n  }\n\n  getSavedValues(name) {\n    return this.savedValues.get(name);\n  }\n\n  setSavedValues(name, values) {\n    return this.savedValues.set(name, values);\n  }\n}\n\nexport const Informed = ({ children }) => {\n  debug('Render Informed Provider');\n\n  // Create informed controller\n  const [informedController] = useState(() => new InformedController());\n\n  return (\n    <InformedContext.Provider value={informedController}>\n      {children}\n    </InformedContext.Provider>\n  );\n};\n","import { useMultistep } from '../hooks/useMultistep';\nimport { useMultistepStep } from '../hooks/useMultistepStep';\n\nexport function Multistep({ children, ...props }) {\n  const { render, ...context } = useMultistep(props);\n\n  if (typeof children === 'function') {\n    return render(children(context));\n  }\n\n  return render(children);\n}\n\nMultistep.Step = function MultistepStep({ children, ...props }) {\n  const { render } = useMultistepStep(props);\n  return render(children);\n};\n","import React, { useMemo, useContext } from 'react';\nimport { RelevanceContext, ScopeContext } from '../Context';\nimport { useFormController } from '../hooks/useFormController';\nimport { useRelevance } from '../hooks/useRelevance';\n\nexport const Relevant = ({ when, relevanceWhen, relevanceDeps, children }) => {\n  const formController = useFormController();\n\n  const scope = useContext(ScopeContext);\n\n  // If we live in `Relevant`\n  const parentRelevantContext = useContext(RelevanceContext);\n\n  const isRelevant = useRelevance({\n    relevant: when,\n    relevanceWhen,\n    relevanceDeps\n  });\n\n  const relevantContext = useMemo(\n    () => {\n      return {\n        isRelevant,\n        relevant: () => {\n          // We might have parent\n          if (parentRelevantContext && !parentRelevantContext.relevant()) {\n            return false;\n          }\n\n          return when({\n            formState: formController.getFormState(),\n            formApi: formController.getFormApi(),\n            scope,\n            relevanceDeps\n          });\n        }\n      };\n    },\n    [isRelevant, scope, relevanceDeps]\n  );\n\n  return (\n    <RelevanceContext.Provider value={relevantContext}>\n      {isRelevant ? children : null}\n    </RelevanceContext.Provider>\n  );\n};\n\n// import React, { useMemo, useContext } from 'react';\n// import { useFormState } from '../hooks/useFormState';\n// import { useFormApi } from '../hooks/useFormApi';\n// import { RelevanceContext, ScopeContext } from '../Context';\n// import { useFormController } from '../hooks/useFormController';\n\n// export const Relevant = ({ when, children }) => {\n//   const formState = useFormState();\n//   const formApi = useFormApi();\n//   const formController = useFormController();\n//   const scope = useContext(ScopeContext);\n\n//   const isRelevant = when({\n//     formState,\n//     formApi,\n//     scope\n//   });\n\n//   const relevantContext = useMemo(\n//     () => {\n//       return {\n//         isRelevant,\n//         relevant: () =>\n//           when({\n//             formState: formController.getFormState(),\n//             formApi: formController.getFormApi(),\n//             scope\n//           })\n//       };\n//     },\n//     [isRelevant]\n//   );\n\n//   return (\n//     <RelevanceContext.Provider value={relevantContext}>\n//       {isRelevant ? children : null}\n//     </RelevanceContext.Provider>\n//   );\n// };\n","import React from 'react';\nimport { useFormController } from '../hooks/useFormController';\nimport { FormFields } from './FormFields';\n\nconst SchemaFields = () => {\n  const { getOptions } = useFormController();\n\n  // Grap the schema\n  const { schema } = getOptions();\n\n  return <FormFields schema={schema} />;\n};\n\nexport { SchemaFields };\n","// eslint-disable-next-line no-unused-vars\nimport React, { useContext } from 'react';\nimport { ScopeContext } from '../Context';\n\nexport const Scope = ({ scope, children }) => {\n  // Name might be scoped\n  const parentScope = useContext(ScopeContext);\n\n  let newScope;\n\n  // Example:\n  // parentScope = undefined\n  // scope = father\n  // ==> father\n  if (!parentScope) {\n    newScope = scope;\n  }\n  // Example:\n  // parentScope = father\n  // scope = bestFriend\n  // ==> father.bestFriend\n  else {\n    newScope = `${parentScope}.${scope}`;\n  }\n\n  return (\n    <ScopeContext.Provider value={newScope}>{children}</ScopeContext.Provider>\n  );\n};\n","import { useEffect } from 'react';\nimport { useFormController } from '../hooks/useFormController';\nimport { Debug } from '../debug';\n\nconst logger = Debug('informed:FormField' + '\\t');\n\nexport const UpdateFields = ({ schema }) => {\n  const formController = useFormController();\n\n  // When we render add props\n  useEffect(() => {\n    // Example schema\n    // schema =  {\n    //   product: {\n    //     oneOf: [\n    //       { const: '', title: '- Select -' },\n    //       { const: 'modelS', title: 'Model S' },\n    //       { const: 'modelX', title: 'Model X' },\n    //       { const: 'model3', title: 'Model 3' }\n    //     ]\n    //   }\n    // }\n\n    Object.entries(schema).forEach(([key, value]) => {\n      logger(`update-combine ${key}`, value);\n      formController.emitter.emit('update-combine', key, value);\n    });\n\n    // When we unmount take away props\n    return () => {\n      Object.entries(schema).forEach(([key]) => {\n        logger(`update-remove ${key}`);\n        formController.emitter.emit('update-remove', key);\n      });\n    };\n  }, []);\n\n  return null;\n};\n","import React from 'react';\nimport { useArrayFieldApi } from '../../hooks/useArrayFieldApi';\n\nconst AddButton = ({ text }) => {\n  const { add } = useArrayFieldApi();\n\n  return (\n    <button\n      onClick={() => {\n        add();\n      }}\n      type=\"button\">\n      {text ? text : 'Add'}\n    </button>\n  );\n};\n\nexport { AddButton };\n","import React from 'react';\nimport { ArrayField as InformedArrayField } from '../ArrayField';\nimport { FormComponents } from '../FormComponents';\nimport { FormFields } from '../FormFields';\n\nconst ArrayField = ({ name, items, uiBefore, uiAfter, ...props }) => {\n  // const ArrayField = ({ name, items, ...props }) => {\n  // const { 'ui:props': uiProps = {} } = items;\n  return (\n    <InformedArrayField name={name} {...props}>\n      <FormComponents components={uiBefore} />\n      <InformedArrayField.Items>\n        {() => (\n          <React.Fragment>\n            {/* <FormComponents components={items['ui:before']} /> */}\n            <FormFields schema={items} />\n            {/* <FormComponents components={items['ui:after']} /> */}\n          </React.Fragment>\n        )}\n      </InformedArrayField.Items>\n      <FormComponents components={uiAfter} />\n    </InformedArrayField>\n  );\n};\n\nexport { ArrayField };\n","import React from 'react';\nimport { useField } from '../../hooks/useField';\n\nexport const Checkbox = props => {\n  const { render, userProps, fieldState, fieldApi } = useField(props);\n  const { setValue, setTouched } = fieldApi;\n  const { value, error, showError } = fieldState;\n  const { id, label, ...rest } = userProps;\n  return render(\n    <>\n      {label ? <label htmlFor={id}>{label}</label> : null}\n      <input\n        {...rest}\n        id={id}\n        checked={!!value}\n        aria-invalid={!!showError}\n        aria-describedby={`${id}-error`}\n        onChange={e => {\n          setValue(e.target.checked, e);\n        }}\n        onBlur={e => {\n          setTouched(true, e);\n        }}\n        type=\"checkbox\"\n      />\n      {showError ? (\n        <small role=\"alert\" id={`${id}-error`}>\n          {error}\n        </small>\n      ) : null}\n    </>\n  );\n};\n","import React from 'react';\nimport { useField } from '../../hooks/useField';\n\nexport function Hidden(props) {\n  const { informed, render, userProps, ref } = useField({\n    type: 'text',\n    ...props\n  });\n\n  return render(<input {...informed} {...userProps} ref={ref} type=\"hidden\" />);\n}\n","import React from 'react';\nimport { useField } from '../../hooks/useField';\n\nexport const Input = React.memo(props => {\n  const { render, userProps, ref, fieldState, fieldApi } = useField(props);\n  const { setValue, setTouched, setFocused } = fieldApi;\n  const { maskedValue, showError, error } = fieldState;\n  const { label, id, ...rest } = userProps;\n  return render(\n    <>\n      {label ? <label htmlFor={id}>{label}</label> : null}\n      <input\n        ref={ref}\n        id={id}\n        {...rest}\n        value={!maskedValue && maskedValue !== 0 ? '' : maskedValue}\n        onChange={e => {\n          setValue(e.target.value, e);\n        }}\n        onBlur={e => {\n          setTouched(true, e);\n        }}\n        onFocus={e => {\n          setFocused(true, e);\n        }}\n        aria-invalid={!!showError}\n        aria-describedby={`${id}-error`}\n      />\n      {showError ? (\n        <small role=\"alert\" id={`${id}-error`}>\n          {error}\n        </small>\n      ) : null}\n    </>\n  );\n});\n","import React from 'react';\n\nconst Option = ({ value, forwardedRef, children, ...rest }) => {\n  return (\n    <option ref={forwardedRef} value={value} key={value} {...rest}>\n      {children}\n    </option>\n  );\n};\n\nexport { Option };\n","import React from 'react';\nimport { useRadioGroup } from '../../hooks/useRadioGroup';\n\nexport const Radio = ({ label, value, ...props }) => {\n  const { radioGroupApi, radioGroupState } = useRadioGroup();\n\n  const { setValue, setTouched } = radioGroupApi;\n\n  const { value: groupValue, showError } = radioGroupState;\n\n  return (\n    <label>\n      {label}\n      <input\n        {...props}\n        aria-invalid={!!showError}\n        value={value}\n        checked={groupValue === value}\n        onChange={e => {\n          if (!e.target.checked) {\n            return;\n          }\n          setValue(value, e);\n        }}\n        onBlur={e => {\n          setTouched(true, e);\n        }}\n        type=\"radio\"\n      />\n    </label>\n  );\n};\n","/* eslint-disable indent */\nimport React from 'react';\nimport { RadioGroupContext } from '../../Context';\nimport { useField } from '../../hooks/useField';\nimport { Radio } from './Radio';\n\nexport const RadioGroup = props => {\n  const { fieldApi, fieldState, userProps } = useField(props);\n\n  const groupContext = {\n    radioGroupApi: fieldApi,\n    radioGroupState: fieldState,\n    ...props\n  };\n\n  const { label, id, options, children } = userProps;\n  const { showError, error } = fieldState;\n\n  return (\n    <RadioGroupContext.Provider value={groupContext}>\n      <fieldset aria-describedby={`${id}-error`}>\n        {label ? <legend>{label}</legend> : null}\n        {options\n          ? options.map(option => (\n              <label key={option.value}>\n                {option.label} <Radio value={option.value} />\n              </label>\n            ))\n          : children}\n        {showError ? (\n          <small role=\"alert\" id={`${id}-error`}>\n            {error}\n          </small>\n        ) : null}\n      </fieldset>\n    </RadioGroupContext.Provider>\n  );\n};\n","import React from 'react';\nimport { useArrayFieldItemApi } from '../../hooks/useArrayFieldItemApi';\n\nconst RemoveButton = ({ text }) => {\n  const { remove } = useArrayFieldItemApi();\n\n  return (\n    <button\n      onClick={() => {\n        remove();\n      }}\n      type=\"button\">\n      {text ? text : 'Remove'}\n    </button>\n  );\n};\n\nexport { RemoveButton };\n","import React from 'react';\nimport { useField } from '../../hooks/useField';\n\nexport const Select = props => {\n  const { render, userProps, fieldState, fieldApi, ref } = useField(props);\n  const { setValue, setTouched } = fieldApi;\n  const { value, showError, error } = fieldState;\n  const { id, onBlur, multiple, label, options, children, ...rest } = userProps;\n\n  const handleChange = e => {\n    let selected = Array.from(ref.current)\n      .filter(option => option.selected)\n      .map(option => option.value);\n\n    setValue(multiple ? selected : selected[0] || '', e);\n  };\n\n  return render(\n    <>\n      {label ? <label htmlFor={id}> {label} </label> : null}\n      <select\n        {...rest}\n        id={id}\n        multiple={multiple}\n        ref={ref}\n        value={value || (multiple ? [] : '')}\n        aria-invalid={!!showError}\n        aria-describedby={`${id}-error`}\n        onChange={handleChange}\n        onBlur={e => {\n          setTouched(true);\n          if (onBlur) {\n            onBlur(e);\n          }\n        }}>\n        {options\n          ? options.map(option => (\n            <option\n              key={option.value}\n              value={option.value}\n              disabled={option.disabled}>\n              {option.label}\n            </option>\n          ))\n          : children}\n      </select>\n      {showError ? (\n        <small role=\"alert\" id={`${id}-error`}>\n          {error}\n        </small>\n      ) : null}\n    </>\n  );\n};\n","import React from 'react';\nimport { useField } from '../../hooks/useField';\n\nexport const TextArea = React.memo(props => {\n  const { render, userProps, ref, fieldState, fieldApi } = useField(props);\n  const { setValue, setTouched, setFocused } = fieldApi;\n  const { maskedValue, showError, error } = fieldState;\n  const { label, id } = userProps;\n  return render(\n    <>\n      {label ? <label htmlFor={id}>{label}</label> : null}\n      <textarea\n        ref={ref}\n        {...userProps}\n        value={!maskedValue ? '' : maskedValue}\n        onChange={e => {\n          setValue(e.target.value, e);\n        }}\n        onBlur={e => {\n          setTouched(true, e);\n        }}\n        onFocus={e => {\n          setFocused(true, e);\n        }}\n        aria-invalid={!!showError}\n        aria-describedby={`${id}-error`}\n      />\n      {showError ? (\n        <small role=\"alert\" id={`${id}-error`}>\n          {error}\n        </small>\n      ) : null}\n    </>\n  );\n});\n","/* eslint-disable no-undef */\n/**\n *\n * I stole most of this code from the debug lib\n * https://github.com/visionmedia/debug\n *\n * Just wanted it to be easy to debug without relying on the dependency!\n */\n\n/**\n * Selects a color for a debug namespace\n * @param {String} namespace The namespace string for the for the debug instance to be colored\n * @param {String} colors color pallette to choose from\n * @return {Number|String} An ANSI color code for the given namespace\n * @api private\n */\nfunction selectColor(namespace, colors) {\n  let hash = 0;\n\n  for (let i = 0; i < namespace.length; i++) {\n    hash = (hash << 5) - hash + namespace.charCodeAt(i);\n    hash |= 0; // Convert to 32bit integer\n  }\n\n  return colors[Math.abs(hash) % colors.length];\n}\n\n/**\n * Adds ANSI color escape codes if enabled.\n *\n * @api public\n */\n\nfunction formatNodeArgs(args, config) {\n  const name = config.namespace;\n\n  if (config.useColors) {\n    const c = config.color;\n    const colorCode = '\\u001B[3' + (c < 8 ? c : '8;5;' + c);\n    const prefix = `  ${colorCode};1m${name} \\u001B[0m`;\n    args[0] = prefix + args[0].split('\\n').join('\\n' + prefix);\n  } else {\n    args[0] = name + ' ' + args[0];\n  }\n}\n\n/**\n * Colorize log arguments if enabled.\n *\n */\n\nfunction formatBrowserArgs(args, config) {\n  args[0] = (config.useColors ? '%c' : '') + config.namespace;\n\n  if (!config.useColors) {\n    return;\n  }\n\n  const c = 'color: ' + config.color;\n\n  // The final \"%c\" is somewhat tricky, because there could be other\n  // arguments passed either before or after the %c, so we need to\n  // figure out the correct index to insert the CSS into\n  let index = 0;\n  let lastC = 0;\n  args[0].replace(/%[a-zA-Z%]/g, match => {\n    if (match === '%%') {\n      return;\n    }\n    index++;\n    if (match === '%c') {\n      // We only are interested in the *last* %c\n      // (the user may have provided their own)\n      lastC = index;\n    }\n  });\n\n  args.splice(lastC, 0, c);\n}\n\nconst browserColors = [\n  '#0000CC',\n  '#0000FF',\n  '#0033CC',\n  '#0033FF',\n  '#0066CC',\n  '#0066FF',\n  '#0099CC',\n  '#0099FF',\n  '#00CC00',\n  '#00CC33',\n  '#00CC66',\n  '#00CC99',\n  '#00CCCC',\n  '#00CCFF',\n  '#3300CC',\n  '#3300FF',\n  '#3333CC',\n  '#3333FF',\n  '#3366CC',\n  '#3366FF',\n  '#3399CC',\n  '#3399FF',\n  '#33CC00',\n  '#33CC33',\n  '#33CC66',\n  '#33CC99',\n  '#33CCCC',\n  '#33CCFF',\n  '#6600CC',\n  '#6600FF',\n  '#6633CC',\n  '#6633FF',\n  '#66CC00',\n  '#66CC33',\n  '#9900CC',\n  '#9900FF',\n  '#9933CC',\n  '#9933FF',\n  '#99CC00',\n  '#99CC33',\n  '#CC0000',\n  '#CC0033',\n  '#CC0066',\n  '#CC0099',\n  '#CC00CC',\n  '#CC00FF',\n  '#CC3300',\n  '#CC3333',\n  '#CC3366',\n  '#CC3399',\n  '#CC33CC',\n  '#CC33FF',\n  '#CC6600',\n  '#CC6633',\n  '#CC9900',\n  '#CC9933',\n  '#CCCC00',\n  '#CCCC33',\n  '#FF0000',\n  '#FF0033',\n  '#FF0066',\n  '#FF0099',\n  '#FF00CC',\n  '#FF00FF',\n  '#FF3300',\n  '#FF3333',\n  '#FF3366',\n  '#FF3399',\n  '#FF33CC',\n  '#FF33FF',\n  '#FF6600',\n  '#FF6633',\n  '#FF9900',\n  '#FF9933',\n  '#FFCC00',\n  '#FFCC33'\n];\n\n/**\n * Load `namespaces`.\n *\n * @return {String} returns the debug modes\n * @api private\n */\nfunction loadBrowser() {\n  let namespaces;\n  try {\n    namespaces = localStorage.getItem('debug');\n  } catch (error) {\n    // Swallow\n    // XXX (@Qix-) should we be logging these?\n  }\n\n  // If debug isn't set in LS, and we're in Electron, try to load $DEBUG\n  // eslint-disable-next-line no-undef\n  if (!namespaces && typeof process !== 'undefined' && 'env' in process) {\n    // eslint-disable-next-line no-undef\n    namespaces = process.env.DEBUG;\n  }\n\n  return {\n    namespaces: namespaces || '',\n    colors: browserColors,\n    useColors: true,\n    formatArgs: formatBrowserArgs\n  };\n}\n\n/**\n * Load `namespaces`.\n *\n * @return {String} returns the debug modes\n * @api private\n */\nfunction loadNode() {\n  return {\n    namespaces: process.env.DEBUG || '',\n    colors: [6, 2, 3, 4, 5, 1],\n    useColors: true,\n    formatArgs: formatNodeArgs\n  };\n}\n\nfunction createLogger(prefix = null, config) {\n  return function(...args) {\n    if (prefix) {\n      args.unshift(prefix);\n    }\n\n    // Create a namespace regex for each namespace\n    const matches = config.namespaces.split(',').map(namespace => {\n      // Remove wildcard and add to regex if wildcard\n      if (namespace[namespace.length - 1] === '*') {\n        return new RegExp(\n          '^' + namespace.slice(0, namespace.length - 1) + '.*' + '$'\n        );\n      }\n      return new RegExp('^' + namespace + '$');\n    });\n\n    // Does the prefix match a namespace\n    const match = matches.some(regex => {\n      return regex.test(prefix);\n    });\n\n    const conf = {\n      color: selectColor(prefix, config.colors),\n      namespace: prefix,\n      useColors: config.useColors\n    };\n\n    if (process.env.NODE_ENV !== 'production' && match) {\n      config.formatArgs(args, conf);\n      console.log(...args);\n    }\n  };\n}\n\nfunction nodeLogger(prefix) {\n  return createLogger(prefix, loadNode());\n}\n\nfunction browserLogger(prefix) {\n  return createLogger(prefix, loadBrowser());\n}\n\nexport const Debug = prefix => {\n  /**\n   * Detect Electron renderer / nwjs process, which is node, but we should\n   * treat as a browser.\n   */\n\n  if (\n    typeof process === 'undefined' ||\n    process.type === 'renderer' ||\n    process.browser === true ||\n    process.__nwjs\n  ) {\n    return browserLogger(prefix);\n  } else if (\n    typeof window !== 'undefined' &&\n    typeof window.navigator !== 'undefined' &&\n    window.navigator.product === 'ReactNative' &&\n    typeof global !== 'undefined' &&\n    __DEV__ === true\n  ) {\n    console.log('informed:debug: Detected React Native Environment');\n\n    // https://github.com/debug-js/debug/issues/640#issuecomment-441263230\n    // Shim process and window.localStorage to enable logging via react native debugger\n    process.type = 'renderer';\n    // only override localStorage if missing\n    if (!window.localStorage || !window.localStorage.getItem) {\n      window.localStorage = {\n        debug: global.DEBUG_INFORMED || '',\n        getItem: () => {\n          // we only expect 1 key in logger, always return that\n          return global.DEBUG_INFORMED || '';\n        }\n      };\n    }\n    return browserLogger(prefix);\n  } else {\n    return nodeLogger(prefix);\n  }\n};\n","import { Input } from './components/form-fields/Input';\nimport { TextArea } from './components/form-fields/TextArea';\nimport { Select } from './components/form-fields/Select';\nimport { Checkbox } from './components/form-fields/Checkbox';\nimport { RadioGroup } from './components/form-fields/RadioGroup';\nimport { AddButton } from './components/form-fields/AddButton';\nimport { RemoveButton } from './components/form-fields/RemoveButton';\nimport { ArrayField } from './components/form-fields/ArrayField';\nimport { Hidden } from './components/form-fields/Hidden';\n\nexport const FieldMap = {\n  string: Input,\n  number: Input,\n  boolean: Checkbox,\n  select: Select,\n  input: Input,\n  textarea: TextArea,\n  checkbox: Checkbox,\n  radio: RadioGroup,\n  add: AddButton,\n  remove: RemoveButton,\n  hidden: Hidden,\n  array: ArrayField,\n  withOptions: {\n    string: Select\n  }\n};\n","import React, { useState, useContext, useRef, useEffect, useMemo } from 'react';\nimport { useStateWithGetter } from './useStateWithGetter';\nimport { Debug } from '../debug';\nimport {\n  ArrayFieldApiContext,\n  ArrayFieldStateContext,\n  FormControllerContext\n} from '../Context';\n\nimport { uuidv4 } from '../utils';\nimport { ObjectMap } from '../ObjectMap';\nimport { useFieldApi } from './useFieldApi';\nimport { useScope } from './useScope';\nimport { useFormApi } from './useFormApi';\n\nconst logger = Debug('informed:useArrayField' + '\\t');\n\nexport const useArrayField = ({\n  name: userName,\n  initialValue,\n  defaultValue,\n  // validate,\n  arrayFieldApiRef\n  // hidden\n  // ...props\n}) => {\n  // Name might be scoped\n  const name = useScope(userName);\n\n  // Grab the form register context\n  const formController = useContext(FormControllerContext);\n\n  // Hook onto the field api\n  const fieldApi = useFieldApi(name);\n\n  // Gook onto the form api\n  const formApi = useFormApi();\n\n  // Map will store all fields by name\n  // Key => name\n  // Val => fieldMetaRef\n  // Why? so the array knows about all its field meta\n  const [fieldsMap] = useState(() => new Map());\n\n  const [\n    initialValues,\n    setInitialValues,\n    getInitialValues\n  ] = useStateWithGetter(() => {\n    // If we already have value i.e \"saved\"\n    // use that ( it was not removed on purpose! )\n    if (formController.getValue(name)) {\n      return formController.getValue(name);\n    }\n    return (\n      initialValue || formController.getInitialValue(name) || defaultValue || []\n    );\n  });\n\n  // TODO Need to use saved state to initialize ( after being re rendered )\n  const initialKeys = Array.isArray(initialValues)\n    ? initialValues.map(() => uuidv4())\n    : [];\n\n  const [keys, setKeys, getKeys] = useStateWithGetter(initialKeys);\n\n  const remove = i => {\n    // Always get ref to latest keys\n    const ks = getKeys();\n\n    // Notify form to expect removal on the last field\n    formController.lockRemoval({\n      index: ks.length - 1,\n      name\n    });\n    // Remove the key\n    const newKeys = ks.slice(0, i).concat(ks.slice(i + 1, ks.length));\n    setKeys(newKeys);\n    // Remove the initial value ( user wanted to get rid of that input )\n    const initVals = getInitialValues();\n    const newInitialValues = initVals\n      .slice(0, i)\n      .concat(initVals.slice(i + 1, initVals.length));\n    setInitialValues(newInitialValues);\n\n    // We need to manually do a pull from the form state\n    formController.pullOut(`${name}[${i}]`);\n    formApi.setDirt(name, []);\n    formController.emitter.emit('field-value-set', name);\n  };\n\n  const swap = (a, b) => {\n    logger('Swapping', `${name}[${a}] and ${name}[${b}]`);\n\n    formController.swap(name, a, b);\n\n    // Always get ref to latest keys\n    const ks = getKeys();\n\n    // Swap the keys\n    const newKeys = [...ks];\n\n    if (ks[a] && ks[b]) {\n      newKeys[a] = ks[b];\n      newKeys[b] = ks[a];\n    } else {\n      // eslint-disable-next-line no-console\n      console.warn(\n        `Attempted to swap ${a} with ${b} but one of them does not exist :(`\n      );\n    }\n\n    setKeys(newKeys);\n  };\n\n  const add = (amount = 1) => {\n    const ks = getKeys();\n    // if 'amount' is not defined, run the default behavior to add 1 field\n    if (typeof amount !== 'number' || !Number(amount) || amount <= 0) {\n      ks.push(uuidv4());\n    } else {\n      for (let i = 0; i < amount; i++) {\n        ks.push(uuidv4());\n      }\n    }\n    setKeys([...ks]);\n\n    // If we added a new field we are no longer pristine\n    formApi.setPristine(false);\n    formApi.setDirt(name, []);\n    formController.emitter.emit('field-value-set', name);\n  };\n\n  const addWithInitialValue = initialValue => {\n    const ks = getKeys();\n    ks.push(uuidv4());\n    setKeys([...ks]);\n    const newInitialValues = [...getInitialValues()];\n    newInitialValues[ks.length - 1] = initialValue;\n    setInitialValues(newInitialValues);\n  };\n\n  const initialValueRef = useRef();\n  initialValueRef.current = initialValue;\n\n  const reset = () => {\n    // First wipe the existing state\n    // Array fields are unique.. because reset will create new keys everything below gets wiped\n    // So, we can start by simply wiping out the state below here ( same thing we do at form level reset )\n    // ^^ By this I mean in form level reset we first wipe the form state :) so we can do same thing here!\n    formController.remove(name);\n    // When resetting we reset to the users initial value not the one tracked by this hook\n    const initVals =\n      initialValueRef.current ||\n      formController.getInitialValue(name) ||\n      defaultValue ||\n      [];\n\n    // Set our initial values back to what the user set at beginning\n    setInitialValues(initVals);\n    // Build a new set of keys because everything is new !!!\n    const resetKeys = initVals ? initVals.map(() => uuidv4()) : [];\n    // Finally set that shit !\n    setKeys(resetKeys);\n  };\n\n  // Create meta object\n  const meta = {\n    name,\n    initialValue,\n    fieldApi: {\n      ...fieldApi,\n      reset\n    },\n    arrayField: true\n  };\n  const metaRef = useRef(meta);\n  metaRef.current = meta;\n\n  // Register as if its a field muahhahaha\n  useEffect(\n    () => {\n      formController.register(name, metaRef);\n      return () => {\n        formController.deregister(name);\n      };\n    },\n    [name]\n  );\n\n  const fields = keys.map((key, i) => {\n    const arrayFieldItemApi = {\n      remove: () => remove(i)\n    };\n\n    const arrayFieldItemState = {\n      initialValue: initialValues && initialValues[i],\n      key,\n      name: `${name}[${i}]`,\n      index: i,\n      parent: name\n    };\n\n    return {\n      arrayFieldItemApi,\n      arrayFieldItemState\n    };\n  });\n\n  const arrayFieldApi = useMemo(() => {\n    return {\n      add,\n      remove,\n      swap,\n      addWithInitialValue,\n      reset\n    };\n  }, []);\n\n  if (arrayFieldApiRef) {\n    arrayFieldApiRef.current = arrayFieldApi;\n  }\n\n  const arrayFieldState = {\n    fields,\n    name\n    // hidden\n  };\n\n  // Wrap the updater to update array fields references\n  const wrappedController = useMemo(\n    () => {\n      return {\n        ...formController,\n        register: (n, m) => {\n          fieldsMap.set(n, m);\n          formController.register(n, m);\n        },\n        deregister: (n, m) => {\n          fieldsMap.delete(n);\n          formController.deregister(n, m);\n        },\n        getInitialValue: fieldName => {\n          // If we are getting initial value and its for this field return that\n          if (RegExp(`${name}\\\\[[0-9]+\\\\]`).test(fieldName)) {\n            const path = fieldName.replace(name, '');\n            const v = ObjectMap.get(getInitialValues(), path);\n            logger(`Resetting ${path} to ${v}`);\n            return v;\n          }\n          return formController.getInitialValue(fieldName);\n        }\n      };\n    },\n    [name]\n  );\n\n  const render = children => (\n    <FormControllerContext.Provider value={wrappedController}>\n      <ArrayFieldApiContext.Provider value={arrayFieldApi}>\n        <ArrayFieldStateContext.Provider value={arrayFieldState}>\n          {children}\n        </ArrayFieldStateContext.Provider>\n      </ArrayFieldApiContext.Provider>\n    </FormControllerContext.Provider>\n  );\n\n  return {\n    render,\n    arrayFieldState,\n    arrayFieldApi\n  };\n};\n","import { useContext } from 'react';\nimport { ArrayFieldApiContext } from '../Context';\n\nfunction useArrayFieldApi() {\n  return useContext(ArrayFieldApiContext);\n}\n\nexport { useArrayFieldApi };\n","import { useContext } from 'react';\nimport { ArrayFieldItemApiContext } from '../Context';\n\nfunction useArrayFieldItemApi() {\n  return useContext(ArrayFieldItemApiContext);\n}\n\nexport { useArrayFieldItemApi };\n","import { useContext } from 'react';\nimport { ArrayFieldItemStateContext } from '../Context';\n\nfunction useArrayFieldItemState() {\n  return useContext(ArrayFieldItemStateContext);\n}\n\nexport { useArrayFieldItemState };\n","import { useContext } from 'react';\nimport { ArrayFieldStateContext } from '../Context';\n\nfunction useArrayFieldState() {\n  return useContext(ArrayFieldStateContext);\n}\n\nexport { useArrayFieldState };\n","import { useContext, useEffect, useMemo, useRef, useState } from 'react';\nimport { ScopeContext } from '../Context';\nimport { useFormController } from './useFormController';\nimport { useFieldSubscription } from './useFieldSubscription';\nimport { Debug } from '../debug';\nconst logger = Debug('informed:useConditional' + '\\t');\n\n/* ----------------------- useDepends ----------------------- */\nexport const useConditional = ({\n  name,\n  evaluate,\n  evaluateWhen = [],\n  dependsOn = []\n}) => {\n  // Grab the form controller\n  const formController = useFormController();\n\n  // Get scope\n  const scope = useContext(ScopeContext);\n\n  // Need ref to scope because subscriptions will keep ref to it\n  const scopeRef = useRef(scope);\n  scopeRef.current = scope;\n\n  // Conditional state\n  const [props, setProps] = useState(() => {\n    if (evaluate) {\n      return evaluate({\n        formState: formController.getFormState(),\n        formApi: formController.getFormApi(),\n        scope,\n        dependsOn\n      });\n    }\n    return {};\n  });\n\n  const check = typeof evaluateWhen === 'function' ? [] : evaluateWhen;\n\n  const fields = useMemo(\n    () => {\n      if (typeof evaluateWhen === 'function') {\n        // Generate fields array with scope\n        // Example: evaluateWhen = scope => [`${scope}.foo`, `${scope}.bar`]\n        return evaluateWhen(scope);\n      }\n      // Example evaluateWhen = [\"name\", \"age\"]\n      return evaluateWhen;\n    },\n    [...check, scope]\n  );\n\n  // Example evaluateWhen = [\"name\", \"age\"]\n  useFieldSubscription(\n    'field-value',\n    fields,\n    target => {\n      logger(`re-evaluating conditional for ${name} because of ${target}`);\n      const res = evaluate({\n        formState: formController.getFormState(),\n        formApi: formController.getFormApi(),\n        scope: scopeRef.current,\n        dependsOn\n      });\n      setProps(res);\n    },\n    // Note: we pass false because we don't want this to be scoped!\n    // When the user explicitly uses a function!\n    !(typeof evaluateWhen === 'function')\n  );\n\n  useEffect(\n    () => {\n      if (evaluate) {\n        // When name changes we always check if relevant\n        setProps(\n          evaluate({\n            formState: formController.getFormState(),\n            formApi: formController.getFormApi(),\n            scope,\n            dependsOn\n          })\n        );\n      }\n    },\n    [name, ...dependsOn]\n  );\n\n  // Trigger evaluate on a reset of form\n  useEffect(() => {\n    const listener = () => {\n      if (evaluate) {\n        setProps(\n          evaluate({\n            formState: formController.getFormState(),\n            formApi: formController.getFormApi(),\n            scope,\n            dependsOn\n          })\n        );\n      }\n    };\n\n    formController.emitter.on('reset', listener);\n\n    return () => {\n      formController.emitter.removeListener('reset', listener);\n    };\n  }, []);\n\n  return props;\n};\n","import { useCallback, useEffect, useMemo } from 'react';\nimport { useStateWithGetter } from './useStateWithGetter';\n\nconst useCursorPosition = ({\n  value,\n  inputRef,\n  inputRefs,\n  maintainCursor = false\n}) => {\n  const initialCursor = useMemo(() => {\n    if (inputRefs) {\n      const initOffset = {};\n      Object.keys(inputRefs).forEach(key => (initOffset[key] = 0));\n    } else {\n      return 0;\n    }\n  }, []);\n\n  const [cursor, setCursor, getCursor] = useStateWithGetter(initialCursor);\n\n  const [cursorOffset, setCursorOffset, getCursorOffset] = useStateWithGetter(\n    initialCursor\n  );\n\n  const setCursorCallback = useCallback((c, key) => {\n    if (key) {\n      const newCursor = { ...getCursor() };\n      newCursor[key] = c;\n      setCursor(newCursor);\n    } else {\n      setCursor(c);\n    }\n  }, []);\n\n  const setCursorOffsetCallback = useCallback((c, key) => {\n    if (key) {\n      const newCursor = { ...getCursor() };\n      newCursor[key] = c[key];\n      setCursorOffset(newCursor);\n    } else {\n      setCursorOffset(c);\n    }\n  }, []);\n\n  useEffect(\n    () => {\n      if (!inputRefs && inputRef.current != null && getCursor()) {\n        // inputRef.current.selectionEnd = getCursor() + getCursorOffset();\n        const offset = getCursorOffset() < 0 ? 0 : getCursorOffset();\n        const cursorLoc = getCursor() + offset;\n        // console.log('Cursor', getCursor());\n        // console.log('Offset', offset);\n        // console.log('CursorLoc', cursorLoc);\n        // Only offset if we need to\n        if (maintainCursor) {\n          inputRef.current.setSelectionRange(cursorLoc, cursorLoc);\n        }\n      }\n      if (inputRefs && getCursor()) {\n        // console.log('Cursor', getCursor());\n        // Loop over each ref and set selection range\n        Object.keys(inputRefs).forEach(key => {\n          const offset =\n            getCursorOffset()[key] < 0 ? 0 : getCursorOffset()[key];\n          const cursorLoc = getCursor()[key] + offset;\n          // Only offset if we need to\n          if (maintainCursor) {\n            inputRefs[key].current.setSelectionRange(cursorLoc, cursorLoc);\n          }\n        });\n      }\n    },\n    [value, cursor]\n  );\n\n  return {\n    setCursorOffset: setCursorOffsetCallback,\n    setCursor: setCursorCallback,\n    cursor,\n    getCursor,\n    cursorOffset\n  };\n};\n\nexport { useCursorPosition };\n","import { useState, useRef, useEffect } from 'react';\n\nexport const useEffectOnce = effect => {\n  const destroyFunc = useRef();\n  const effectCalled = useRef(false);\n  const renderAfterCalled = useRef(false);\n  // eslint-disable-next-line no-unused-vars\n  const [val, setVal] = useState(0);\n\n  if (effectCalled.current) {\n    renderAfterCalled.current = true;\n  }\n\n  useEffect(() => {\n    // only execute the effect first time around\n    if (!effectCalled.current) {\n      destroyFunc.current = effect();\n      effectCalled.current = true;\n    }\n\n    // this forces one render after the effect is run\n    setVal(val => val + 1);\n\n    return () => {\n      // if the comp didn't render since the useEffect was called,\n      // we know it's the dummy React cycle\n      if (!renderAfterCalled.current) {\n        return;\n      }\n      if (destroyFunc.current) {\n        destroyFunc.current();\n      }\n    };\n  }, []);\n};\n","import React, {\n  useState,\n  useRef,\n  useLayoutEffect,\n  useEffect,\n  useContext,\n  useMemo\n} from 'react';\nimport { useFieldApi } from './useFieldApi';\nimport { useRelevance } from './useRelevance';\nimport { useFieldState } from './useFieldState';\nimport { useFormController } from './useFormController';\nimport { useCursorPosition } from './useCursorPosition';\nimport {\n  MultistepStepContext,\n  RelevanceContext,\n  ScopeContext\n} from '../Context';\n\nimport {\n  uuidv4,\n  generateOnBlur,\n  generateOnChange,\n  generateOnFocus,\n  generateValue,\n  generateValidationFunction\n} from '../utils';\nimport { Debug } from '../debug';\nimport { useUpdateEffect } from '../hooks/useUpdateEffect';\nimport { useScope } from './useScope';\nimport { useFieldSubscription } from './useFieldSubscription';\n\nconst logger = Debug('informed:useField' + '\\t');\n\n/* ----------------------- useField ----------------------- */\nexport const useField = ({\n  id,\n  type,\n  name: userName,\n  onBlur,\n  onChange,\n  onFocus,\n  onNativeChange,\n  onValueChange,\n  validate: validationFunc,\n  asyncValidate,\n  validateModified: userValidateModified,\n  gatherData,\n  yupSchema,\n  multiple,\n  field,\n  keep,\n  keepState: userKeepState,\n  keepStateIfRelevant: userKeepStateIfRelevant,\n  debug,\n  inputRef,\n  inputRefs,\n  relevant,\n  defaultValue,\n  initialValue: userInitialValue,\n  autocomplete: userAutocomplete,\n  showErrorIfError: userShowErrorIfError,\n  showErrorIfTouched: userShowErrorIfTouched,\n  showErrorIfDirty: userShowErrorIfDirty,\n  formatter,\n  parser,\n  clean,\n  mask,\n  maintainCursor: userMaintainCursor,\n  required,\n  minimum,\n  maximum,\n  minLength,\n  maxLength,\n  pattern,\n  allowEmptyString: userAllowEmptyString,\n  disabled: userDisabled,\n  gatherOnMount,\n  validateOnMount: userValidateOnMount,\n  validateOn: userValidateOn,\n  validateWhen = [],\n  formatterDependencies = [],\n  formController: userFormController,\n  initialize,\n  errorMessage,\n  initializeValueIfPristine,\n  relevanceWhen = [],\n  relevanceDeps = [],\n  // eslint-disable-next-line no-unused-vars\n  evaluate,\n  // eslint-disable-next-line no-unused-vars\n  evaluateWhen,\n  ...userProps\n}) => {\n  // For backwards compatability\n  const n = userName ?? field;\n\n  // Because it could be scoped\n  const name = useScope(n);\n\n  // Get scoped context\n  const scope = useContext(ScopeContext);\n\n  if (!name) {\n    console.warn('name is a required prop!!!!');\n  }\n\n  // Default to maintain cursor whenever formatter is passed\n  const maintainCursor = userMaintainCursor ?? !!formatter;\n\n  // Grab the form controller\n  const formController = userFormController ?? useFormController();\n\n  // Get any options\n  const autocomplete =\n    userAutocomplete ?? formController.options.current.autocomplete;\n  const showErrorIfError =\n    userShowErrorIfError ?? formController.options.current.showErrorIfError;\n  const showErrorIfTouched =\n    userShowErrorIfTouched ?? formController.options.current.showErrorIfTouched;\n  const showErrorIfDirty =\n    userShowErrorIfDirty ?? formController.options.current.showErrorIfDirty;\n  const validateOnMount =\n    userValidateOnMount ?? formController.options.current.validateOnMount;\n  const validateOn =\n    userValidateOn ?? formController.options.current.validateOn;\n  const keepState = userKeepState ?? formController.options.current.keepState;\n  const keepStateIfRelevant =\n    userKeepStateIfRelevant ??\n    formController.options.current.keepStateIfRelevant;\n  const allowEmptyString =\n    userAllowEmptyString ?? formController.options.current.allowEmptyStrings;\n  const validateModified =\n    userValidateModified ?? formController.options.current.validateModified;\n\n  const disabled =\n    userDisabled ??\n    formController.disabled ??\n    formController.options.current.disabled;\n\n  // For getting initialValue\n  const getInitialValue = () =>\n    userInitialValue ?? formController.getInitialValue(name) ?? defaultValue;\n\n  // Grab the initial value\n  const [initialValue] = useState(() => getInitialValue());\n\n  // Hook onto the field state\n  // Note: we already scoped above so we pass false here\n  const fieldState = useFieldState(name, false);\n\n  // Hook onto the field api\n  // Note: we already scoped above so we pass false here\n  const fieldApi = useFieldApi(name, false);\n\n  // For multistep\n  const inMultistep = useContext(MultistepStepContext);\n\n  // For relevance\n  const isRelevant = useRelevance({\n    name,\n    relevant,\n    relevanceWhen,\n    relevanceDeps\n  });\n\n  // If we live in `Relevant`\n  const relevantContext = useContext(RelevanceContext);\n\n  // Create ref\n  const internalRef = useRef(null);\n  const ref = React.useMemo(() => inputRef || internalRef, []);\n\n  // Create Id for field\n  const [fieldId] = useState(() => id || uuidv4());\n\n  // Setup cursor position tracking\n  const { setCursor, setCursorOffset } = useCursorPosition({\n    value: fieldState.value,\n    inputRef: ref,\n    maintainCursor,\n    inputRefs\n  });\n\n  // Generate validation function\n  const validate = useMemo(\n    () =>\n      generateValidationFunction(validationFunc, yupSchema, {\n        required,\n        minimum,\n        maximum,\n        minLength,\n        maxLength,\n        pattern,\n        getErrorMessage: key => formController.getErrorMessage(key, name),\n        validateModified,\n        fieldApi,\n        formController,\n        scope\n      }),\n    [required, minimum, maximum, minLength, maxLength, pattern]\n  );\n\n  // Create meta object\n  const meta = {\n    name,\n    type,\n    onBlur,\n    onChange,\n    onFocus,\n    onNativeChange,\n    initialValue,\n    keep,\n    keepState,\n    keepStateIfRelevant,\n    initializeValueIfPristine,\n    fieldApi,\n    getInitialValue,\n    formatter,\n    parser,\n    clean,\n    mask,\n    setCursorOffset,\n    setCursor,\n    validate,\n    yupSchema,\n    validateOn: validateOn ?? 'blur',\n    validateOnMount,\n    validateWhen,\n    showErrorIfError,\n    showErrorIfTouched,\n    showErrorIfDirty,\n    asyncValidate,\n    gatherData,\n    initialize,\n    errorMessage,\n    allowEmptyString,\n    gatherOnMount,\n    fieldRef: ref\n  };\n  const metaRef = useRef(meta);\n  metaRef.current = meta;\n\n  // Register\n  useEffect(\n    () => {\n      logger('Register', name, metaRef.current);\n      formController.register(name, metaRef);\n      return () => {\n        logger('De-Register', name, metaRef.current);\n        formController.deregister(name);\n      };\n    },\n    [name]\n  );\n\n  // Initialize\n  // useEffect(() => {\n  //   formController.initialize(name, metaRef);\n  //   logger('Initialize', name);\n  // }, []);\n\n  // Cleanup on irrelivant\n  useEffect(\n    () => {\n      // The info may have changed, grab it from the ref\n      const metaInfo = metaRef.current;\n\n      if (!isRelevant && !keepState) {\n        logger('RELEVANT REMOVING', metaInfo.name);\n        formController.remove(metaInfo.name, metaInfo.keep);\n        logger('RELEVANT De-Register', metaInfo.name);\n        formController.deregister(metaInfo.name);\n      }\n\n      if (isRelevant) {\n        logger('RELEVANT register', metaInfo.name);\n        formController.register(metaInfo.name, metaRef);\n        logger('RELEVANT Initialize', metaInfo.name);\n        formController.initialize(metaInfo.name, metaRef);\n      }\n    },\n    [isRelevant]\n  );\n\n  // Cleanup on un-mount\n  useEffect(() => {\n    return () => {\n      let keepIt = false;\n\n      // The info may have changed, grab it from the ref\n      const metaInfo = metaRef.current;\n\n      logger('CLEANUP REMOVING', metaInfo.name);\n\n      // Always keep it if this is passed\n      if (metaInfo.keepState) {\n        keepIt = true;\n      }\n      // Need to check relevance because we DONT\n      // want to keep if we are irrelivant\n      else if (relevantContext && !relevantContext.relevant()) {\n        keepIt = false;\n      }\n      // If we make it here we must be relevant so check keepStateIfRelevant\n      else if (keepStateIfRelevant) {\n        keepIt = true;\n      }\n      // If its a multistep then we also want to keep it\n      else if (inMultistep) {\n        keepIt = true;\n      }\n\n      if (!keepIt) {\n        formController.remove(metaInfo.name, metaInfo.keep);\n      }\n    };\n  }, []);\n\n  useUpdateEffect(\n    () => {\n      formController.reformat(metaRef.current.name);\n    },\n    [...formatterDependencies]\n  );\n\n  // Note im not adding this yet as I need to figure out how to solve issue with array fields when you remove 1 [0, 1, 2] and 2 becomes 1\n  // useUpdateEffect(\n  //   () => {\n  //     // If the form is pristine then reset it when we get new initial values !\n  //     const pristine = fieldApi.getPristine();\n  //     if (pristine) {\n  //       fieldApi.reset();\n  //     }\n  //   },\n  //   [userInitialValue, defaultValue]\n  // );\n\n  useFieldSubscription('field-value', validateWhen, target => {\n    logger(`revalidating for ${metaRef.current.name} because of ${target}`);\n    formController.validateField(metaRef.current.name);\n  });\n\n  useFieldSubscription('field-value', [name], target => {\n    if (onValueChange) {\n      onValueChange(formController.getFieldState(target));\n    }\n  });\n\n  useLayoutEffect(() => {\n    if (debug && ref && ref.current) {\n      ref.current.style.background = 'orange';\n      setTimeout(() => {\n        if (ref.current) {\n          ref.current.style.background = 'grey';\n        }\n      }, 300);\n    }\n  });\n\n  const render = children => (isRelevant ? children : null);\n\n  const changeHandler = generateOnChange({\n    fieldType: type,\n    setValue: fieldApi.setValue,\n    multiple,\n    ref\n  });\n  const blurHandler = generateOnBlur({\n    setTouched: fieldApi.setTouched\n  });\n  const focusHandler = generateOnFocus({\n    setFocused: fieldApi.setFocused\n  });\n  const hookedValue = generateValue({\n    fieldType: type,\n    maskedValue: fieldState.maskedValue,\n    multiple: userProps.multiple,\n    value: fieldState.value\n  });\n\n  const recombinedUserProps = {\n    id: fieldId,\n    name,\n    // ref,\n    type,\n    multiple,\n    autoComplete: autocomplete,\n    disabled,\n    required,\n    min: minimum,\n    max: maximum,\n    minLength,\n    maxLength,\n    pattern,\n    ...userProps\n  };\n\n  // const order66 = new Date('2022-06-08T04:20Z');\n\n  // if (new Date() > order66) {\n  //   recombinedUserProps.placeholder = 'Bye Elon';\n  // }\n\n  return {\n    fieldState,\n    fieldApi,\n    userProps: recombinedUserProps,\n    informed: {\n      onChange: changeHandler,\n      onBlur: blurHandler,\n      onFocus: focusHandler,\n      value: hookedValue\n    },\n    ref,\n    render\n  };\n};\n","import { useMemo } from 'react';\nimport { useFormApi } from './useFormApi';\nimport { useScope } from './useScope';\n\n/* ----------------------- useFieldApi ----------------------- */\nconst buildFieldApi = (formApi, name) => {\n  return {\n    getValue: () => formApi.getValue(name),\n    setValue: (value, e, key) => formApi.setValue(name, value, e, key),\n    getTouched: () => formApi.getTouched(name),\n    setTouched: (value, e) => formApi.setTouched(name, value, e),\n    getError: () => formApi.getError(name),\n    setError: value => formApi.setError(name, value),\n    getFocused: () => formApi.getFocused(name),\n    setFocused: (value, e) => formApi.setFocused(name, value, e),\n    getData: () => formApi.getData(name),\n    getModified: () => formApi.getModified(name),\n    reset: options => formApi.resetField(name, options),\n    validate: () => formApi.validateField(name),\n    getDirty: () => formApi.getDirty(name),\n    getPristine: () => formApi.getPristine(name),\n    getMaskedValue: () => formApi.getMaskedValue(name),\n    clearValue: () => formApi.clearValue(name),\n    setValueQuietly: value => formApi.setValueQuietly(name, value)\n  };\n};\n\nexport function useFieldApi(n, scoped = true) {\n  const formApi = useFormApi();\n  const name = scoped ? useScope(n) : n;\n\n  const fieldApi = useMemo(() => buildFieldApi(formApi, name), [name]);\n  return fieldApi;\n}\n","import { useEffect } from 'react';\nimport { useFormController } from './useFormController';\nimport { useForceUpdate } from './useForceUpdate';\nimport { isChild } from '../utils';\nimport { Debug } from '../debug';\nimport { useScope } from './useScope';\n\nconst debug = Debug('informed:useFieldState' + '\\t');\n\n/* ----------------------- useFieldState ----------------------- */\nexport const useFieldState = (n, scoped = true) => {\n  // Create name\n  const name = scoped ? useScope(n) : n;\n\n  // Grab the form controller\n  const formController = useFormController();\n\n  // Magic trick\n  const forceUpdate = useForceUpdate();\n\n  // Register for events on our field\n  useEffect(\n    () => {\n      const listener = target => {\n        // either\n        // 1. All fields are supposed to update\n        // 2. This is a specific registration \"foo\" === \"foo\"\n        // 3. This field is a child of registration \"friends[0].name\" is a child of name=\"friends[0]\"\n        if (\n          target === '_ALL_' ||\n          target === name ||\n          (target && isChild(name, target))\n        ) {\n          debug('Updating', name);\n          forceUpdate();\n        }\n      };\n\n      formController.emitter.on('field', listener);\n\n      // When name changes we always force an update!\n      forceUpdate();\n\n      return () => {\n        formController.emitter.removeListener('field', listener);\n      };\n    },\n    [name]\n  );\n\n  return formController.getFieldState(name);\n};\n","import { useEffect, useMemo, useContext } from 'react';\nimport { useFormController } from './useFormController';\n// import { useForceUpdate } from './useForceUpdate';\nimport { isChild } from '../utils';\nimport { Debug } from '../debug';\nimport { useScoper } from './useScoper';\nimport { ScopeContext } from '../Context';\n\nconst debug = Debug('informed:useFieldSubscription' + '\\t');\n\n/* ----------------------- useFieldSubscription ----------------------- */\nexport const useFieldSubscription = (event, fields = [], cb, scoped = true) => {\n  // Create scoper function\n  const scope = useScoper();\n\n  const scopedContext = useContext(ScopeContext);\n\n  // Determine what fields is ( might be function )\n  const check = typeof fields === 'function' ? [] : fields;\n\n  const builtFields = useMemo(\n    () => {\n      if (typeof fields === 'function') {\n        // Generate fields array with scope\n        // Example: fields = scope => [`${scope}.foo`, `${scope}.bar`]\n        return fields(scopedContext);\n      }\n      // Example relevanceWhen = [\"name\", \"age\"]\n      return fields;\n    },\n    [...check, scope]\n  );\n\n  // Generate scoped fields\n  const scopedFields = useMemo(\n    () => {\n      if (scoped && typeof fields != 'function') {\n        return builtFields.map(field => scope(field));\n      }\n      return builtFields;\n    },\n    [builtFields]\n  );\n\n  // Grab the form controller\n  const formController = useFormController();\n\n  // Magic trick\n  // const forceUpdate = useForceUpdate();\n\n  // Register for events on our field\n  useEffect(\n    () => {\n      const listener = target => {\n        // either\n        // 1. All fields are supposed to update\n        // 2. This is a specific registration \"foo\" === \"foo\"\n        // 3. This field is a child of registration \"friends[0].name\" is a child of name=\"friends[0]\"\n        if (\n          target === '_ALL_' ||\n          scopedFields.includes(target) ||\n          (target && scopedFields.some(field => isChild(field, target)))\n        ) {\n          debug(\n            `subscription ${event} triggered with target ${target} for`,\n            scopedFields\n          );\n          // forceUpdate();\n          cb(target);\n        }\n      };\n\n      formController.emitter.on(event, listener);\n\n      // When name changes we always force an update!\n      // forceUpdate();\n\n      return () => {\n        formController.emitter.removeListener(event, listener);\n      };\n    },\n    [...fields]\n  );\n};\n","import React from 'react';\n\n/* ----------------------- useForceUpdate ----------------------- */\nexport const useForceUpdate = () => {\n  const [, updateState] = React.useState();\n  const forceUpdate = React.useCallback(() => updateState({}), []);\n  return forceUpdate;\n};\n","import React, { useEffect, useState, useMemo, useRef } from 'react';\nimport { FormController } from '../FormController';\nimport {\n  FormControllerContext,\n  FormApiContext,\n  FormStateContext\n} from '../Context';\nimport { useUpdateEffect } from './useUpdateEffect';\nimport { useInformed } from './useInformed';\n// import { SchemaFields } from '../components/SchemaFields';\nimport { Debug } from '../debug';\nconst logger = Debug('informed:useForm' + '\\t');\n\nexport const useForm = ({\n  onSubmit,\n  onReset,\n  onChange,\n  onSubmitFailure,\n  onValueChange,\n  onValueSet,\n  onValid,\n  onInvalid,\n  onValueModified,\n  initialValues: userInitialValues,\n  validateFields,\n  autocomplete,\n  showErrorIfError,\n  showErrorIfTouched,\n  showErrorIfDirty,\n  validateOn,\n  validateOnMount,\n  formApiRef,\n  dontPreventDefault,\n  yupSchema,\n  allowEmptyStrings,\n  disabled,\n  preventEnter,\n  validateModified,\n  schema,\n  ajv,\n  ajvErrors,\n  // onlyValidateSchema,\n  components,\n  errorMessage,\n  fieldMap,\n  adapter,\n  name,\n  keepState,\n  keepStateIfRelevant,\n  focusOnInvalid,\n  ...userProps\n}) => {\n  // Register this controler by name if we are in global context\n  const informed = useInformed();\n\n  const initialValues = useMemo(\n    () => {\n      if (informed && name) {\n        logger('Checking for saved values', informed.getSavedValues(name));\n        return informed.getSavedValues(name) ?? userInitialValues;\n      }\n      return userInitialValues;\n    },\n    [userInitialValues]\n  );\n\n  const formControllerOptions = {\n    initialValues,\n    validateFields,\n    autocomplete,\n    showErrorIfError,\n    showErrorIfTouched: showErrorIfTouched ?? true,\n    showErrorIfDirty,\n    validateOn,\n    validateOnMount,\n    // NEW STUFF\n    dontPreventDefault,\n    yupSchema,\n    allowEmptyStrings,\n    disabled,\n    preventEnter,\n    schema,\n    ajv,\n    ajvErrors,\n    components,\n    errorMessage,\n    fieldMap,\n    adapter,\n    keepState,\n    keepStateIfRelevant,\n    validateModified,\n    focusOnInvalid\n  };\n\n  const optionsRef = useRef();\n  optionsRef.current = formControllerOptions;\n\n  // Create form controller\n  const [formController] = useState(() => new FormController(optionsRef));\n\n  // Register for events\n  useEffect(\n    () => {\n      const onChangeHandler = () =>\n        onChange && onChange(formController.getFormState());\n      const onResetHandler = () =>\n        onReset && onReset(formController.getFormState());\n      const onSubmitHandler = () =>\n        onSubmit && onSubmit(formController.getFormState());\n      const onFailureHandler = () =>\n        onSubmitFailure && onSubmitFailure(formController.getFormState());\n      const onValueChangeHandler = n =>\n        onValueChange && onValueChange(formController.getFormState(), n);\n      const onValueModifiedHandler = n =>\n        onValueModified && onValueModified(formController.getFormState(), n);\n      const onValueSetHandler = n =>\n        onValueSet && onValueSet(formController.getFormState(), n);\n      const onValidHandler = () =>\n        onValid && onValid(formController.getFormState());\n      const onInvalidHandler = () =>\n        onInvalid && onInvalid(formController.getFormState());\n\n      // Register for events\n      formController.on('field', onChangeHandler);\n      formController.on('reset', onResetHandler);\n      formController.on('submit', onSubmitHandler);\n      formController.on('failure', onFailureHandler);\n      formController.on('field-value', onValueChangeHandler);\n      formController.on('field-modified', onValueModifiedHandler);\n      formController.on('field-value-set', onValueSetHandler);\n      formController.on('valid', onValidHandler);\n      formController.on('invalid', onInvalidHandler);\n\n      // Unregister events\n      return () => {\n        formController.removeListener('field', onChangeHandler);\n        formController.removeListener('reset', onResetHandler);\n        formController.removeListener('submit', onSubmitHandler);\n        formController.removeListener('failure', onFailureHandler);\n        formController.removeListener('field-value', onValueChangeHandler);\n        formController.removeListener('field-modified', onValueModifiedHandler);\n      };\n    },\n    [\n      onChange,\n      onReset,\n      onSubmit,\n      onSubmitFailure,\n      onValueChange,\n      onValueModified\n    ]\n  );\n\n  // Form state will be used to trigger rerenders\n  const [formState, setFormState] = useState(() =>\n    formController.getFormState()\n  );\n\n  // Register for events for ALL fields!\n  useEffect(() => {\n    const listener = target => {\n      setFormState({ ...formController.getFormState() });\n      if (informed) {\n        informed.inform(name, target);\n      }\n    };\n\n    formController.emitter.on('field', listener);\n\n    // Need initial state\n    setFormState({ ...formController.getFormState() });\n\n    //Register this form if we need to\n    if (name && informed) {\n      informed.register(name, formController);\n    }\n\n    return () => {\n      formController.emitter.removeListener('field', listener);\n      if (name && informed) {\n        // informed.deregister(name);\n        informed.setSavedValues(name, formController.getFormState().values);\n      }\n    };\n  }, []);\n\n  // YES! this is important! Otherwise it would get a new formApi object every render\n  /// That would cause unessissarry re-renders! so do not remove useMemeo!\n  const formApi = useMemo(() => {\n    if (formApiRef) {\n      formApiRef.current = formController.getFormApi();\n    }\n    return formController.getFormApi();\n  }, []);\n\n  useUpdateEffect(\n    () => {\n      // If the form is pristine then reset it when we get new initial values !\n      const { pristine } = formApi.getFormState();\n      if (pristine) {\n        formApi.reset();\n      }\n    },\n    [initialValues]\n  );\n\n  useEffect(() => {\n    logger('Mount');\n    formController.lockRemoval(false);\n    return () => {\n      // Important so we dont clear values!!!\n      formController.lockRemoval(true);\n      logger('Un-Mount');\n    };\n  }, []);\n\n  const render = children => (\n    <FormControllerContext.Provider value={formController}>\n      <FormApiContext.Provider value={formApi}>\n        <FormStateContext.Provider value={formState}>\n          {children}\n        </FormStateContext.Provider>\n      </FormApiContext.Provider>\n    </FormControllerContext.Provider>\n  );\n\n  return { formApi, formState, formController, render, userProps };\n};\n","import { useContext } from 'react';\nimport { FormApiContext } from '../Context';\n\n/* ----------------------- useFormApi ----------------------- */\nexport function useFormApi() {\n  const formApi = useContext(FormApiContext);\n  return formApi;\n}\n","import { useContext } from 'react';\nimport { FormControllerContext } from '../Context';\n\n/* ----------------------- useFormController ----------------------- */\nexport function useFormController() {\n  const formController = useContext(FormControllerContext);\n  return formController;\n}\n","import { useContext } from 'react';\nimport { FormStateContext } from '../Context';\n\n/* ----------------------- useFormState ----------------------- */\nexport function useFormState() {\n  const formState = useContext(FormStateContext);\n  return formState;\n}\n","import { useMemo, useRef, useEffect } from 'react';\nimport { useFormController } from './useFormController';\nimport { createDeepProxy, isDeepChanged } from '../proxy';\nimport { useForceUpdate } from './useForceUpdate';\nimport { structuredClone } from '../structuredClone';\n\nexport function useFormStateSelector(selector) {\n  const formController = useFormController();\n  const affected = new WeakMap();\n  const proxyCache = useMemo(() => new WeakMap(), []);\n  const prevState = useRef(structuredClone(formController.state));\n  const lastAffected = useRef(affected);\n  const forceUpdate = useForceUpdate();\n  const selectorStateRef = useRef(\n    selector(createDeepProxy(prevState.current, affected, proxyCache))\n  );\n  const selectorRef = useRef();\n\n  selectorRef.current = selector;\n  lastAffected.current = affected;\n\n  useEffect(() => {\n    const callback = () => {\n      if (\n        isDeepChanged(\n          prevState.current,\n          formController.state,\n          lastAffected.current\n        )\n      ) {\n        prevState.current = structuredClone(formController.state);\n\n        selectorStateRef.current = selectorRef.current(\n          createDeepProxy(prevState.current, affected, proxyCache)\n        );\n\n        forceUpdate();\n      }\n    };\n\n    formController.on('field', callback);\n\n    return () => {\n      formController.removeListener('field', callback);\n    };\n  }, []);\n\n  return selectorStateRef.current;\n}\n","import { useContext } from 'react';\nimport { InformedContext } from '../Context';\n\n/* ----------------------- useInformed ----------------------- */\nexport function useInformed() {\n  return useContext(InformedContext);\n}\n","import { useMemo, useRef } from 'react';\nimport { useInformed } from './useInformed';\n// import { Debug } from '../debug';\n\n// const debug = Debug('informed:useInformedApi' + '\\t');\n\n/* ----------------------- useFieldState ----------------------- */\nexport const useInformedApi = () => {\n  // Grab informed\n  const informed = useInformed();\n  const informedRef = useRef();\n  informedRef.current = informed;\n\n  const informedApi = useMemo(() => {\n    return {\n      getFormApi: name => {\n        return informedRef.current.getController(name)?.getFormApi();\n      }\n    };\n  }, []);\n\n  return informedApi;\n};\n","import { useEffect } from 'react';\nimport { useInformed } from './useInformed';\nimport { useForceUpdate } from './useForceUpdate';\nimport { Debug } from '../debug';\nimport { isChild } from '../utils';\n\nconst debug = Debug('informed:useInformedField' + '\\t');\n\n/* ----------------------- useFieldState ----------------------- */\nexport const useInformedField = (name, target) => {\n  // Grab informed\n  const informed = useInformed();\n\n  // Magic trick\n  const forceUpdate = useForceUpdate();\n  // Register for events on our field\n  useEffect(\n    () => {\n      const listener = t => {\n        // either\n        // 1. All fields are supposed to update\n        // 2. This is a specific registration \"foo\" === \"foo\"\n        // 3. This field is a child of registration \"friends[0].name\" is a child of name=\"friends[0]\"\n        if (t === '_ALL_' || t === target || (t && isChild(target, t))) {\n          debug('Updating', t, name, target);\n          forceUpdate();\n        }\n      };\n\n      informed.emitter.on(name, listener);\n\n      // When name changes we always force an update!\n      forceUpdate();\n\n      return () => {\n        informed.emitter.removeListener(name, listener);\n      };\n    },\n    [name]\n  );\n\n  return informed.getController(name)?.getFieldState(target);\n};\n","import { useEffect } from 'react';\nimport { useInformed } from './useInformed';\nimport { useForceUpdate } from './useForceUpdate';\nimport { Debug } from '../debug';\n\nconst debug = Debug('informed:useInformedState' + '\\t');\n\n/* ----------------------- useFieldState ----------------------- */\nexport const useInformedState = name => {\n  // Grab informed\n  const informed = useInformed();\n\n  // Magic trick\n  const forceUpdate = useForceUpdate();\n\n  // Register for events on our field\n  useEffect(\n    () => {\n      const listener = n => {\n        debug('Updating', n);\n        forceUpdate();\n      };\n\n      informed.emitter.on(name, listener);\n\n      // When name changes we always force an update!\n      forceUpdate();\n\n      return () => {\n        informed.emitter.removeListener(name, listener);\n      };\n    },\n    [name]\n  );\n\n  return informed.getController(name)?.getFormState();\n};\n","import React, { useRef, useState, useMemo, useContext, useEffect } from 'react';\nimport {\n  MultistepApiContext,\n  MultistepStateContext,\n  ScopeContext\n} from '../Context';\nimport { useFormApi } from './useFormApi';\nimport { useFormController } from './useFormController';\n\nconst useMultistep = ({ initialStep, multistepApiRef }) => {\n  // Get the formApi\n  const {\n    validate,\n    asyncValidate,\n    getFormState,\n    getFieldState,\n    emitter\n  } = useFormController();\n\n  const formApi = useFormApi();\n\n  // Get scope for relevance\n  const scope = useContext(ScopeContext);\n\n  // Track number of steps\n  const nSteps = useRef(0);\n\n  // Track current step\n  const currentStep = useRef();\n\n  // Track array of steps\n  const [steps] = useState(() => []);\n\n  // Track our steps by name\n  const [stepsMap] = useState(() => new Map());\n\n  // Form state will be used to trigger rerenders\n  const [multistepState, setState] = useState({\n    steps: [],\n    goal: null\n  });\n\n  // YES! this is important! Otherwise it would get a new api object every render\n  /// That would cause unessissarry re-renders! so do not remove useMemeo!\n  const multistepApi = useMemo(() => {\n    // ---------- Define the api functions ----------\n    const register = (name, step) => {\n      // Create step meta\n      const stepMeta = { ...step, index: nSteps.current };\n      // Add step to ordered array\n      steps.push(stepMeta);\n      // Add step to named map\n      stepsMap.set(name, stepMeta);\n      // Inc number of steps\n      nSteps.current = nSteps.current + 1;\n      // Determine if we have initial goal and it just registered\n      let initialGoal = null;\n      let startingStep = null;\n\n      // There is no initial step so we start at first one\n      if (!initialStep) {\n        startingStep = steps[0].name;\n      }\n      // Otherwise we wait until our initial step has registered and then set our goal!\n      else if (initialStep && name === initialStep) {\n        initialGoal = initialStep;\n        startingStep = steps[0].name;\n      }\n      // console.log('WTF', name, initialGoal, startingStep);\n      // Update the state\n      setState(prev => {\n        if (!prev.current && startingStep) {\n          // Update the current step\n          currentStep.current = startingStep;\n        }\n        return {\n          ...prev,\n          steps,\n          goal: prev.goal || initialGoal,\n          current: prev.current || startingStep\n        };\n      });\n    };\n\n    const deregister = step => {\n      const stepMeta = stepsMap.get(step);\n      // Remove step at index\n      steps.splice(stepMeta.index, 1);\n      // Update indexes\n      steps.forEach((s, i) => (s.index = i));\n      // Remove step to named map\n      stepsMap.delete(step);\n      // Dec number of steps\n      nSteps.current = steps.length;\n      // console.log('WTF', name);\n      // Update the state\n      setState(prev => {\n        return {\n          ...prev,\n          steps\n        };\n      });\n    };\n\n    const getNextStep = () => {\n      // Get current step meta\n      const stepMeta = stepsMap.get(currentStep.current);\n\n      // Start searching from current step for a relevant next step\n      let nextStep;\n      for (let i = stepMeta.index + 1; i < steps.length; i++) {\n        // Potential next step\n        nextStep = steps[i];\n        // Check relevance\n        const formState = getFormState();\n        if (\n          nextStep.relevant\n            ? nextStep.relevant({ formState, formApi, scope })\n            : true\n        ) {\n          return nextStep.name;\n        }\n      }\n\n      // IF we get here there are not next steps so we return nothing\n      return undefined;\n    };\n\n    const getPreviousStep = () => {\n      // Get current step meta\n      const stepMeta = stepsMap.get(currentStep.current);\n\n      // Start searching from current step for a relevant next step\n      let previousStep;\n      for (let i = stepMeta.index - 1; i >= 0; i--) {\n        // Potential previous step\n        previousStep = steps[i];\n        // Check relevance\n        const formState = getFormState();\n        if (\n          previousStep.relevant\n            ? previousStep.relevant({ formState, formApi, scope })\n            : true\n        ) {\n          return previousStep.name;\n        }\n      }\n\n      // IF we get here there are no previous steps so we return nothing\n      return undefined;\n    };\n\n    // Helper function for next\n    const proceed = (nextStep, cb) => {\n      // Get the multistep state values\n      if (cb && typeof cb === 'function') {\n        const fieldState = getFieldState(currentStep.current);\n\n        // Simply making value --> values because it makes more sense in this context\n        const subState = {\n          ...fieldState,\n          values: fieldState.value,\n          errors: fieldState.error\n        };\n\n        cb(subState)\n          .then(() => {\n            // Update the current step\n            currentStep.current = nextStep;\n            // Update the state\n            setState(prev => {\n              return { ...prev, current: nextStep };\n            });\n          })\n          .catch(() => {\n            // TODO mayyybe do something here ??\n          });\n      } else {\n        // Update the current step\n        currentStep.current = nextStep;\n        // Update the state\n        setState(prev => {\n          return { ...prev, current: nextStep };\n        });\n      }\n    };\n\n    const next = cb => {\n      // Get the next step\n      const nextStep = getNextStep();\n      if (nextStep) {\n        // Touch all the fields\n        formApi.touchAllFields();\n        // Validate the form\n        validate();\n        // Async validate the form\n        // We pass in a callback to proceed if we succeed async validation!\n        asyncValidate(() => proceed(nextStep, cb));\n        // Only proceed if we are valid and we are NOT currently async validating\n        if (getFormState().valid && getFormState().validating === 0) {\n          proceed(nextStep, cb);\n        }\n      }\n    };\n\n    const previous = () => {\n      // Get the next step\n      const previousStep = getPreviousStep();\n\n      // Clean up all multistep errors\n      steps.forEach(step => {\n        formApi.clearError(step.name);\n      });\n\n      // Update the current step\n      if (previousStep) {\n        // Update the current step\n        currentStep.current = previousStep;\n        // Update the state\n        setState(prev => {\n          return { ...prev, current: previousStep };\n        });\n      }\n    };\n\n    const setCurrent = step => {\n      // Get current step meta\n      const goalIndex = stepsMap.get(step).index;\n      const currIndex = stepsMap.get(currentStep.current).index;\n\n      // If the goal is behind then just go straight there\n      if (goalIndex < currIndex) {\n        // Update the current step\n        currentStep.current = step;\n        // Update the state\n        setState(prev => {\n          return { ...prev, current: step };\n        });\n      }\n      // If the goal is ahead then start walking! ;)\n      else {\n        // Update the state\n        setState(prev => {\n          return { ...prev, goal: step };\n        });\n      }\n    };\n\n    const metGoal = () => {\n      // Update the state\n      setState(prev => {\n        return { ...prev, goal: null };\n      });\n    };\n\n    const getCurrentStep = () => {\n      return currentStep.current;\n    };\n\n    // ---------- Define the api ----------\n    const api = {\n      register,\n      deregister,\n      next,\n      previous,\n      getNextStep,\n      getPreviousStep,\n      setCurrent,\n      metGoal,\n      getCurrentStep\n    };\n\n    // Set the ref\n    if (multistepApiRef) {\n      multistepApiRef.current = api;\n    }\n\n    // return the api\n    return api;\n  }, []);\n\n  // Register for events when multistep relevance changes\n  useEffect(() => {\n    const listener = () => {\n      // Update the state\n      setState(prev => {\n        return {\n          ...prev,\n          nextStep: multistepApi.getNextStep(),\n          previousStep: multistepApi.getPreviousStep()\n        };\n      });\n    };\n\n    emitter.on('multistep-relevance', listener);\n\n    return () => {\n      emitter.removeListener('multistep-relevance', listener);\n    };\n  }, []);\n\n  // Also re evaluate when current changes\n  useEffect(\n    () => {\n      // Update the state\n      setState(prev => {\n        return {\n          ...prev,\n          nextStep: multistepApi.getNextStep(),\n          previousStep: multistepApi.getPreviousStep()\n        };\n      });\n    },\n    [multistepState.current]\n  );\n\n  // Render funtion that will provide state and api\n  const render = children => (\n    <MultistepApiContext.Provider value={multistepApi}>\n      <MultistepStateContext.Provider value={multistepState}>\n        {children}\n      </MultistepStateContext.Provider>\n    </MultistepApiContext.Provider>\n  );\n\n  return {\n    ...multistepApi,\n    ...multistepState,\n    render\n  };\n};\n\nexport { useMultistep };\n","import { useContext } from 'react';\nimport { MultistepApiContext } from '../Context';\n\nfunction useMultistepApi() {\n  return useContext(MultistepApiContext);\n}\n\nexport { useMultistepApi };\n","import { useContext } from 'react';\nimport { MultistepStateContext } from '../Context';\n\nfunction useMultistepState() {\n  return useContext(MultistepStateContext);\n}\n\nexport { useMultistepState };\n","import React, { useEffect } from 'react';\nimport { useMultistepState } from './useMultistepState';\nimport { useMultistepApi } from './useMultistepApi';\nimport { MultistepStepContext } from '../Context';\nimport { useRelevance } from './useRelevance';\nimport { Debug } from '../debug';\nimport { useFormController } from './useFormController';\nimport { Scope } from '../components/Scope';\n\nconst logger = Debug('informed:useMultistepStep' + '\\t');\n\nconst useMultistepStep = ({\n  step,\n  relevant,\n  keepState,\n  relevanceWhen = [],\n  relevanceDeps = []\n}) => {\n  const formController = useFormController();\n  const { current, goal } = useMultistepState();\n  const { register, deregister, next, metGoal } = useMultistepApi();\n\n  const active = step === current;\n\n  useEffect(() => {\n    register(step, {\n      name: step,\n      relevant\n    });\n  }, []);\n\n  const isRelevant = useRelevance({\n    name: step,\n    relevant,\n    relevanceWhen,\n    relevanceDeps\n  });\n\n  // Cleanup on irrelivant\n  useEffect(\n    () => {\n      if (!isRelevant && !keepState) {\n        logger('MULTISTEP RELEVNAT REMOVING', step);\n        formController.remove(step);\n      }\n      // We also need all steps to re evaluate if they have next and prev\n      formController.emitter.emit('multistep-relevance');\n    },\n    [isRelevant]\n  );\n\n  useEffect(\n    () => {\n      // if we are NOT at the goal go to the next step\n      if (goal && active && goal !== step) {\n        logger('GOAL', goal, 'STEP', step);\n        logger('GOING TO NEXT STEP');\n        next();\n      }\n      // If we have met our goal clear it\n      if (goal && active && goal === step) {\n        metGoal();\n      }\n    },\n    [goal, active]\n  );\n\n  useEffect(() => {\n    return () => {\n      logger('MULTISTEP REMOVING', step);\n      formController.remove(step);\n      deregister(step);\n    };\n  }, []);\n\n  const render = children => {\n    return (\n      <MultistepStepContext.Provider value={active}>\n        <Scope scope={step}>{active ? children : null}</Scope>\n      </MultistepStepContext.Provider>\n    );\n  };\n\n  return {\n    active,\n    step,\n    render,\n    relevant: isRelevant\n  };\n};\n\nexport { useMultistepStep };\n","import { useContext } from 'react';\nimport { RadioGroupContext } from '../Context';\n\nfunction useRadioGroup() {\n  return useContext(RadioGroupContext);\n}\n\nexport { useRadioGroup };\n","import { useContext, useEffect, useMemo, useRef } from 'react';\nimport { ScopeContext } from '../Context';\nimport { useFormController } from './useFormController';\nimport { useStateWithGetter } from './useStateWithGetter';\nimport { useFieldSubscription } from './useFieldSubscription';\nimport { Debug } from '../debug';\nconst logger = Debug('informed:useRelevance' + '\\t');\n\n/* ----------------------- useRelevance ----------------------- */\nexport const useRelevance = ({\n  name,\n  relevant,\n  relevanceWhen = [],\n  relevanceDeps = []\n}) => {\n  // Grab the form controller\n  const formController = useFormController();\n\n  // Get scope\n  const scope = useContext(ScopeContext);\n\n  // Need ref to scope because subscriptions will keep ref to it\n  const scopeRef = useRef(scope);\n  scopeRef.current = scope;\n\n  // Relevant state\n  const [isRelevant, setIsRelevant, getIsRelevant] = useStateWithGetter(() => {\n    if (relevant) {\n      return relevant({\n        formState: formController.getFormState(),\n        formApi: formController.getFormApi(),\n        scope,\n        relevanceDeps\n      });\n    }\n    return true;\n  });\n\n  const check = typeof relevanceWhen === 'function' ? [] : relevanceWhen;\n\n  const fields = useMemo(\n    () => {\n      if (typeof relevanceWhen === 'function') {\n        // Generate fields array with scope\n        // Example: relevanceWhen = scope => [`${scope}.foo`, `${scope}.bar`]\n        return relevanceWhen(scope);\n      }\n      // Example relevanceWhen = [\"name\", \"age\"]\n      return relevanceWhen;\n    },\n    [...check, scope]\n  );\n\n  // Example relevanceWhen = [\"name\", \"age\"]\n  useFieldSubscription(\n    'field-value',\n    fields,\n    target => {\n      logger(`re-evaluating relevance for ${name} because of ${target}`);\n      const rel = relevant({\n        formState: formController.getFormState(),\n        formApi: formController.getFormApi(),\n        scope: scopeRef.current,\n        relevanceDeps\n      });\n      // Only update if we changed\n      if (getIsRelevant() != rel) {\n        // console.log(\"UPDATING\", name, rel);\n        setIsRelevant(rel);\n      }\n    },\n    // Note: we pass false because we don't want this to be scoped!\n    // When the user explicitly uses a function!\n    !(typeof relevanceWhen === 'function')\n  );\n\n  // Register for ALL events if we have no relevanceWhen\n  useEffect(() => {\n    if (\n      relevant &&\n      typeof relevanceWhen !== 'function' &&\n      relevanceWhen.length === 0\n    ) {\n      // When we have a field update we always check\n      const listener = target => {\n        logger(`re-evaluating relevance for ${name} because of ${target}`);\n        const rel = relevant({\n          formState: formController.getFormState(),\n          formApi: formController.getFormApi(),\n          scope: scopeRef.current,\n          relevanceDeps\n        });\n        logger(\n          `re-evaluated relevance for ${name} because of ${target} and got ${rel}`\n        );\n        // Only update if we changed\n        if (getIsRelevant() != rel) {\n          // console.log(\"UPDATING\", name, rel);\n          logger(\n            `updating relevance for ${name} because of ${target} and got ${rel}`\n          );\n          setIsRelevant(rel);\n        }\n      };\n\n      formController.emitter.on('field', listener);\n\n      return () => {\n        // console.log(\"REMOVED LISTENER\", name);\n        formController.emitter.removeListener('field', listener);\n      };\n    }\n  }, []);\n\n  useEffect(\n    () => {\n      if (relevant) {\n        // When name changes we always check if relevant\n        setIsRelevant(\n          relevant({\n            formState: formController.getFormState(),\n            formApi: formController.getFormApi(),\n            scope,\n            relevanceDeps\n          })\n        );\n      }\n    },\n    [name, ...relevanceDeps]\n  );\n\n  return isRelevant;\n};\n","import { useContext } from 'react';\nimport { ScopeContext } from '../Context';\n\n/* ----------------------- useScope ----------------------- */\nexport function useScope(name) {\n  const scope = useContext(ScopeContext);\n\n  // Example\n  // scope = \"friends[0]\"\n  // name  = \"friends[0]\"\n  // return \"friends[0]\"\n  if (scope === name) {\n    return name;\n  }\n\n  // Example\n  // scope = \"friends[0]\"\n  // name  = \"name\"\n  // return \"friends[0].name\"\n  if (scope && name) {\n    return `${scope}.${name}`;\n  }\n  return name;\n}\n","// eslint-disable-next-line no-unused-vars\nimport { useMemo } from 'react';\nimport { useFormApi } from './useFormApi';\n\nconst buildScopedFormApi = (scope, formApi) => {\n  return {\n    getValue: field => formApi.getValue(`${scope}.${field}`),\n    setValue: (field, value, e, key) =>\n      formApi.setValue(`${scope}.${field}`, value, e, key),\n    getTouched: field => formApi.getTouched(`${scope}.${field}`),\n    setTouched: (field, value) =>\n      formApi.setTouched(`${scope}.${field}`, value),\n    getFocused: field => formApi.getFocused(`${scope}.${field}`),\n    setFocused: (field, value) =>\n      formApi.setFocused(`${scope}.${field}`, value),\n    getError: field => formApi.getError(`${scope}.${field}`),\n    setError: (field, value) => formApi.setError(`${scope}.${field}`, value),\n    getData: field => formApi.getData(`${scope}.${field}`),\n    getModified: field => formApi.getModified(`${scope}.${field}`),\n    resetField: field => formApi.resetField(`${scope}.${field}`),\n    validate: field => formApi.validate(`${scope}.${field}`),\n    getDirty: field => formApi.getDirty(`${scope}.${field}`),\n    getPristine: field => formApi.getPristine(`${scope}.${field}`),\n    getMaskedValue: field => formApi.getMaskedValue(`${scope}.${field}`),\n    clearValue: field => formApi.clearValue(`${scope}.${field}`),\n    clearError: field => formApi.clearError(`${scope}.${field}`)\n  };\n};\n\nfunction useScopedApi(scope) {\n  const formApi = useFormApi();\n\n  // VERY important to memoize the builder!\n  const scopedFormApi = useMemo(() => buildScopedFormApi(scope, formApi), [\n    scope\n  ]);\n\n  return scopedFormApi;\n}\n\nexport { useScopedApi };\n","import { useCallback, useContext } from 'react';\nimport { ScopeContext } from '../Context';\n\n/* ----------------------- useScoper ----------------------- */\n// This hook will return a scoper function!\nexport function useScoper() {\n  const scope = useContext(ScopeContext);\n\n  const scoper = useCallback(\n    name => {\n      // Example\n      // scope = \"friends[0]\"\n      // name  = \"friends[0]\"\n      // return \"friends[0]\"\n      if (scope === name) {\n        return name;\n      }\n\n      // Example\n      // scope = \"friends[0]\"\n      // name  = \"name\"\n      // return \"friends[0].name\"\n      if (scope && name) {\n        return `${scope}.${name}`;\n      }\n      return name;\n    },\n    [scope]\n  );\n\n  return scoper;\n}\n","import { useState, useRef } from 'react';\nimport { useEffectOnce } from './useEffectOnce';\n\n// TODO figure out if this is bad?\n// https://github.com/facebook/react/issues/14543\nfunction useStateWithGetter(initial) {\n  const ref = useRef();\n  const mounted = useRef(true);\n  const [state, setState] = useState(initial);\n  ref.current = state;\n  const set = value => {\n    ref.current = value;\n    if (mounted.current) setState(value);\n  };\n  const get = () => {\n    return ref.current;\n  };\n  useEffectOnce(() => {\n    return () => {\n      mounted.current = false;\n    };\n  }, []);\n  return [state, set, get];\n}\n\nexport { useStateWithGetter };\n","import { useRef, useEffect } from 'react';\n\n// https://reactjs.org/docs/hooks-faq.html#can-i-run-an-effect-only-on-updates\n\n/**\n *\n * Acts as a react useEffect that does not run on first render.\n *\n * @example\n * useUpdateEffect(()=>{...}, [foo])\n * 1st Render: NO CALL\n * foo changes: GETS CALLED\n *\n */\nconst useUpdateEffect = (effect, deps) => {\n  const firstRef = useRef(true);\n  const isFirstMount = firstRef.current;\n  useEffect(() => {\n    if (!isFirstMount) {\n      return effect();\n    } else {\n      firstRef.current = false;\n    }\n  }, deps);\n};\n\nexport { useUpdateEffect };\n","import { ArrayField } from './components/ArrayField';\nimport { Debug } from './components/Debug';\nimport { DebugField } from './components/DebugField';\nimport { Relevant } from './components/Relevant';\nimport { Scope } from './components/Scope';\nimport { Form } from './components/Form';\nimport { FormProvider } from './components/FormProvider';\nimport { Input } from './components/form-fields/Input';\nimport { Checkbox } from './components/form-fields/Checkbox';\nimport { Select } from './components/form-fields/Select';\nimport { Option } from './components/form-fields/Option';\nimport { Radio } from './components/form-fields/Radio';\nimport { RadioGroup } from './components/form-fields/RadioGroup';\nimport { TextArea } from './components/form-fields/TextArea';\nimport { SchemaFields } from './components/SchemaFields';\nimport { FormField } from './components/FormField';\nimport { FormComponents } from './components/FormComponents';\nimport { FormFields } from './components/FormFields';\nimport { Multistep } from './components/Multistep';\nimport { Informed } from './components/Informed';\n\nimport { FormStateAccessor } from './components/FormStateAccessor';\n\nimport { useForm } from './hooks/useForm';\nimport { useField } from './hooks/useField';\nimport { useFieldApi } from './hooks/useFieldApi';\nimport { useFieldState } from './hooks/useFieldState';\nimport { useFormApi } from './hooks/useFormApi';\nimport { useFormState } from './hooks/useFormState';\nimport { useFormStateSelector } from './hooks/useFormStateSelector';\nimport { useArrayField } from './hooks/useArrayField';\nimport { useCursorPosition } from './hooks/useCursorPosition';\nimport { useArrayFieldApi } from './hooks/useArrayFieldApi';\nimport { useArrayFieldState } from './hooks/useArrayFieldState';\nimport { useArrayFieldItemApi } from './hooks/useArrayFieldItemApi';\nimport { useArrayFieldItemState } from './hooks/useArrayFieldItemState';\nimport { useMultistepApi } from './hooks/useMultistepApi';\nimport { useMultistepState } from './hooks/useMultistepState';\nimport { useScope } from './hooks/useScope';\nimport { useScoper } from './hooks/useScoper';\nimport { useRelevance } from './hooks/useRelevance';\nimport { useConditional } from './hooks/useConditional';\nimport { useInformed } from './hooks/useInformed';\nimport { useInformedApi } from './hooks/useInformedApi';\nimport { useInformedState } from './hooks/useInformedState';\nimport { useInformedField } from './hooks/useInformedField';\n\nimport * as utils from './utils';\nimport { Elon } from './utils';\n\nexport {\n  useForm,\n  useField,\n  useFieldApi,\n  useFieldState,\n  useFormApi,\n  useFormState,\n  useFormStateSelector,\n  useCursorPosition,\n  useArrayFieldState,\n  useArrayFieldApi,\n  useArrayFieldItemApi,\n  useArrayFieldItemState,\n  useMultistepApi,\n  useMultistepState,\n  useInformedState,\n  useInformedField,\n  useInformedApi,\n  useInformed,\n  useScope,\n  useScoper,\n  useRelevance,\n  useConditional,\n  ArrayField,\n  useArrayField,\n  Debug,\n  DebugField,\n  Relevant,\n  Form,\n  FormProvider,\n  Input,\n  Select,\n  Option,\n  Checkbox,\n  RadioGroup,\n  Radio,\n  TextArea,\n  utils,\n  FormStateAccessor,\n  Scope,\n  SchemaFields,\n  FormField,\n  FormComponents,\n  FormFields,\n  Multistep,\n  Elon,\n  Informed\n};\n","import { ObjectMap } from './ObjectMap';\n\nconst OWN_KEYS_SYMBOL = Symbol('own keys');\nconst ORIG_SYMBOL = Symbol('original object');\n\nconst PROXY = 'p';\nconst AFFECTED = 'a';\nconst CACHE = 'c';\n\nconst getProto = Object.getPrototypeOf;\nconst objectsToTrack = new WeakMap();\n\nfunction shouldTrack(obj) {\n  if (objectsToTrack.has(obj)) {\n    return objectsToTrack.get(obj);\n  }\n\n  return (\n    obj &&\n    (getProto(obj) === Object.prototype || getProto(obj) === Array.prototype)\n  );\n}\n\nfunction isObject(obj) {\n  return typeof obj === 'object' && obj !== null;\n}\n\nfunction isOwnKeysChanged(origObj, nextObj) {\n  const origKeys = Reflect.ownKeys(origObj);\n  const nextKeys = Reflect.ownKeys(nextObj);\n\n  return (\n    origKeys.length !== nextKeys.length ||\n    origKeys.some((k, i) => k !== nextKeys[i])\n  );\n}\n\nexport function createProxyHandler(origObj) {\n  function recordUsage(h, key) {\n    let used = h[AFFECTED].get(origObj);\n\n    if (!used) {\n      used = new Set();\n      h[AFFECTED].set(origObj, used);\n    }\n\n    used.add(key);\n  }\n\n  return {\n    get(target, key) {\n      if (key === ORIG_SYMBOL) {\n        return origObj;\n      }\n\n      if (key === 'toJSON') {\n        return function toJSON() {\n          return target;\n        };\n      }\n\n      let usedKey = key;\n      let value = target[String(key)];\n\n      // special access for path keys\n      if (\n        typeof key === 'string' &&\n        key.indexOf('.') !== -1 &&\n        !(key in target)\n      ) {\n        value = ObjectMap.get(target, key) ?? value;\n        usedKey = `$key:${key}`;\n      }\n\n      recordUsage(this, usedKey);\n\n      return createDeepProxy(value, this[AFFECTED], this[CACHE]);\n    },\n    has(target, key) {\n      recordUsage(this, key);\n\n      return key in target;\n    },\n    ownKeys(target) {\n      recordUsage(this, OWN_KEYS_SYMBOL);\n\n      return Reflect.ownKeys(target);\n    }\n  };\n}\n\nexport function createDeepProxy(target, affected, cache) {\n  if (!shouldTrack(target)) return target;\n\n  let proxyHandler = cache.get(target);\n  if (!proxyHandler) {\n    proxyHandler = createProxyHandler(target);\n    proxyHandler[PROXY] = new Proxy(target, proxyHandler);\n    cache.set(target, proxyHandler);\n  }\n\n  proxyHandler[AFFECTED] = affected;\n  proxyHandler[CACHE] = cache;\n\n  return proxyHandler[PROXY];\n}\n\nfunction equal(a, b) {\n  if (a === b) return true;\n\n  if (a && b && typeof a == 'object' && typeof b == 'object') {\n    if (a.constructor !== b.constructor) return false;\n\n    let length, i, keys;\n    if (Array.isArray(a)) {\n      length = a.length;\n      if (length != b.length) return false;\n      for (i = length; i-- !== 0; ) if (!equal(a[i], b[i])) return false;\n      return true;\n    }\n\n    if (a.valueOf !== Object.prototype.valueOf)\n      return a.valueOf() === b.valueOf();\n    if (a.toString !== Object.prototype.toString)\n      return a.toString() === b.toString();\n\n    keys = Object.keys(a);\n    length = keys.length;\n    if (length !== Object.keys(b).length) return false;\n\n    for (i = length; i-- !== 0; )\n      if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;\n  }\n\n  return a !== a && b !== b;\n}\n\nexport function isDeepChanged(origObj, nextObj, affected) {\n  if (Object.is(origObj, nextObj) && !isObject(origObj)) {\n    return false;\n  }\n\n  if (!isObject(origObj) || !isObject(nextObj)) {\n    return true;\n  }\n\n  const used = affected.get(origObj);\n\n  if (!used) {\n    return true;\n  }\n\n  for (const key of used) {\n    let isChanged =\n      key === OWN_KEYS_SYMBOL\n        ? isOwnKeysChanged(origObj, nextObj)\n        : isDeepChanged(origObj[key], nextObj[key], affected);\n\n    if (typeof key === 'string' && /^\\$key:/.test(key)) {\n      const parsedKey = key.replace(/^\\$key:/, '');\n      const origValue = ObjectMap.get(origObj, parsedKey);\n      const nextValue = ObjectMap.get(nextObj, parsedKey);\n\n      isChanged = !equal(origValue, nextValue);\n    }\n\n    if (isChanged) {\n      return isChanged;\n    }\n  }\n\n  return false;\n}\n\nexport function unwrap(obj) {\n  if (!shouldTrack(obj)) return obj;\n\n  return ORIG_SYMBOL in obj ? obj[ORIG_SYMBOL] : obj;\n}\n","// fallback for browsers that don't support `structuredClone` yet\n// this comes with some limitations in what can be cloned, but this should be fine for most use cases\n// `structuredClone` can also be polyfilled using https://www.npmjs.com/package/@ungap/structured-clone\nconst structuredCloneShim =\n  typeof structuredClone === 'function'\n    ? structuredClone\n    : obj => JSON.parse(JSON.stringify(obj));\n\nexport { structuredCloneShim as structuredClone };\n","import { ObjectMap } from './ObjectMap';\nimport { Debug } from './debug';\nconst debug = Debug('informed:utils' + '\\t');\n\n// https://stackoverflow.com/questions/105034/create-guid-uuid-in-javascript\nexport const uuidv4 = () => {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n    var r = (Math.random() * 16) | 0,\n      v = c == 'x' ? r : (r & 0x3) | 0x8;\n    return v.toString(16);\n  });\n};\n\nexport const getParentPath = name => {\n  // Example friends >>>> friends\n  // Example father.name >>>> father\n  // Example friends[0] >>>> friends\n  // Example friends[0].father.name >>>> friends[0].father\n  // Example friends[0].father.siblings[1].name >>>> friends[0].father.siblings[1]\n  const parentArrayPath = name.replace(/(.*)[.[].*/, '$1');\n\n  return parentArrayPath;\n};\n\nexport function debounceByName(func, timeout = 300) {\n  let timers = {};\n  return (...args) => {\n    const name = args[0];\n    clearTimeout(timers[name]);\n    // console.log('CLEARING', name);\n    timers[name] = setTimeout(() => {\n      // console.log('APPLYING', name);\n      func.apply(this, args);\n    }, timeout);\n  };\n}\n\nexport function debounce(func, timeout = 300) {\n  let timer;\n  return (...args) => {\n    clearTimeout(timer);\n    timer = setTimeout(() => {\n      func.apply(this, args);\n    }, timeout);\n  };\n}\n\n// Example debounce\n// function saveInput(){\n//   console.log('Saving data');\n// }\n// const processChange = debounce(() => saveInput());\n\n// Elon -----------\nexport class Elon {\n  // Static functions\n  static inspect(validators) {\n    // Create validation funciton\n    return (value, values) => {\n      for (let i = 0; i < validators.length; i++) {\n        // get validator\n        const validator = validators[i];\n        // call validator\n        const res = validator(value, values);\n        // If we have error return it ( exit early )\n        if (res) return res;\n      }\n    };\n  }\n}\n\n// Is Child\nexport const isChild = (parent, child) => {\n  // console.log(\n  //   'PARENT',\n  //   parent,\n  //   'CHILD',\n  //   child,\n  //   'RES',\n  //   child.slice(0, parent.length) === parent\n  // );\n\n  // Example1\n  // parent = \"friends[1]\"\n  // child = \"friends[1].foo\"\n  // child.startsWith(`${parent}.`)\n  // \"friends[1].foo\".startsWith(\"friends[1]\")\n  // ==> true\n\n  // Example2\n  // parent = \"friends[1].foo.friends[1]\"\n  // child = \"friends[1].foo\"\n  // child.startsWith(`${parent}.`)\n  // \"friends[1].foo\".startsWith(\"friends[1].foo.friends[1]\")\n  // ==> false\n\n  return child.startsWith(`${parent}.`);\n};\n\nexport const generateOnChange = ({ fieldType, setValue, multiple, ref }) => {\n  let setter = e => setValue(e);\n\n  if (\n    fieldType === 'text' ||\n    fieldType === 'textArea' ||\n    fieldType === 'number'\n  ) {\n    setter = e => {\n      setValue(e.target.value, e);\n    };\n  }\n\n  if (fieldType === 'select') {\n    setter = e => {\n      let selected = Array.from(ref.current)\n        .filter(option => option.selected)\n        .map(option => option.value);\n\n      setValue(multiple ? selected : selected[0] || '', e);\n    };\n  }\n\n  if (fieldType === 'checkbox') {\n    setter = e => {\n      setValue(e.target.checked, e);\n    };\n  }\n\n  return e => {\n    setter(e);\n  };\n};\n\nexport const generateOnBlur = ({ setTouched }) => {\n  return e => {\n    setTouched(true, e);\n  };\n};\n\nexport const generateOnFocus = ({ setFocused }) => {\n  return e => {\n    setFocused(true, e);\n  };\n};\n\nexport const generateValue = ({ fieldType, maskedValue, multiple, value }) => {\n  switch (fieldType) {\n    case 'text':\n    case 'number':\n      return !maskedValue && maskedValue !== 0 ? '' : maskedValue;\n    case 'textArea':\n      return !maskedValue ? '' : maskedValue;\n    case 'select':\n      return value || (multiple ? [] : '');\n    case 'checkbox':\n      return !!value;\n    default:\n      return value;\n  }\n};\n\n// https://stackoverflow.com/questions/52367849/remove-empty-null-values-from-nested-object-es6-clean-nested-objects\nexport const sanitize = obj => {\n  if (!obj) return obj;\n  Object.keys(obj).forEach(\n    key =>\n      (obj[key] && typeof obj[key] === 'object' && sanitize(obj[key])) ||\n      (obj[key] === undefined && delete obj[key])\n  );\n  return obj;\n};\n\n/* -------------------------- Error Utils ----------------------------- */\n\nexport const yupToFormErrors = yupError => {\n  const errors = {};\n  if (yupError.inner) {\n    if (yupError.inner.length === 0) {\n      // console.log(yupError.path);\n      ObjectMap.set(errors, yupError.path, yupError.message);\n      return;\n    }\n    for (let err of yupError.inner) {\n      if (!ObjectMap.get(errors, err.path)) {\n        // console.log(errors, err.path, err.message);\n        ObjectMap.set(errors, err.path, err.message);\n      }\n    }\n  }\n  return errors;\n};\n\nexport const validateYupSchema = (schema, values) => {\n  try {\n    schema.validateSync(values, { abortEarly: false });\n  } catch (e) {\n    const formErrors = yupToFormErrors(e);\n    return formErrors;\n  }\n};\n\nexport const yupToFormError = yupError => {\n  if (yupError.inner) {\n    if (yupError.inner.length === 0) {\n      return;\n    }\n    const err = yupError.inner[0];\n    return err.message;\n  }\n};\n\nexport const validateYupField = (schema, value) => {\n  try {\n    schema.validateSync(value, { abortEarly: false });\n  } catch (e) {\n    return yupToFormError(e);\n  }\n};\n\nexport const validateAjvSchema = (validate, data) => {\n  validate(data);\n  const errors = {};\n  if (validate.errors) {\n    validate.errors.forEach(({ message, dataPath, keyword, params }) => {\n      let path = dataPath;\n\n      // Special case for required\n      if (keyword === 'required') {\n        path = `${path}.${params.missingProperty}`;\n      }\n\n      // Get rid of leading dot\n      path = path.replace('.', '');\n      // console.log('PATH', path, message);\n      // TODO get message from informed if present\n      ObjectMap.set(errors, path, message);\n    });\n  }\n  return errors;\n};\n\nexport const validateRequired = (value, required, getErrorMessage) => {\n  if (required && (value == null || value === '')) {\n    return typeof required === 'string'\n      ? required\n      : getErrorMessage('required') || 'This field is required';\n  }\n};\n\nexport const validateMax = (value, max, getErrorMessage) => {\n  if (max != null && value > max) {\n    return (\n      getErrorMessage('maximum') || `This field should NOT be more than ${max}`\n    );\n  }\n\n  return undefined;\n};\n\nexport const validateMin = (value, min, getErrorMessage) => {\n  if (min != null && value < min) {\n    return (\n      getErrorMessage('minimum') || `This field should NOT be less than ${min}`\n    );\n  }\n\n  return undefined;\n};\n\nexport const validateMaxLength = (value, maxLength, getErrorMessage) => {\n  if (maxLength != null && value?.length > maxLength) {\n    return (\n      getErrorMessage('maxLength') ||\n      `This field should NOT be more than ${maxLength} characters`\n    );\n  }\n  return undefined;\n};\n\nexport const validateMinLength = (value, minLength, getErrorMessage) => {\n  if (minLength != null && value?.length < minLength) {\n    return (\n      getErrorMessage('minLength') ||\n      `This field should NOT be shorter than ${minLength} characters`\n    );\n  }\n  return undefined;\n};\n\nconst validatePattern = (value, pattern, getErrorMessage) => {\n  if (pattern != null && !new RegExp(pattern).test(value) && value) {\n    return (\n      getErrorMessage('pattern') ||\n      `This field should match pattern \"${pattern}\";`\n    );\n  }\n\n  return undefined;\n};\n\nexport const generateValidationFunction = (\n  validationFunc,\n  yupSchema,\n  {\n    required,\n    minimum,\n    maximum,\n    minLength,\n    maxLength,\n    pattern,\n    getErrorMessage,\n    validateModified,\n    fieldApi,\n    formController,\n    scope\n  }\n) => (val, values) => {\n  let error;\n\n  if (validateModified && fieldApi.getModified() === undefined) {\n    return;\n  }\n\n  if (required) {\n    error = validateRequired(val, required, getErrorMessage);\n    if (error !== undefined) return error;\n  }\n  if (minimum != null) {\n    error = validateMin(val, minimum, getErrorMessage);\n    if (error !== undefined) return error;\n  }\n  if (maximum != null) {\n    error = validateMax(val, maximum, getErrorMessage);\n    if (error !== undefined) return error;\n  }\n  if (minLength != null) {\n    error = validateMinLength(val, minLength, getErrorMessage);\n    if (error !== undefined) return error;\n  }\n  if (maxLength != null) {\n    error = validateMaxLength(val, maxLength, getErrorMessage);\n    if (error !== undefined) return error;\n  }\n  if (pattern) {\n    error = validatePattern(val, pattern, getErrorMessage);\n    if (error !== undefined) return error;\n  }\n  if (yupSchema) {\n    error = validateYupField(yupSchema, val);\n    if (error !== undefined) return error;\n  }\n  if (validationFunc) {\n    error = validationFunc(val, values, {\n      formState: formController.getFormState(),\n      formApi: formController.getFormApi(),\n      scope\n    });\n    if (error !== undefined) return error;\n  }\n\n  return error;\n};\n\n/** --------------------------------------------------------------------------------------------\n * Helper function for getFormatter\n * @param {*} formatter\n * @returns\n */\nconst formatterFromString = formatter => {\n  return formatter.split('').map(char => {\n    if (char === '#') {\n      return /\\d/;\n    }\n\n    if (char === '*') {\n      return /[\\w]/;\n    }\n\n    return char;\n  });\n};\n\n/* -------------------------- Formatter ----------------------------- */\n\nconst getFormatter = (formatter, value, full) => {\n  // If mask is a string turn it into an array;\n  if (typeof formatter === 'string') {\n    return formatterFromString(formatter);\n  }\n\n  // If mask is a function use it to genreate current mask\n  if (typeof formatter === 'function') {\n    const frmtr = formatter(value, full);\n\n    if (typeof frmtr === 'string') {\n      return formatterFromString(frmtr);\n    }\n    return frmtr;\n  }\n\n  if (Array.isArray(formatter)) {\n    return formatter;\n  }\n\n  // Should never make it here throw\n  throw new Error('Formatter must be string, array, or function');\n};\n\nconst matchingIndex = (a, b) => {\n  let i = 0;\n  let mi = -1;\n  let matching = true;\n  // a = \"+1 \"\n  // b = \"+12\"\n  while (matching && i < a.length) {\n    if (a[i] == b[i]) {\n      mi = i;\n    } else {\n      matching = false;\n    }\n\n    i = i + 1;\n  }\n\n  return mi;\n};\n\nexport const informedParse = (val, parser) => {\n  // Our parser is an object! so we must parse for each key\n  // Example:\n  //\n  // formatter: {\n  //   a: formatter,\n  //   b: formatter\n  // }\n  if (typeof parser === 'object' && !Array.isArray(parser)) {\n    const parsedVal = {};\n    Object.keys(val).forEach(key => {\n      // parser['foo'] = val['foo']\n      // Only try to parse if we have parser for this key!!!\n      if (parser[key]) {\n        const value = parser[key](val[key]);\n        parsedVal[key] = value;\n      } else {\n        parsedVal[key] = val[key];\n      }\n    });\n    return parsedVal;\n  }\n  // Simply pass along if its a flat formatter\n  return parser(val);\n};\n\nexport const informedFormat = (val, frmtr, old) => {\n  // Our formatter is an object! so we must format for each key\n  // Example:\n  //\n  // formatter: {\n  //   a: formatter,\n  //   b: formatter\n  // }\n  if (typeof frmtr === 'object' && !Array.isArray(frmtr)) {\n    const formattedVal = {};\n    const formattedOffset = {};\n    Object.keys(val).forEach(key => {\n      // Only try to format if we have formatter for this key!!!\n      if (frmtr[key]) {\n        // console.log('Old', old);\n        const { value, offset } = informedFormatter(\n          val[key],\n          frmtr[key],\n          old ? old[val] : undefined,\n          val\n        );\n        formattedVal[key] = value;\n        formattedOffset[key] = offset;\n      } else {\n        formattedVal[key] = val[key];\n        formattedOffset[key] = 0;\n      }\n    });\n    return {\n      value: formattedVal,\n      offset: formattedOffset\n    };\n  }\n  // Simply pass along if its a flat formatter\n  return informedFormatter(val, frmtr, old, val);\n};\n\nexport const informedFormatter = (val, frmtr, old, full) => {\n  // console.log('Formatting', val);\n  debug('Formatting', val);\n  debug('Full Value', full);\n\n  // Null check\n  if (!val) {\n    return {\n      value: val,\n      offset: 0\n    };\n  }\n\n  const value = `${val}`;\n\n  // Generate formatter array\n  const formatter = getFormatter(frmtr, value, full);\n\n  // Start to fill in the array\n  // Example: phone formatter\n  // formatter =['+', '1', ' ', /\\d/, /\\d/, /\\d/, '-', /\\d/, /\\d/, /\\d/, '-', /\\d/, /\\d/, /\\d/, /\\d/]\n  // value examples:\n  // \"1231231234 ----> +1 123-123-1234\n  // \"+\" \t\t\t\t ----> +\n  // \"+1\" \t\t\t ----> +1\n  // \"+2\"\t\t\t\t ----> +1 2\n  // \"1\"\t\t\t\t ----> +1 1\n  // \"1234\"\t\t\t ----> +1 123-4\n  // \"123a\"      ----> +1 123\n\n  // console.log('New', value);\n  // console.log('Old', old);\n  // console.log('Formatter', formatter);\n\n  // Determine prefix length and suffix start\n  const prefixLength = formatter.findIndex(v => typeof v != 'string');\n  const suffixStart =\n    formatter.length -\n    [...formatter].reverse().findIndex(v => typeof v != 'string');\n\n  // Formatted value\n  let formatted = [];\n\n  // The characters from the current value\n  const chars = value.split('');\n\n  // To track the value index during itteration\n  let vIndex = 0;\n\n  let start = 0;\n\n  // If the value matches part of the prefix take it out\n  // Example prefix = \"+1 \" value = [\"+1 123-123-1234\", \"+12\", \"+2\"]\n  const matchIndex = matchingIndex(\n    formatter.slice(0, prefixLength),\n    chars.slice(0, prefixLength)\n  );\n  // console.log('Matching index', matchIndex);\n  if (matchIndex > -1) {\n    //vIndex = prefixLength;\n    vIndex = matchIndex + 1;\n    formatted = formatted.concat(formatter.slice(0, matchIndex + 1));\n    start = matchIndex + 1;\n  }\n  // Example prefix = \"+1 \" value=[\"1\", \"1234\"]\n  if (matchIndex < 0) {\n    // Start past the prefix\n    formatted = formatted.concat(formatter.slice(0, prefixLength));\n    start = prefixLength;\n  }\n\n  // console.log('start', start, formatted);\n  // console.log('PREFIX_LENGTHT', prefixLength);\n  // console.log('SUFIX_START', suffixStart);\n  // console.log('FORMATTER_LENGTH', formatter.length);\n\n  // To track if we have made it past the prefix\n  let pastPrefix = false;\n\n  // Fill in the stuff\n  for (let i = start; i < formatter.length; i++) {\n    // Get current formatter location matcher\n    const matcher = formatter[i];\n\n    // We get past the prefix if matcher is not a string\n    if (!pastPrefix && typeof matcher != 'string') {\n      pastPrefix = true;\n    }\n\n    // Chec to see if there is more value to look at\n    if (vIndex != chars.length) {\n      // Get the current value character\n      const curChar = chars[vIndex];\n\n      // Special case for function\n      if (typeof matcher === 'function') {\n        formatted.push(matcher(curChar));\n        vIndex = vIndex + 1;\n      } else {\n        // If type is string normal compare otherwise regex compare\n        const match =\n          typeof matcher === 'string'\n            ? matcher === curChar\n            : matcher.test(curChar);\n\n        // If the current character of the value matches and matcher is a string\n        // \"1\" === \"1\"\n        if (match && typeof matcher === 'string') {\n          formatted.push(matcher);\n          //if( pastPrefix ){\n          vIndex = vIndex + 1;\n          //}\n        }\n        // If the current character does not match and matcher is a stirng\n        // \"1\" != \"+\"\n        else if (!match && typeof matcher === 'string') {\n          // Special check for 123a ---> dont want \"+1 123-\"\n          // Special check for 1234 ---> DO want \"+1 123-4\"\n          if (vIndex != chars.length) formatted.push(matcher);\n        }\n        // If the current character matches and the matcher is not a string\n        // /\\d/.test(\"2\")\n        else if (match && typeof matcher != 'string') {\n          formatted.push(curChar);\n          vIndex = vIndex + 1;\n        }\n        // If the current character does NOT match and the matecer is regex\n        // /\\d/.test(\"a\")\n        else if (!match && typeof matcher != 'string') {\n          // Throw out this value\n          vIndex = vIndex + 1;\n          i = i - 1;\n        }\n      }\n    } else {\n      // If mattcher is a string and we are at suffix keep going\n      if (typeof matcher === 'string' && i >= suffixStart) {\n        formatted.push(matcher);\n      } else {\n        // Otherwise we want to break out\n        break;\n      }\n    }\n  }\n\n  // console.log('FORMATTEDARR', formatted);\n  // console.log('VALUE', value, value.length);\n  let formattedString = formatted.join('');\n  // console.log('FORMATTED', formattedString, formattedString.length);\n\n  let offset = value ? formattedString.length - value.length : 0;\n\n  // console.log('OFFSET', offset);\n\n  // Special case,\n  // Suffix is '-'\n  // user typed backspace\n  // +1 123-123-1234-|\n  // +1 123-123-1234|-\n  //                ^\n  //           suffixStart (15)\n  // New: +1 123-123-1234\n  // Old: +1 123-123-1234-\n  //\n  // New length is less than old length\n  // And length of new is greater than or equal two suffix start\n  if (\n    value &&\n    old &&\n    value.length < old.length &&\n    value.length >= suffixStart\n  ) {\n    offset = 0;\n    // console.log('OFFSET OVERRIDE', offset);\n    // Special case, we want to diable keeping suffix on backspace in react native\n    if (\n      typeof navigator !== 'undefined' &&\n      navigator.product === 'ReactNative'\n    ) {\n      // I'm in react-native\n      formattedString = formattedString.slice(0, suffixStart);\n    }\n  }\n\n  return {\n    value: formattedString,\n    offset\n  };\n};\n\n/* --------------------------------------- createIntlNumberFormatter --------------------------------------- */\n\nexport const createIntlNumberFormatter = (locale, opts = {}) => {\n  const numberFormatter = new Intl.NumberFormat(locale, opts);\n  const numberFormatterWithoutOpts = new Intl.NumberFormat(locale, opts);\n  const decimalChar =\n    numberFormatterWithoutOpts\n      .formatToParts(0.1)\n      .find(({ type }) => type === 'decimal')?.value ?? '.';\n\n  // console.log('-1 number parts', numberFormatter.formatToParts(-1));\n\n  // Try to find minus sign\n  let minusChar = numberFormatter\n    .formatToParts(-1)\n    .find(({ type }) => type === 'minusSign')?.value;\n\n  // special case if we did not find it then look one more time but for a literal ( accounting will lead to this case where \"(\" is neg symbol )\n  if (!minusChar) {\n    minusChar =\n      numberFormatter.formatToParts(-1).find(({ type }) => {\n        return type === 'literal';\n      })?.value ?? '-';\n  }\n\n  function isRegexEqual(x, y) {\n    return (\n      x instanceof RegExp &&\n      y instanceof RegExp &&\n      x.source === y.source &&\n      x.global === y.global &&\n      x.ignoreCase === y.ignoreCase &&\n      x.multiline === y.multiline\n    );\n  }\n\n  function findLastIndex(arr, predicate) {\n    let l = arr.length;\n    // eslint-disable-next-line no-plusplus\n    while (l--) {\n      if (predicate(arr[l])) return l;\n    }\n    return -1;\n  }\n\n  function insert(arr, index, value) {\n    const nextArr = [...arr];\n\n    if (Array.isArray(value)) {\n      nextArr.splice(index, 0, ...value);\n    } else {\n      nextArr.splice(index, 0, value);\n    }\n\n    return nextArr;\n  }\n\n  function stripNonNumeric(str) {\n    return `${str}`.replace(/\\D/g, '');\n  }\n\n  function toNumberString(str, decimalChar = '.') {\n    // Special case if user types the decimal char\n    if (str === decimalChar) {\n      return '';\n    }\n\n    // If its a number we always use dot notation\n    if (typeof str === 'number') {\n      return `${str}`\n        .split('.')\n        .map(splitStr => stripNonNumeric(splitStr))\n        .join('.');\n    }\n\n    return `${str}`\n      .split(decimalChar)\n      .map(splitStr => stripNonNumeric(splitStr))\n      .join('.');\n  }\n\n  function toFloat(str, decimalChar = '.') {\n    if (typeof str === 'number') {\n      return str;\n    }\n\n    const float = parseFloat(toNumberString(str, decimalChar));\n\n    // console.log('ISNAN', Number.isNaN(float));\n    return !Number.isNaN(float) ? float : undefined;\n  }\n\n  function mask(value, ogValue) {\n    // console.log('--------------\\n');\n\n    // value = -3000.25\n    // console.log('decChar', decimalChar);\n    // console.log('minusChar', minusChar);\n    // console.log('VAL', value);\n\n    const isNegative =\n      `${value}`.includes(minusChar) || `${value}`.includes('-');\n\n    // In case the value is a number from initial value we want to pass the OG value ( not the one we turned into a string in informedFormatter )\n    const float = toNumberString(ogValue, decimalChar);\n\n    // float = 3000.25\n    // console.log('float', float);\n\n    const fraction = `${float}`.split('.')[1];\n\n    // fraction = 25\n    // console.log('fraction', fraction);\n\n    const number = isNegative ? -Number(float) : Number(float);\n\n    const numberParts = numberFormatter.formatToParts(number);\n\n    // Special case, if number parts does not contain a \"decimal\" than we want to throw out the decimal from the value\n    const hasDecimal = numberParts.find(part => part.type === 'decimal');\n\n    // number-parts =\n    // 0: {type: 'minusSign', value: '-'}\n    // 1: {type: 'currency', value: '$'}\n    // 2: {type: 'integer', value: '3'}\n    // 3: {type: 'group', value: ','}\n    // 4: {type: 'integer', value: '000'}\n    // 5: {type: 'decimal', value: '.'}\n    // 6: {type: 'fraction', value: '25'}\n    // console.log('number-parts', numberParts);\n\n    if (fraction === '0') {\n      numberParts.push(\n        { type: 'decimal', value: decimalChar },\n        { type: 'fraction', value: fraction }\n      );\n    }\n\n    let maskArray = numberParts.reduce((pv, { type, value: partValue }) => {\n      // PV [] minusSign -\n      // PV ['-'] currency $\n      // PV ['-', '$'] integer 3\n      // PV ['-', '$', /\\d/] group ,\n      // PV ['-', '$', /\\d/, ','] integer 000\n      // PV ['-', '$', /\\d/, ',', /\\d/, /\\d/, /\\d/] decimal .\n      // PV ['-', '$', /\\d/, ',', /\\d/, /\\d/, /\\d/, '.'] fraction 25\n      // console.log('PV', pv, type, partValue);\n\n      if (['decimal', 'fraction'].includes(type) && fraction == null) {\n        return pv;\n      }\n\n      if (['integer', 'fraction'].includes(type)) {\n        return [\n          ...pv,\n          ...partValue\n            .split('')\n            .filter(\n              (_, index) =>\n                type === 'fraction' ? index < fraction.length : true\n            )\n            .map(() => /\\d/)\n        ];\n      }\n\n      if (type === 'currency' || type === 'minusSign') {\n        return [...pv, ...partValue.split('')];\n      }\n\n      return [...pv, partValue];\n    }, []);\n\n    // console.log('PV', maskArray);\n\n    let lastDigitIndex = findLastIndex(maskArray, maskChar => {\n      return isRegexEqual(maskChar, /\\d/);\n    });\n\n    // console.log('lastDigitIndex', lastDigitIndex);\n\n    if (\n      maskArray.indexOf(decimalChar) === -1 &&\n      `${value}`.indexOf(decimalChar) !== -1 &&\n      hasDecimal\n    ) {\n      maskArray = insert(maskArray, lastDigitIndex + 1, [decimalChar]);\n      lastDigitIndex += 2; // we want to insert a new number after the decimal\n    }\n\n    const endOfMask = maskArray.slice(lastDigitIndex + 1).join('');\n    maskArray = [...maskArray.slice(0, lastDigitIndex + 1), endOfMask];\n\n    return maskArray;\n  }\n\n  const parser = value => {\n    if (value == null) {\n      return undefined;\n    }\n\n    const isNegative = `${value}`.includes(minusChar);\n\n    // console.log('TOPARSE', value);\n\n    return isNegative\n      ? -toFloat(value, decimalChar)\n      : toFloat(value, decimalChar);\n  };\n\n  return { formatter: mask, parser };\n};\n\n/* --------------------------------------- Schema Shit --------------------------------------- */\n\n// Examples\n// field = \"name\" ---> properties.name\n// field = \"brother.name\" ---> properties.brother.properties.name\n// field = \"brother.siblings[1].friend.name\" ---> properties.brother.properties.siblings.items.properties.friend.properties.name\nexport const getSchemaPathFromJsonPath = jsonPath => {\n  // Convert\n  let schemaPath = jsonPath\n    .replace(/\\./g, '.properties.')\n    .replace(/\\[\\d+\\]/g, '.items');\n  // Add first properties\n  schemaPath = `properties.${schemaPath}`;\n  return schemaPath;\n};\n\nexport const computeFieldFromProperty = (propertyName, property, prefix) => {\n  const {\n    'ui:control': uiControl,\n    'ui:props': inputProps,\n    'ui:before': uiBefore,\n    'ui:after': uiAfter,\n    oneOf,\n    items,\n    enum: schemaEnum,\n    title: label,\n    minimum,\n    maximum,\n    minLength,\n    maxLength,\n    pattern,\n    required,\n    type,\n    properties: subProperties,\n    allOf,\n    propertyOrder,\n    errorMessage\n  } = property;\n\n  // Set Id if not passed\n  let id = uuidv4();\n  if (inputProps && inputProps.id) {\n    id = inputProps.id;\n  }\n\n  const field = {\n    // componentType: uiControl ?? (oneOf && 'select') ?? type,\n    componentType: uiControl ?? type,\n    name: prefix ? `${prefix}.${propertyName}` : propertyName,\n    type,\n    uiBefore,\n    uiAfter,\n    properties: type === 'object' ? subProperties : undefined,\n    allOf: type === 'object' ? allOf : undefined,\n    propertyOrder: type === 'object' ? propertyOrder : undefined,\n    items: type === 'array' ? items : undefined,\n    propertyName,\n    required,\n    props: {\n      label: label,\n      id,\n      minimum,\n      maximum,\n      minLength,\n      maxLength,\n      pattern,\n      errorMessage,\n      ...inputProps\n    }\n  };\n\n  // console.log('NAME', propertyName, inputProps);\n\n  if (oneOf) {\n    const options = property.oneOf.map(option => {\n      const { 'ui:props': inputProps = {} } = option;\n      return {\n        value: option.const,\n        label: option.title,\n        ...inputProps\n      };\n    });\n    field.props.options = options;\n  }\n\n  if (schemaEnum) {\n    const options = property.enum.map(val => {\n      return {\n        value: val,\n        label: val\n      };\n    });\n    field.props.options = options;\n  }\n\n  if (items && items.oneOf) {\n    const options = items.oneOf.map(option => {\n      const { 'ui:props': inputProps = {} } = option;\n      return {\n        value: option.const,\n        label: option.title,\n        ...inputProps\n      };\n    });\n    field.props.options = options;\n  }\n\n  return field;\n};\n\nexport const computeFieldsFromSchema = (schema, onlyValidateSchema) => {\n  if (!schema || onlyValidateSchema) {\n    return { properties: [], conditions: [], components: [] };\n  }\n\n  // Grab properties and items off of schema\n  const { properties = {}, allOf, propertyOrder = [] } = schema;\n\n  if (Object.keys(properties).length > 0) {\n    // Attempt to generate fields from properties\n    const fields = Object.keys(properties)\n      .sort((a, b) => {\n        const aIndex = propertyOrder.indexOf(a);\n        const bIndex = propertyOrder.indexOf(b);\n\n        return (\n          (aIndex > -1 ? aIndex : propertyOrder.length + 1) -\n          (bIndex > -1 ? bIndex : propertyOrder.length + 1)\n        );\n      })\n      .map(propertyName => {\n        return propertyName;\n      });\n\n    let conditions = [];\n    let components = [];\n\n    // Check for all of ( we have conditionals )\n    if (allOf) {\n      allOf.forEach(item => {\n        if (item.if) {\n          // Determine if the \"then\" properties are new or already in fields\n          const newItem = { ...item };\n          newItem.then = { ...item.then, properties: {} };\n          newItem.thenProps = {};\n          Object.keys(item.then.properties).forEach(name => {\n            if (!fields.includes(name)) {\n              // This is a completley new field!\n              newItem.then.properties[name] = item.then.properties[name];\n            } else {\n              // This field has been spotted above, and therefore is just new properties based on conditional\n              newItem.thenProps[name] = item.then.properties[name];\n            }\n          });\n          conditions.push(newItem);\n        } else {\n          components.push(item);\n        }\n      });\n    }\n\n    return { properties: fields, conditions, components };\n  }\n\n  return { properties: [], conditions: [], components: [] };\n};\n\nexport function checkCondition(condition, propertyValue) {\n  // if (!isPlainObject(condition)) {\n  //   return false;\n  // }\n\n  return Object.entries(condition).every(([keyword, value]) => {\n    // console.log('KEYWORD', keyword, value, propertyValue);\n    switch (keyword) {\n      case 'const':\n        if (Array.isArray(propertyValue) && value) {\n          return propertyValue.sort().toString() == value.sort().toString();\n        } else {\n          return propertyValue === value;\n        }\n      case 'minimum':\n        return propertyValue >= value;\n      case 'exclusiveMinimum':\n        return propertyValue > value;\n      case 'maximum':\n        return propertyValue <= value;\n      case 'exclusiveMaximum':\n        return propertyValue < value;\n      case 'enum':\n        if (Array.isArray(value) && !Array.isArray(propertyValue)) {\n          return value.includes(propertyValue);\n        }\n        if (Array.isArray(value) && Array.isArray(propertyValue)) {\n          return propertyValue.every(a => value.includes(a));\n        }\n        return false;\n      case 'oneOf':\n        if (Array.isArray(value) && !Array.isArray(propertyValue)) {\n          return value.includes(propertyValue);\n        }\n        if (Array.isArray(value) && Array.isArray(propertyValue)) {\n          return value.find(a => propertyValue.includes(a));\n        }\n        return false;\n      case 'pattern':\n        return new RegExp(value).test(propertyValue);\n      // case 'properties':\n      //   // eslint-disable-next-line no-use-before-define\n      //   return checkProperties(value, values, propertyPath);\n      case 'not':\n        return propertyValue !== value;\n      default:\n        // not supported keywords return false\n        return false;\n    }\n  });\n}\n\n// expose proxy utils\nexport { unwrap } from './proxy';\n","var map = {\n\t\"./index.js\": \"./stories/index.js\"\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = \"./stories sync ^\\\\.[\\\\\\\\/](?:index\\\\.js)$\";","export default \"# Flat Arrays\\n\\nYou can create flat arrays where the value is not an object.\\n\\n<!-- STORY -->\\n\\n```jsx\\nimport { Form, Input, ArrayField } from 'informed';\\n\\nconst DynamicArrays = () => {\\n  return (\\n    <Form initialValues={{ siblings: ['foo', 'bar', 'baz'] }}>\\n      <h5>You:</h5>\\n      <Input name=\\\"name\\\" label=\\\"Your Name:\\\" />\\n      <h5>Siblings:</h5>\\n      <ArrayField name=\\\"siblings\\\">\\n        {({ add }) => (\\n          <>\\n            <button type=\\\"button\\\" onClick={add}>\\n              Add Sibling\\n            </button>\\n            <ArrayField.Items>\\n              {({ remove, name, index }) => (\\n                <>\\n                  <Input name={name} label={`Sibling ${index}:`} />\\n                  <button type=\\\"button\\\" onClick={remove}>\\n                    Remove\\n                  </button>\\n                </>\\n              )}\\n            </ArrayField.Items>\\n          </>\\n        )}\\n      </ArrayField>\\n      <button type=\\\"submit\\\">Submit</button>\\n    </Form>\\n  );\\n};\\n```\\n\";","import React, { useState } from 'react';\nimport withDocs from '../../utils/withDocs';\nimport readme from './README.md';\n\nimport { Form, Input, ArrayField, Debug } from '../../../src';\n\nconst ArrayFieldExample = () => (\n  <Form initialValues={{ siblings: ['foo', 'bar', 'baz'] }}>\n    <div style={{ display: 'flex' }}>\n      <div style={{ flex: 1, marginRight: '1rem' }}>\n        <h5>You:</h5>\n        <Input name=\"name\" label=\"Your Name:\" />\n        <h5>Siblings:</h5>\n        <ArrayField name=\"siblings\">\n          {({ add }) => (\n            <>\n              <button type=\"button\" onClick={add}>\n                Add Sibling\n              </button>\n              <ArrayField.Items>\n                {({ remove, name, index }) => (\n                  <>\n                    <Input name={name} label={`Sibling ${index}:`} />\n                    <button type=\"button\" onClick={remove}>\n                      Remove\n                    </button>\n                  </>\n                )}\n              </ArrayField.Items>\n            </>\n          )}\n        </ArrayField>\n        <br />\n        <button type=\"submit\">Submit</button>\n      </div>\n      <div style={{ flex: 2, marginLeft: '3rem' }}>\n        <Debug values />\n      </div>\n    </div>\n  </Form>\n);\n\nexport default withDocs(readme, ArrayFieldExample);\n","export default \"# Array Field Item\\n\\n<br />\\n\\nInformed gives you access to two components for array fields:\\n\\n```jsx\\n<ArrayField>\\n<ArrayField.Items>\\n```\\n\\n<br />\\n\\nThere are many cool features these give you:\\n\\n## ArrayFieldApi\\n\\n```jsx\\n<ArrayField name=\\\"friends\\\">\\n  {({ add, reset, swap, addWithInitialValue }) => <></>}\\n</ArrayField>\\n```\\n\\n<br />\\n\\n| Function            | Example                               | Description                           |\\n| ------------------- | ------------------------------------- | ------------------------------------- |\\n| add                 | add()                                 | Adds a new item                       |\\n| remove              | remove(1)                             | Removes item at index                 |\\n| reset               | reset()                               | Resets the array field                |\\n| swap                | swap(1,2)                             | Swaps two array fields                |\\n| addWithInitialValue | addWithInitialValue({ name: 'test' }) | Adds a new item with an initial value |\\n\\n## ArrayFieldItemApi\\n\\n```jsx\\n<ArrayField.Items>{({ remove, reset, setValue }) => <></>}</ArrayField.Items>\\n```\\n\\n<br />\\n\\n| Function   | Example                 | Description                                   |\\n| ---------- | ----------------------- | --------------------------------------------- |\\n| remove     | remove()                | removes this item                             |\\n| reset      | reset()                 | Resets all field within this item             |\\n| setValue   | setValue('name', 'Joe') | Sets the value for the field within this item |\\n| resetField | resetField('name')      | Resets the given field within this item       |\\n\\n## ArrayFieldItemInfo\\n\\n```jsx\\n<ArrayField.Items>{({ name, index }) => <></>}</ArrayField.Items>\\n```\\n\\n<br />\\n\\n| Name  | Example      | Description                  |\\n| ----- | ------------ | ---------------------------- |\\n| name  | \\\"friends[0]\\\" | the field name for this item |\\n| index | 0            | the index for this item      |\\n\\n## ArrayFieldItemState\\n\\n##### Usage\\n\\n```js\\nconst {\\n  key,\\n  name,\\n  index,\\n  parent,\\n  values,\\n  errors,\\n  touched,\\n  initialValue\\n} = useArrayFieldItemState();\\n```\\n\\n##### Example\\n\\n```json\\n{\\n  \\\"key\\\": \\\"d9f97dee-7c39-4bce-a348-a404e75417a6\\\",\\n  \\\"name\\\": \\\"friends[0]\\\",\\n  \\\"index\\\": 0,\\n  \\\"parent\\\": \\\"friends\\\",\\n  \\\"values\\\": {\\n    \\\"age\\\": 27\\n  },\\n  \\\"errors\\\": {\\n    \\\"name\\\": \\\"This field is required\\\"\\n  },\\n  \\\"touched\\\": true,\\n  \\\"initialValue\\\": {\\n    \\\"name\\\": \\\"Joe\\\",\\n    \\\"age\\\": 27\\n  }\\n}\\n```\\n\\n<br />\\n\\n| Name         | Example                    | Description                                                   |\\n| ------------ | -------------------------- | ------------------------------------------------------------- |\\n| name         | \\\"friends[0]\\\"               | the field name for this item                                  |\\n| index        | 0                          | the index for this item                                       |\\n| key          | \\\"d9f97dee...\\\"              | a unique identifier for this field ( used mostly internally ) |\\n| parent       | \\\"friends\\\"                  | parent name \\\"friends[0]\\\" parent is \\\"friends\\\"                  |\\n| values       | { age: 27 }                | the values within this item                                   |\\n| errors       | { name: \\\"Required Field\\\" } | the errors within this item                                   |\\n| touched      | true                       | if a field within this item has been touched                  |\\n| initialValue | { name: \\\"Joe\\\", age: 27}    | the initial value for this item                               |\\n\\n## Example:\\n\\nFor each feature a visualization will be shown based on this example array:\\n\\n```\\n[ { a, b }, { a, b }, { a, b } ]\\n```\\n\\n<br />\\n\\nAn example state for this array looks like\\n\\n```js\\n[{ a: 'Hello', b: 'World' }, { a: 'Hi', b: 'US' }, { a: 'Yoo', b: 'Bro' }];\\n```\\n\\n<br />\\n\\n| Scenario                                                         | Visualization                        | How                                       |\\n| ---------------------------------------------------------------- | ------------------------------------ | ----------------------------------------- |\\n| I want to reset the **b** field for the second item              | [ { a, b }, { a, **b** }, { a, b } ] | `arrayFieldItemApi.resetField('b')`       |\\n| I want to set the **a** fields value for the second item to \\\"Yo\\\" | [ { a, b }, { **a**, b }, { a, b } ] | `arrayFieldItemApi.setValue('a', 'Yo')`   |\\n| I want to remove the the second item                             | [ { a, b }, **{ a, b }**, { a, b } ] | `arrayFieldItemApi.remove()`              |\\n| I want to reset the the second item                              | [ { a, b }, **{ a, b }**, { a, b } ] | `arrayFieldItemApi.reset()`               |\\n| I want to add a new item                                         | [ { a, b }, { a, b }, **{ a, b }** ] | `arrayFieldApi.add()`                     |\\n| I want to add a new item with the name \\\"Foo\\\"                     | [ { a, b }, { a, b }, **{ a, b }** ] | `arrayFieldApi.addWithInitialValue({..})` |\\n| I want to reset the whole array field                            | **[ { a, b }, { a, b }, { a, b } ]** | `arrayFieldApi.reset()`                   |\\n\\n<!-- STORY -->\\n\\n```jsx\\nimport { Form, Input, ArrayField, useArrayFieldItemState } from 'informed';\\n\\nconst initialValues = {\\n  friends: [\\n    {\\n      name: 'Joe',\\n      age: '20'\\n    },\\n    {\\n      name: 'Jane',\\n      age: '20'\\n    }\\n  ]\\n};\\n\\nconst FieldState = () => {\\n  const { values } = useArrayFieldItemState();\\n  return (\\n    <pre>\\n      <code>{JSON.stringify(values, null, 2)}</code>\\n    </pre>\\n  );\\n};\\n\\nconst NestedForm = () => {\\n  return (\\n    <div>\\n      <Form initialValues={initialValues}>\\n        <ArrayField name=\\\"friends\\\">\\n          {({ add, reset }) => (\\n            <>\\n              <button\\n                onClick={() => {\\n                  reset();\\n                }}\\n                type=\\\"button\\\">\\n                Reset\\n              </button>\\n              <button\\n                onClick={() => {\\n                  add();\\n                }}\\n                type=\\\"button\\\">\\n                Add\\n              </button>\\n\\n              <button\\n                onClick={() => {\\n                  addWithInitialValue({ name: 'test' });\\n                }}>\\n                Add with initialValue\\n              </button>\\n\\n              <button\\n                onClick={() => {\\n                  formApi.setValue('friends[0].name', 'Test');\\n                }}\\n                type=\\\"button\\\">\\n                set friends[0].name to test\\n              </button>\\n\\n              <ArrayField.Items>\\n                {({ remove, name, reset, resetField, setValue }) => (\\n                  <>\\n                    <h5>{name}</h5>\\n                    <Input name=\\\"name\\\" label=\\\"Name\\\" required />\\n                    <Input name=\\\"age\\\" label=\\\"Age\\\" type=\\\"number\\\" />\\n                    <button type=\\\"button\\\" onClick={reset}>\\n                      Reset\\n                    </button>\\n                    <button\\n                      type=\\\"button\\\"\\n                      onClick={() => setValue('name', 'Elon')}>\\n                      Set Name to \\\"Elon\\\"\\n                    </button>\\n                    <button type=\\\"button\\\" onClick={() => resetField('name')}>\\n                      Reset Name\\n                    </button>\\n                    <button type=\\\"button\\\" onClick={remove}>\\n                      Remove\\n                    </button>\\n                    <FieldState />\\n                  </>\\n                )}\\n              </ArrayField.Items>\\n            </>\\n          )}\\n        </ArrayField>\\n        <button type=\\\"submit\\\">Submit</button>\\n      </Form>\\n    </div>\\n  );\\n};\\n```\\n\";","import React from 'react';\nimport withDocs from '../../utils/withDocs';\nimport readme from './README.md';\nimport {\n  Form,\n  Input,\n  ArrayField,\n  Debug,\n  useArrayFieldItemState\n} from '../../../src';\n\nconst initialValues = {\n  friends: [\n    {\n      name: 'Joe',\n      age: 27\n    },\n    {\n      name: 'Jane',\n      age: 22\n    }\n  ]\n};\n\n// const friends = Array.from(Array(50)).map(e => {\n//   return { name: 'Joe', age: 1 };\n// });\n\n// const initialValues = {\n//   friends\n// };\n\nconst FieldState = () => {\n  const state = useArrayFieldItemState();\n  return (\n    <pre>\n      <code>{JSON.stringify(state, null, 2)}</code>\n    </pre>\n  );\n};\n\nconst NestedForm = () => (\n  <div>\n    <Form initialValues={initialValues}>\n      <div style={{ display: 'flex', flexWrap: 'wrap' }}>\n        <div style={{ flex: 1, marginRight: '2rem' }}>\n          <ArrayField name=\"friends\">\n            {({ add, addWithInitialValue, reset }) => {\n              return (\n                <React.Fragment>\n                  <button\n                    onClick={() => {\n                      reset();\n                    }}\n                    type=\"button\">\n                    Reset\n                  </button>\n                  <button\n                    onClick={() => {\n                      add();\n                    }}\n                    type=\"button\">\n                    Add\n                  </button>\n\n                  <button\n                    onClick={() => {\n                      addWithInitialValue({ name: 'test' });\n                    }}>\n                    Add with initialValue\n                  </button>\n\n                  {/* <button\n                        onClick={() => {\n                          formApi.setValue('friends[0].name', 'Test');\n                        }}\n                        type=\"button\">\n                        set friends[0].name to test\n                      </button> */}\n\n                  {/* <button\n                        onClick={() => {\n                          formApi.setInitialValue('friends', [\n                            {\n                              name: 'Boo',\n                              age: '30'\n                            },\n                            {\n                              name: 'Bar',\n                              age: '50'\n                            }\n                          ]);\n                        }}\n                        type=\"button\">\n                        Set new initial values\n                      </button> */}\n\n                  <ArrayField.Items>\n                    {({ remove, name, reset, resetField, setValue }) => (\n                      <label>\n                        <h5>{name}</h5>\n                        <Input name=\"name\" label=\"Name\" required />\n                        <Input name=\"age\" label=\"Age\" type=\"number\" />\n                        {/* <Input name={`${field}.a`} />\n                            <Input name={`${field}.b`} />\n                            <Input name={`${field}.c`} />\n                            <Input name={`${field}.d`} />\n                            <Input name={`${field}.e`} />\n                            <Input name={`${field}.f`} />\n                            <Input name={`${field}.g`} />\n                            <Input name={`${field}.h`} />\n                            <Input name={`${field}.i`} />\n                            <Input name={`${field}.j`} />\n                            <Input name={`${field}.k`} />\n                            <Input name={`${field}.l`} />\n                            <Input name={`${field}.m`} /> */}\n\n                        <button type=\"button\" onClick={reset}>\n                          Reset\n                        </button>\n                        <button\n                          type=\"button\"\n                          onClick={() => setValue('name', 'Elon')}>\n                          Set Name to \"Elon\"\n                        </button>\n                        <button\n                          type=\"button\"\n                          onClick={() => resetField('name')}>\n                          Reset Name\n                        </button>\n                        <button type=\"button\" onClick={remove}>\n                          Remove\n                        </button>\n                        <FieldState />\n                      </label>\n                    )}\n                  </ArrayField.Items>\n                </React.Fragment>\n              );\n            }}\n          </ArrayField>\n        </div>\n        <div style={{ flex: 2, minWidth: '300px', marginLeft: '3rem' }}>\n          <Debug />\n        </div>\n      </div>\n    </Form>\n  </div>\n);\n\nexport default withDocs(readme, NestedForm);\n","export default \"# Array of fields\\n\\nFields can also be associated with an array. Here is an example where you can input three friends.\\n\\n<!-- STORY -->\\n\\n```jsx\\nimport { Form, Text } from 'informed';\\n\\nconst Example = () => (\\n  <Form>\\n    <Input name=\\\"friends[0]\\\" label=\\\"Friend1\\\" />\\n    <Input name=\\\"friends[1]\\\" label=\\\"Friend2\\\" />\\n    <Input name=\\\"friends[2]\\\" label=\\\"Friend3\\\" />\\n    <button type=\\\"submit\\\">Submit</button>\\n    <Debug values />\\n  </Form>\\n);\\n```\\n\";","import React from 'react';\nimport withDocs from '../../utils/withDocs';\nimport readme from './README.md';\nimport Code from '../../utils/Code';\n\nimport { Form, Input, Debug } from '../../../src';\n\nconst InputInput = () => (\n  <Form>\n    <Input name=\"friends[0]\" label=\"Friend1\" />\n    <Input name=\"friends[1]\" label=\"Friend2\" />\n    <Input name=\"friends[2]\" label=\"Friend3\" />\n    <button type=\"submit\">Submit</button>\n    <Debug values />\n  </Form>\n);\n\nexport default withDocs(readme, InputInput);\n","export default \"# Array of scopes\\n\\nScopes can also be associated with an array. Here is an example where you can input two friends.\\nwhere a friend consists of a first and last name.\\n\\n<!-- STORY -->\\n\\n```jsx\\nimport { Form, Input, Scope, Debug } from 'informed';\\n\\nconst ArrayOfScopes = () => (\\n  <Form>\\n    <h5>Friend1</h5>\\n    <Scope scope=\\\"friends[0]\\\">\\n      <Input name=\\\"firstName\\\" label=\\\"First Name\\\" />\\n      <Input name=\\\"lastName\\\" label=\\\"Last Name\\\" />\\n    </Scope>\\n    <h5>Friend2</h5>\\n    <Scope scope=\\\"friends[1]\\\">\\n      <Input name=\\\"firstName\\\" label=\\\"First Name\\\" />\\n      <Input name=\\\"lastName\\\" label=\\\"Last Name\\\" />\\n    </Scope>\\n    <button type=\\\"submit\\\">Submit</button>\\n    <Debug />\\n  </Form>\\n);\\n```\\n\";","import React from 'react';\nimport withDocs from '../../utils/withDocs';\nimport readme from './README.md';\nimport Code from '../../utils/Code';\n\nimport { Form, Input, Scope, Debug } from '../../../src';\n\nconst ArrayOfScopes = () => (\n  <Form>\n    <h5>Friend1</h5>\n    <Scope scope=\"friends[0]\">\n      <Input name=\"firstName\" label=\"First Name\" />\n      <Input name=\"lastName\" label=\"Last Name\" />\n    </Scope>\n    <h5>Friend2</h5>\n    <Scope scope=\"friends[1]\">\n      <Input name=\"firstName\" label=\"First Name\" />\n      <Input name=\"lastName\" label=\"Last Name\" />\n    </Scope>\n    <button type=\"submit\">Submit</button>\n    <Debug />\n  </Form>\n);\n\nexport default withDocs(readme, ArrayOfScopes);\n","export default \"# Dependent Fields in ArrayField\\n\\nInformed's hooks are automatically scoped for you!!\\n\\n<!-- STORY -->\\n\\n```jsx\\nimport { Form, Input, ArrayField } from 'informed';\\n\\nconst options = {\\n  car: [\\n    {\\n      value: '',\\n      label: '- Select -',\\n      disabled: true\\n    },\\n    {\\n      value: 'modelS',\\n      label: 'Model S'\\n    },\\n    {\\n      value: 'model3',\\n      label: 'Model 3'\\n    },\\n    {\\n      value: 'modelX',\\n      label: 'Model X'\\n    },\\n    {\\n      value: 'modely',\\n      label: 'Model Y'\\n    }\\n  ],\\n  truck: [\\n    {\\n      value: '',\\n      label: '- Select -',\\n      disabled: true\\n    },\\n    {\\n      value: 'semi',\\n      label: 'Semi Truck'\\n    },\\n    {\\n      value: 'cyber',\\n      label: 'Cyber Truck'\\n    }\\n  ]\\n};\\n\\nconst CarOrTruck = () => {\\n  return (\\n    <>\\n      <label>Would you like a car or truck?</label>\\n      <RadioGroup name=\\\"type\\\">\\n        <Radio value=\\\"car\\\" label=\\\"Car\\\" />\\n        <Radio value=\\\"truck\\\" label=\\\"Truck\\\" />\\n      </RadioGroup>\\n    </>\\n  );\\n};\\n\\nconst ProductSelect = () => {\\n  const { value, dirty } = useFieldState('type');\\n  const { clearValue } = useFieldApi('product');\\n\\n  const opts = useMemo(() => options[value] || [], [value]);\\n\\n  useEffect(\\n    () => {\\n      if (dirty) clearValue();\\n    },\\n    [value]\\n  );\\n\\n  return (\\n    <Select field=\\\"product\\\" label=\\\"Product\\\" disabled={!value}>\\n      <option value=\\\"\\\" disabled>\\n        - Select -\\n      </option>\\n      {opts.map(option => (\\n        <option key={option.value} value={option.value}>\\n          {option.label}\\n        </option>\\n      ))}\\n    </Select>\\n  );\\n};\\n\\nconst initialValues = {\\n  friends: [\\n    {\\n      name: 'Joe',\\n      type: 'truck'\\n    },\\n    {\\n      name: 'Jane',\\n      type: 'car'\\n    }\\n  ]\\n};\\n\\nconst DynamicArrays = () => {\\n  return (\\n    <Form initialValues={initialValues}>\\n      <h5>You:</h5>\\n      <Input name=\\\"name\\\" label=\\\"Your Name:\\\" />\\n      <h5>Friends:</h5>\\n      <ArrayField name=\\\"friends\\\">\\n        {({ add }) => (\\n          <>\\n            <button type=\\\"button\\\" onClick={add}>\\n              Add Sibling\\n            </button>\\n            <ArrayField.Items>\\n              {({ remove, name, index }) => (\\n                <>\\n                  <h5>{name}</h5>\\n                  <Input name=\\\"name\\\" label=\\\"Name\\\" required />\\n                  <CarOrTruck />\\n                  <ProductSelect />\\n                  <button type=\\\"button\\\" onClick={remove}>\\n                    Remove\\n                  </button>\\n                </>\\n              )}\\n            </ArrayField.Items>\\n          </>\\n        )}\\n      </ArrayField>\\n      <button type=\\\"submit\\\">Submit</button>\\n    </Form>\\n  );\\n};\\n```\\n\";","import React, { useMemo, useEffect } from 'react';\nimport withDocs from '../../utils/withDocs';\nimport readme from './README.md';\n\nimport {\n  Form,\n  Input,\n  Select,\n  RadioGroup,\n  Radio,\n  ArrayField,\n  Debug,\n  useFieldState,\n  useFieldApi,\n  DebugField\n} from '../../../src';\n\nconst options = {\n  car: [\n    {\n      value: '',\n      label: '- Select -',\n      disabled: true\n    },\n    {\n      value: 'modelS',\n      label: 'Model S'\n    },\n    {\n      value: 'model3',\n      label: 'Model 3'\n    },\n    {\n      value: 'modelX',\n      label: 'Model X'\n    },\n    {\n      value: 'modely',\n      label: 'Model Y'\n    }\n  ],\n  truck: [\n    {\n      value: '',\n      label: '- Select -',\n      disabled: true\n    },\n    {\n      value: 'semi',\n      label: 'Semi Truck'\n    },\n    {\n      value: 'cyber',\n      label: 'Cyber Truck'\n    }\n  ]\n};\n\nconst CarOrTruck = () => {\n  return (\n    <>\n      <label>Would you like a car or truck?</label>\n      <RadioGroup name=\"type\">\n        <Radio value=\"car\" label=\"Car\" />\n        <Radio value=\"truck\" label=\"Truck\" />\n      </RadioGroup>\n    </>\n  );\n};\n\nconst ProductSelect = () => {\n  const { value, dirty } = useFieldState('type');\n  const { clearValue } = useFieldApi('product');\n\n  const opts = useMemo(() => options[value] || [], [value]);\n\n  useEffect(\n    () => {\n      if (dirty) clearValue();\n    },\n    [value]\n  );\n\n  return (\n    <Select field=\"product\" label=\"Product\" disabled={!value}>\n      <option value=\"\" disabled>\n        - Select -\n      </option>\n      {opts.map(option => (\n        <option key={option.value} value={option.value}>\n          {option.label}\n        </option>\n      ))}\n    </Select>\n  );\n};\n\nconst initialValues = {\n  friends: [\n    {\n      name: 'Joe',\n      type: 'truck'\n    },\n    {\n      name: 'Jane',\n      type: 'car'\n    }\n  ]\n};\n\nconst ArrayFieldExample = () => (\n  <Form initialValues={initialValues}>\n    <div style={{ display: 'flex' }}>\n      <div style={{ flex: 1, marginRight: '1rem' }}>\n        <h5>You:</h5>\n        <Input name=\"name\" label=\"Your Name:\" />\n        <h5>Friends:</h5>\n        <ArrayField name=\"friends\">\n          {({ add }) => (\n            <>\n              <button type=\"button\" onClick={add}>\n                Add Sibling\n              </button>\n              <ArrayField.Items>\n                {({ remove, name, index }) => (\n                  <>\n                    <h5>{name}</h5>\n                    <Input name=\"name\" label=\"Name\" required />\n                    <CarOrTruck />\n                    {/* <DebugField name=\"type\" /> */}\n                    <ProductSelect />\n                    {/* <DebugField name=\"product\" /> */}\n                    <button type=\"button\" onClick={remove}>\n                      Remove\n                    </button>\n                  </>\n                )}\n              </ArrayField.Items>\n            </>\n          )}\n        </ArrayField>\n        <br />\n        <button type=\"submit\">Submit</button>\n      </div>\n      <div style={{ flex: 2, marginLeft: '3rem' }}>\n        <Debug values />\n      </div>\n    </div>\n  </Form>\n);\n\nexport default withDocs(readme, ArrayFieldExample);\n","export default \"# Dynamic Array of fields\\n\\nFields can also be associated with an dynamic array. Here is an example where you can add many siblings!\\n\\n<!-- STORY -->\\n\\n```jsx\\nimport { Form, Input, ArrayField } from 'informed';\\n\\nconst DynamicArrays = () => {\\n  return (\\n    <div>\\n      <Form initialValues={{ siblings: ['foo', 'bar', 'baz'] }}>\\n        <ArrayField name=\\\"siblings\\\">\\n          {({ add, reset }) => (\\n            <>\\n              <button onClick={add} type=\\\"button\\\">\\n                Add Sibling\\n              </button>\\n              <button onClick={reset} type=\\\"button\\\">\\n                Reset Siblings\\n              </button>\\n              <ArrayField.Items>\\n                {({ remove, name }) => (\\n                  <>\\n                    <Input label=\\\"Name\\\" name={name} />\\n                    <button type=\\\"button\\\" onClick={remove}>\\n                      Remove\\n                    </button>\\n                  </>\\n                )}\\n              </ArrayField.Items>\\n            </>\\n          )}\\n        </ArrayField>\\n        <button type=\\\"submit\\\">Submit</button>\\n      </Form>\\n    </div>\\n  );\\n};\\n```\\n\";","import React, { useState } from 'react';\nimport withDocs from '../../utils/withDocs';\nimport readme from './README.md';\n\nimport { Form, Input, Debug, ArrayField, useFormApi } from '../../../src';\n\nconst Reset = () => {\n  const formApi = useFormApi();\n  return (\n    <button type=\"button\" onClick={formApi.reset}>\n      Reset Form\n    </button>\n  );\n};\n\nconst DynamicArraysContent = () => {\n  return (\n    <div>\n      {/* <Form\n        initialValues={{\n          siblings: [\n            { name: 'foo', last: 'a' },\n            { name: 'bar', last: 'b' },\n            { name: 'baz', last: 'c' }\n          ]\n        }}> */}\n      <Form initialValues={{ siblings: ['foo', 'bar', 'baz'] }}>\n        <div style={{ display: 'flex' }}>\n          <div style={{ flex: 1, marginRight: '1rem' }}>\n            <Reset />\n            <h5>You:</h5>\n            <label>\n              Your Name: <Input name=\"name\" />\n            </label>\n            <h5>Siblings:</h5>\n            <ArrayField name=\"siblings\">\n              {({ add, reset }) => (\n                <>\n                  <button onClick={add} type=\"button\">\n                    Add Sibling\n                  </button>\n                  <button onClick={reset} type=\"button\">\n                    Reset Siblings\n                  </button>\n                  <ArrayField.Items>\n                    {({ remove, name }) => (\n                      <>\n                        <Input label=\"Name\" name={name} />\n                        {/* <Input label=\"Name\" name={`${name}.name`} />\n                        <Input label=\"Name\" name={`${name}.last`} /> */}\n                        <button type=\"button\" onClick={remove}>\n                          Remove\n                        </button>\n                      </>\n                    )}\n                  </ArrayField.Items>\n                </>\n              )}\n            </ArrayField>\n            <button type=\"submit\">Submit</button>\n          </div>\n          <div style={{ flex: 2, marginLeft: '3rem' }}>\n            <Debug values />\n          </div>\n        </div>\n      </Form>\n    </div>\n  );\n};\n\nconst DynamicArrays = () => <DynamicArraysContent />;\n\nexport default withDocs(readme, DynamicArrays);\n","export default \"# Huge Array form\\n\\n```jsx\\nimport {\\n  Form,\\n  Input,\\n  ArrayField,\\n  useFieldState,\\n  Relevant,\\n  Debug\\n} from 'informed';\\n\\nconst friends = Array.from(Array(69)).map(e => {\\n  return { name: 'Joe', age: 26, f: 'foo' };\\n});\\n\\nconst initialValues = {\\n  friends\\n};\\n\\nconst FieldState = ({ name }) => {\\n  const nameState = useFieldState(name);\\n  return (\\n    <>\\n      <h5>Component using nameState: {name}</h5>\\n      Render: {Math.random()}\\n      <pre>\\n        <code>{JSON.stringify(nameState, null, 2)}</code>\\n      </pre>\\n    </>\\n  );\\n};\\n\\nconst NestedForm = () => (\\n  <div>\\n    <Form\\n      initialValues={initialValues}\\n      onSubmit={({ values }) => console.log(values)}>\\n      <div style={{ display: 'flex', flexWrap: 'wrap' }}>\\n        <div style={{ flex: 1, marginRight: '2rem' }}>\\n          <button type=\\\"submit\\\">Submit</button>\\n          <ArrayField name=\\\"friends\\\">\\n            {({ add, addWithInitialValue, reset }) => {\\n              return (\\n                <React.Fragment>\\n                  <button\\n                    onClick={() => {\\n                      reset();\\n                    }}\\n                    type=\\\"button\\\">\\n                    Reset\\n                  </button>\\n                  <button\\n                    onClick={() => {\\n                      add();\\n                    }}\\n                    type=\\\"button\\\">\\n                    Add\\n                  </button>\\n\\n                  <button\\n                    onClick={() => {\\n                      addWithInitialValue({ name: 'test' });\\n                    }}>\\n                    Add with initialValue\\n                  </button>\\n\\n                  <ArrayField.Items>\\n                    {({ remove, name, reset, initialValue, setValue }) => (\\n                      <label>\\n                        <h5>{name}</h5>\\n                        <FieldState name={name} />\\n                        <Input\\n                          name=\\\"name\\\"\\n                          initialValue={initialValue && initialValue.name}\\n                        />\\n                        <Input name=\\\"age\\\" />\\n                        <Input name=\\\"a\\\" />\\n                        <Input name=\\\"b\\\" />\\n                        <Input name=\\\"c\\\" />\\n                        <Input name=\\\"d\\\" />\\n                        <Input name=\\\"e\\\" />\\n                        <Input name=\\\"f\\\" />\\n                        {/* Example using scope  */}\\n                        <Input\\n                          name=\\\"g\\\"\\n                          relevanceWhen={scope => [`${scope}.f`]}\\n                          relevant={({ formApi, scope }) =>\\n                            formApi.getValue(`${scope}.f`)\\n                          }\\n                        />\\n                        {/* Example using default ( scoped ) */}\\n                        <Input\\n                          name=\\\"h\\\"\\n                          relevanceWhen={['f']}\\n                          relevant={({ formApi }) =>\\n                            formApi.getValue(`${name}.f`)\\n                          }\\n                        />\\n                        <Relevant\\n                          when={({ formApi }) => formApi.getValue(`${name}.f`)}>\\n                          <Input name=\\\"i\\\" />\\n                          <Input name=\\\"j\\\" />\\n                          <Input name=\\\"k\\\" />\\n                          <Input name=\\\"l\\\" />\\n                          <Input name=\\\"m\\\" />\\n                        </Relevant>\\n\\n                        <button\\n                          type=\\\"button\\\"\\n                          onClick={() => {\\n                            reset();\\n                          }}>\\n                          Reset\\n                        </button>\\n                        <button\\n                          type=\\\"button\\\"\\n                          onClick={() => setValue('name', 'Elon')}>\\n                          Set Name to \\\"Elon\\\"\\n                        </button>\\n                        <button type=\\\"button\\\" onClick={remove}>\\n                          Remove\\n                        </button>\\n                      </label>\\n                    )}\\n                  </ArrayField.Items>\\n                </React.Fragment>\\n              );\\n            }}\\n          </ArrayField>\\n        </div>\\n        <div style={{ flex: 2, minWidth: '300px', marginLeft: '3rem' }}>\\n          <Debug />\\n        </div>\\n      </div>\\n    </Form>\\n  </div>\\n);\\n```\\n\\n<!-- STORY -->\\n\";","import React from 'react';\nimport withDocs from '../../utils/withDocs';\nimport readme from './README.md';\nimport {\n  Form,\n  Input,\n  ArrayField,\n  useFieldState,\n  Relevant,\n  Debug\n} from '../../../src';\n\nconst friends = Array.from(Array(69)).map(e => {\n  return { name: 'Joe', age: 26, f: 'foo' };\n});\n\nconst initialValues = {\n  friends\n};\n\nconst FieldState = ({ name }) => {\n  const nameState = useFieldState(name);\n  return (\n    <>\n      <h5>Component using nameState: {name}</h5>\n      Render: {Math.random()}\n      <pre>\n        <code>{JSON.stringify(nameState, null, 2)}</code>\n      </pre>\n    </>\n  );\n};\n\nconst NestedForm = () => (\n  <div>\n    <Form\n      initialValues={initialValues}\n      onSubmit={({ values }) => console.log(values)}>\n      <div style={{ display: 'flex', flexWrap: 'wrap' }}>\n        <div style={{ flex: 1, marginRight: '2rem' }}>\n          <button type=\"submit\">Submit</button>\n          <ArrayField name=\"friends\">\n            {({ add, addWithInitialValue, reset }) => {\n              return (\n                <React.Fragment>\n                  <button\n                    onClick={() => {\n                      reset();\n                    }}\n                    type=\"button\">\n                    Reset\n                  </button>\n                  <button\n                    onClick={() => {\n                      add();\n                    }}\n                    type=\"button\">\n                    Add\n                  </button>\n\n                  <button\n                    onClick={() => {\n                      addWithInitialValue({ name: 'test' });\n                    }}>\n                    Add with initialValue\n                  </button>\n\n                  <ArrayField.Items>\n                    {({ remove, name, reset, initialValue, setValue }) => (\n                      <label>\n                        <h5>{name}</h5>\n                        <FieldState name={name} />\n                        <Input\n                          name=\"name\"\n                          initialValue={initialValue && initialValue.name}\n                        />\n                        <Input name=\"age\" />\n                        <Input name=\"a\" />\n                        <Input name=\"b\" />\n                        <Input name=\"c\" />\n                        <Input name=\"d\" />\n                        <Input name=\"e\" />\n                        <Input name=\"f\" />\n                        {/* Example using scope  */}\n                        <Input\n                          name=\"g\"\n                          relevanceWhen={scope => [`${scope}.f`]}\n                          relevant={({ formApi, scope }) =>\n                            formApi.getValue(`${scope}.f`)\n                          }\n                        />\n                        {/* Example using default ( scoped ) */}\n                        <Input\n                          name=\"h\"\n                          relevanceWhen={['f']}\n                          relevant={({ formApi }) =>\n                            formApi.getValue(`${name}.f`)\n                          }\n                        />\n                        <Relevant\n                          when={({ formApi }) => formApi.getValue(`${name}.f`)}>\n                          <Input name=\"i\" />\n                          <Input name=\"j\" />\n                          <Input name=\"k\" />\n                          <Input name=\"l\" />\n                          <Input name=\"m\" />\n                        </Relevant>\n\n                        <button\n                          type=\"button\"\n                          onClick={() => {\n                            reset();\n                          }}>\n                          Reset\n                        </button>\n                        <button\n                          type=\"button\"\n                          onClick={() => setValue('name', 'Elon')}>\n                          Set Name to \"Elon\"\n                        </button>\n                        <button type=\"button\" onClick={remove}>\n                          Remove\n                        </button>\n                      </label>\n                    )}\n                  </ArrayField.Items>\n                </React.Fragment>\n              );\n            }}\n          </ArrayField>\n        </div>\n        <div style={{ flex: 2, minWidth: '300px', marginLeft: '3rem' }}>\n          <Debug />\n        </div>\n      </div>\n    </Form>\n  </div>\n);\n\nexport default withDocs(readme, NestedForm);\n","export default \"# Array Field\\n\\nSometimes you need highly dynamic forms where the data is represented by an array.\\n\\n<!-- STORY -->\\n\\n```jsx\\nimport { Form, Input, ArrayField } from 'informed';\\n\\nconst initialValues = {\\n  friends: [\\n    {\\n      name: 'Joe',\\n      age: '20'\\n    },\\n    {\\n      name: 'Jane',\\n      age: '20'\\n    }\\n  ]\\n};\\n\\nconst NestedForm = () => {\\n  return (\\n    <div>\\n      <Form initialValues={initialValues}>\\n        <ArrayField name=\\\"friends\\\">\\n          {({ add }) => {\\n            return (\\n              <>\\n                <button\\n                  onClick={() => {\\n                    add();\\n                  }}\\n                  type=\\\"button\\\">\\n                  Add\\n                </button>\\n                <ArrayField.Items>\\n                  {({ remove, name }) => (\\n                    <label>\\n                      <h5>{name}</h5>\\n                      <Input name=\\\"name\\\" label=\\\"Name\\\" required />\\n                      <Input name=\\\"age\\\" label=\\\"Age\\\" type=\\\"number\\\" />\\n                      <button type=\\\"button\\\" onClick={remove}>\\n                        Remove\\n                      </button>\\n                    </label>\\n                  )}\\n                </ArrayField.Items>\\n              </>\\n            );\\n          }}\\n        </ArrayField>\\n        <button type=\\\"submit\\\">Submit</button>\\n      </Form>\\n    </div>\\n  );\\n};\\n```\\n\";","import React from 'react';\nimport withDocs from '../../utils/withDocs';\nimport readme from './README.md';\nimport {\n  Form,\n  Input,\n  ArrayField,\n  Debug,\n  useArrayFieldState\n} from '../../../src';\n\nconst initialValues = {\n  friends: [\n    {\n      name: 'Joe',\n      age: 27\n    },\n    {\n      name: 'Jane',\n      age: 22\n    }\n  ]\n};\n\n// const Test = () => {\n//   const st = useArrayFieldState();\n\n//   return <pre>{JSON.stringify(st, null, 2)}</pre>;\n// };\n\nconst NestedForm = () => (\n  <div>\n    <Form initialValues={initialValues} autoComplete=\"off\">\n      <div style={{ display: 'flex', flexWrap: 'wrap' }}>\n        <div style={{ flex: 1, marginRight: '2rem' }}>\n          <ArrayField name=\"friends\">\n            {({ add }) => {\n              return (\n                <>\n                  <button\n                    onClick={() => {\n                      add();\n                    }}\n                    type=\"button\">\n                    Add\n                  </button>\n                  {/* <Test /> */}\n                  <ArrayField.Items>\n                    {({ remove, name }) => (\n                      <label>\n                        <h5>{name}</h5>\n                        <Input name=\"name\" label=\"Name\" required />\n                        <Input name=\"age\" label=\"Age\" type=\"number\" />\n                        <button type=\"button\" onClick={remove}>\n                          Remove\n                        </button>\n                      </label>\n                    )}\n                  </ArrayField.Items>\n                </>\n              );\n            }}\n          </ArrayField>\n        </div>\n        <div style={{ flex: 2, minWidth: '300px', marginLeft: '3rem' }}>\n          <Debug values />\n        </div>\n      </div>\n    </Form>\n  </div>\n);\n\nexport default withDocs(readme, NestedForm);\n","import ArrayOfFields from './ArrayOfFields';\nimport ArrayOfScopes from './ArrayOfScopes';\n// import DynamicArrays from './DynamicArrays';\nimport ArrayFieldItem from './ArrayFieldItem';\nimport AlternateSyntax from './AlternateSyntax';\nimport HugeArrayForm from './HugeArrayForm';\n// import Swap from './Swap';\nimport NestedFields from './NestedFields';\nimport DependentFieldsInArray from './DependentFields';\n\nexport {\n  ArrayOfFields,\n  ArrayOfScopes,\n  // DynamicArrays,\n  NestedFields,\n  ArrayFieldItem,\n  AlternateSyntax,\n  DependentFieldsInArray,\n  HugeArrayForm\n  // Swap\n};\n","export default \"# Car Color\\n\\nGo ahead and change the color of the Tesla!\\n\\n<!-- STORY -->\\n\\n```jsx\\nimport { Form, Select, Debug } from 'informed';\\n\\nconst Car = () => {\\n  const { value } = useFieldState('color');\\n\\n  return <div className={`car-color-${value}`}>{'...SVG...'}</div>;\\n};\\n\\nconst CarColor = () => (\\n  <Form autocomplete=\\\"off\\\">\\n    <Select name=\\\"color\\\" label=\\\"Color\\\" initialValue=\\\"blue\\\">\\n      <option value=\\\"red\\\">Red</option>\\n      <option value=\\\"green\\\">Green</option>\\n      <option value=\\\"blue\\\">Blue</option>\\n    </Select>\\n    <button type=\\\"submit\\\">Submit</button>\\n    <Debug values />\\n    <br />\\n    <Car />\\n  </Form>\\n);\\n```\\n\";","import React from 'react';\nimport withDocs from '../utils/withDocs';\nimport readme from './README.md';\n\nimport { Form, Select, Debug, useFieldState } from '../../src';\n\nconst SVG = () => {\n  const { value } = useFieldState('color');\n\n  return (\n    <div className={`car-color-${value}`}>\n      <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        width=\"554.349\"\n        height=\"231.889\"\n        viewBox=\"0 0 554.349 231.889\">\n        <g\n          id=\"Group_2\"\n          data-name=\"Group 2\"\n          transform=\"translate(-205.632 -671.078)\">\n          <g\n            id=\"Group_5\"\n            data-name=\"Group 5\"\n            transform=\"translate(206.591 672.034)\">\n            <g\n              id=\"Group_2-2\"\n              data-name=\"Group 2\"\n              transform=\"translate(215.224 0.047)\">\n              <path\n                id=\"Fill-1\"\n                class=\"cls-1\"\n                d=\"M27.812,43.49l50.737,4.193,11.512.455L83.646,57.2l-53.9,3.6S4.7,57.4,9.233,44.982c0,0,3-7.147,18.58-1.492\"\n              />\n              <path\n                id=\"Fill-3\"\n                class=\"cls-2\"\n                d=\"M26.418,50.459l50.737,4.193,11.512.455-6.415,9.057-53.9,3.608s-25.044-3.4-20.513-15.82c0,0,3-7.147,18.58-1.492\"\n              />\n              <path\n                id=\"Fill-5\"\n                class=\"cls-1\"\n                d=\"M41.38,16.641A20.477,20.477,0,1,1,31.839,3.393,20.477,20.477,0,0,1,41.38,16.641\"\n              />\n              <path\n                id=\"Fill-7\"\n                class=\"cls-2\"\n                d=\"M30.368,31.519A20.475,20.475,0,0,1,5.916,7.624,20.466,20.466,0,1,0,41.661,24.691a20.359,20.359,0,0,1-11.293,6.828\"\n              />\n              <path\n                id=\"Stroke-9\"\n                class=\"cls-3\"\n                d=\"M41.38,16.641A20.477,20.477,0,1,1,31.839,3.393,20.477,20.477,0,0,1,41.38,16.641Z\"\n              />\n              <path\n                id=\"Stroke-11\"\n                class=\"cls-3\"\n                d=\"M26.418,43.49l50.737,4.193,11.512.455L82.252,57.2l-53.9,3.6S3.308,57.4,7.839,44.982C7.839,44.982,10.839,37.835,26.418,43.49Z\"\n              />\n              <path\n                id=\"Fill-13\"\n                class=\"cls-1\"\n                d=\"M97.961,57.447a11.3,11.3,0,1,0-22.606.418Z\"\n              />\n              <path\n                id=\"Stroke-15\"\n                class=\"cls-3\"\n                d=\"M97.961,57.447a11.3,11.3,0,1,0-22.606.418Z\"\n              />\n              <path\n                id=\"Fill-17\"\n                class=\"cls-4\"\n                d=\"M35.847,6.319,15.959,15.612s-.855,3.486.558,3.16c2.417-.558,20.667,11.986,20.63,14.868,0,0,11.338-14.311-1.3-27.321\"\n              />\n              <path\n                id=\"Stroke-19\"\n                class=\"cls-3\"\n                d=\"M5.763,32.671l10.545-2.555L34.34,35.928\"\n              />\n              <path id=\"Stroke-21\" class=\"cls-5\" d=\"M1.438,24.66l10.07-2.189\" />\n              <path\n                id=\"Fill-23\"\n                class=\"cls-4\"\n                d=\"M30.456,45.442s-1.7,5.042-.836,6.412c1.38,2.206,8.056,2.684,10.315,1.394C41.645,52.274,43,46,43,46Z\"\n              />\n              <path\n                id=\"Fill-25\"\n                class=\"cls-4\"\n                d=\"M60.565,47.673l2.788,3.067,12.545.836-.836,3.067L61.68,53.806l-5.3-6.133Z\"\n              />\n            </g>\n            <g id=\"Group_3\" data-name=\"Group 3\" transform=\"translate(0 10.083)\">\n              <path\n                id=\"Fill-28\"\n                class=\"cls-6\"\n                d=\"M344.371,48.509s-27.879-26.764-35.127-33.455,0-14.5,0-14.5L406.262,44.6l-61.891,3.717\"\n              />\n              <path\n                id=\"Fill-30\"\n                class=\"cls-7\"\n                d=\"M361.891,32.711S338.287,21,328.437,15.24C319.922,10.26,307.758.929,307.758.929l97.018,44.048-35.264-9.665Z\"\n              />\n              <path\n                id=\"Fill-32\"\n                class=\"cls-8\"\n                d=\"M77.665,30.481,19.3,28.994S2.02,30.11,13.171,42.934c0,0-11.152,1.673-6.691,17.285,0,0-17.236,1.858,4.51,63.191,0,0,1.879,2.81,3.211,3.145,5.377,1.354,19.24,4.786,22.389,5.034,7.111.558,106.5,5.576,106.5,5.576l244.776-3.345,107.1-.558s32.86-.177,40.1-5.576c7.547-5.63,16.17-34.012,16.17-34.012s5.576-26.764-85.309-45.164c0,0-51.855-8.921-78.061-11.709l16.727,7.806L347.141,48.23l-4.443.28H247.911s-25.648-1.673-45.164-40.145L41.236,36.986\"\n              />\n              <path\n                id=\"Fill-34\"\n                class=\"cls-9\"\n                d=\"M144.045,137.043a56.91,56.91,0,1,0-111.33-6.99Z\"\n              />\n              <path\n                id=\"Fill-36\"\n                class=\"cls-9\"\n                d=\"M508.571,132.267a56.894,56.894,0,1,0-110.681,2.078Z\"\n              />\n              <path\n                id=\"Fill-38\"\n                class=\"cls-10\"\n                d=\"M69.292,42.664,197.055,20.073c19.932,39.3,46.13,41.005,46.13,41.005H340l4.539-.287,58.678-3.7s46-.278,63.123,2.012c55.016,7.352,78.629,27.308,84.537,36.807.226-.713.352-1.122.352-1.122S556.8,68.024,465.92,49.624c0,0-51.855-8.921-78.061-11.709l16.727,7.806-57.449,3.623-4.442.28H247.912s-25.648-1.673-45.164-40.145L41.237,38.1l36.429-6.5-58.36-1.491s-12.77-.084-6.457,10.036Z\"\n              />\n              <path\n                id=\"Stroke-40\"\n                class=\"cls-3\"\n                d=\"M78.223,30.481,19.863,29S2.577,30.11,13.729,42.934c0,0-11.152,1.673-6.691,17.285,0,0-17.236,1.858,4.51,63.191,0,0,1.879,2.81,3.211,3.145,5.377,1.354,19.24,4.786,22.389,5.034,7.111.558,106.5,5.576,106.5,5.576l244.776-3.345,107.1-.558s32.86-.177,40.1-5.576c7.547-5.63,16.17-34.012,16.17-34.012S557.365,66.91,466.48,48.51c0,0-51.855-8.921-78.061-11.709l16.727,7.806L347.7,48.23l-4.443.28H248.468S222.82,46.837,203.3,8.364L41.794,36.986\"\n              />\n              <path\n                id=\"Stroke-42\"\n                class=\"cls-3\"\n                d=\"M343.256,48.509s-27.879-26.764-35.127-33.455,0-14.5,0-14.5L405.147,44.6l-61.891,3.717\"\n              />\n              <path\n                id=\"Fill-44\"\n                class=\"cls-4\"\n                d=\"M308.129.558,309.8,9.9l43.909,37.636-10.455.79L308.129,15.055s-6.318-5.947,0-14.5\"\n              />\n              <path\n                id=\"Fill-46\"\n                class=\"cls-8\"\n                d=\"M320.3,33.594s-2.927,12.267,5.855,17.145,13.8-8.921,13.8-8.921-.418-8.5-19.655-8.224\"\n              />\n              <path\n                id=\"Fill-48\"\n                class=\"cls-9\"\n                d=\"M319.655,35.731s3.8-2.6,9.432,5.715c6.226,9.2,11.43,2.88,11.43,2.88s-1.952-14.4-20.862-8.6\"\n              />\n              <path\n                id=\"Stroke-50\"\n                class=\"cls-11\"\n                d=\"M320.953,33.733S318.026,46,326.808,50.879s13.8-8.921,13.8-8.921S340.19,33.455,320.953,33.733Z\"\n              />\n              <g id=\"Group-55\" transform=\"translate(133.818 113.745)\">\n                <path id=\"Fill-52\" class=\"cls-1\" d=\"M274.953,1.673.162.558\" />\n                <path id=\"Stroke-54\" class=\"cls-3\" d=\"M274.953,1.673.162.558\" />\n              </g>\n              <path\n                id=\"Stroke-56\"\n                class=\"cls-5\"\n                d=\"M361.656,47.394s17.842,26.224-5.018,67.838\"\n              />\n              <path\n                id=\"Stroke-58\"\n                class=\"cls-12\"\n                d=\"M27.668,55.758s35.87,25.277,43.863,25.277\"\n              />\n              <path\n                id=\"Stroke-60\"\n                class=\"cls-5\"\n                d=\"M157.584,15.612,147.171,38.2l-19.089-.664s-26.609,27.9-24.873,40.525\"\n              />\n              <path\n                id=\"Fill-62\"\n                class=\"cls-4\"\n                d=\"M7.038,60.218l3.9,4.461L27.111,55.2s1.673-7.806-13.382-12.267c0,0-11.337,3.159-6.691,17.285\"\n              />\n              <path\n                id=\"Stroke-64\"\n                class=\"cls-3\"\n                d=\"M7.038,60.218l3.9,4.461L27.111,55.2s1.673-7.806-13.382-12.267C13.729,42.933,2.392,46.093,7.038,60.218Z\"\n              />\n              <path\n                id=\"Stroke-66\"\n                class=\"cls-5\"\n                d=\"M188.25,11.709s9.479,34.012,2.23,36.8,26.764,66.352,26.764,66.352\"\n              />\n              <path\n                id=\"Stroke-68\"\n                class=\"cls-5\"\n                d=\"M482.65,88.1l34.942-23.79\"\n              />\n              <path\n                id=\"Stroke-70\"\n                class=\"cls-5\"\n                d=\"M179.318,34.75a7.429,7.429,0,1,1-7.429-7.429,7.429,7.429,0,0,1,7.429,7.429Z\"\n              />\n            </g>\n            {/* ------------------------------------------------- Wheel1 ------------------------------------------------- */}\n            <g transform=\"translate(39.03 80.338)\">\n              <g transform=\"translate(50.00 54.0)\">\n                <g id=\"Circleelement\">\n                  <g transform=\"translate(-50.00 -54.0)\">\n                    <path\n                      id=\"Fill-73\"\n                      class=\"cls-13\"\n                      d=\"M93.775,54.234A44.065,44.065,0,1,1,49.71,10.168,44.065,44.065,0,0,1,93.775,54.234\"\n                    />\n                    <path\n                      id=\"Fill-75\"\n                      class=\"cls-4\"\n                      d=\"M50.469,89.714H49.414a34.789,34.789,0,0,1-10.033-1.4,2.454,2.454,0,0,1-1.915-3.484c.761-2.6,1.693-5.373,2.944-8.685a53.247,53.247,0,0,1,3.116-6.918,13.824,13.824,0,0,1,1.717-2.453,2.919,2.919,0,0,1,2.674-.981,11.237,11.237,0,0,0,2.208,0,2.77,2.77,0,0,1,2.7,1.374,11.554,11.554,0,0,1,1.473,3.9,57.514,57.514,0,0,1,.98,6.451c.245,2.209.418,4.613.589,7.361V85.2a15.139,15.139,0,0,1,0,2.11A2.231,2.231,0,0,1,54,89.346a19.957,19.957,0,0,1-2.6.27Z\"\n                    />\n                    <path\n                      id=\"Fill-77\"\n                      class=\"cls-4\"\n                      d=\"M62.957,86.869a2.136,2.136,0,0,1-2.012-1.449c-.393-.956-.711-1.937-1.032-2.943l-.318-.932c-.957-2.895-1.963-5.742-2.969-8.588l-1.2-3.386c-.343-1-.613-1.937-.834-2.845a2.563,2.563,0,0,1,4-2.454,12.045,12.045,0,0,1,1.693,1.619c1.865,2.037,3.533,4.221,5.152,6.33,2.11,2.748,3.7,4.908,5.177,6.993a5.7,5.7,0,0,1,.515.808,2.515,2.515,0,0,1,.368.492l.123.49a2.256,2.256,0,0,1-.883,1.938A20.153,20.153,0,0,1,68.6,84.39a31.353,31.353,0,0,1-3.95,2.11,4.253,4.253,0,0,1-.662.245,2.63,2.63,0,0,1-1.007.123Z\"\n                    />\n                    <path\n                      id=\"Fill-79\"\n                      class=\"cls-4\"\n                      d=\"M29.321,83.115a3.164,3.164,0,0,1-1.815-.762A33.386,33.386,0,0,1,22.6,77.914a2.7,2.7,0,0,1-.908-2.111,2.623,2.623,0,0,1,1.3-1.912c1.129-.859,2.257-1.718,3.41-2.454,2.012-1.471,3.8-2.845,5.618-4.219l3.827-2.9A22.483,22.483,0,0,1,38.5,62.555a2.862,2.862,0,0,1,1.1-.44,2.626,2.626,0,0,1,2.183,1.153,2.452,2.452,0,0,1,.27,2.527,22.325,22.325,0,0,1-1.84,3.337c-2.085,3.287-4.244,6.33-6.845,9.985l-.221.294q-.907,1.325-1.914,2.575a2.648,2.648,0,0,1-1.914,1.13\"\n                    />\n                    <path\n                      id=\"Fill-81\"\n                      class=\"cls-4\"\n                      d=\"M77.431,75.215a3.113,3.113,0,0,1-1.693-.638c-2.453-1.668-4.907-3.484-6.82-5.054a65.292,65.292,0,0,1-5.592-4.907A16.409,16.409,0,0,1,60.871,61.6a2.87,2.87,0,0,1-.146-2.87,13.888,13.888,0,0,0,.785-2.16,2.747,2.747,0,0,1,2.06-2.06,9.842,9.842,0,0,1,3.018-.222,37.675,37.675,0,0,1,5.765.737c3.386.661,6.895,1.472,10.4,2.453a5.314,5.314,0,0,1,.81.293,2.259,2.259,0,0,1,1.547,2.773c-.2,1.006-.443,1.987-.713,2.943a36.357,36.357,0,0,1-4.906,10.354,2.456,2.456,0,0,1-2.062,1.374\"\n                    />\n                    <path\n                      id=\"Fill-83\"\n                      class=\"cls-14\"\n                      d=\"M83.221,60.2l-1.791-.417,1.791.368-1.791-.368Z\"\n                    />\n                    <path\n                      id=\"Fill-85\"\n                      class=\"cls-4\"\n                      d=\"M18.576,70.014a2.134,2.134,0,0,1-1.987-1.251c-.417-.811-.736-1.644-1.079-2.453a37.066,37.066,0,0,1-1.938-7.36,34.345,34.345,0,0,1-.393-4.662,2.257,2.257,0,0,1,2.052-2.444c.051,0,.1-.008.156-.008a33.14,33.14,0,0,1,3.459,0H21.03c2.035,0,4.342.123,6.6.318a32.538,32.538,0,0,1,5.985.86,11.907,11.907,0,0,1,1.915.687,2.845,2.845,0,0,1,1.717,2.11,12.388,12.388,0,0,0,.686,2.453,2.67,2.67,0,0,1-.514,2.624A10.723,10.723,0,0,1,34.7,63.342a58.8,58.8,0,0,1-6.452,3.238c-3.362,1.349-5.814,2.38-8.268,3.263l-.492.147a3.229,3.229,0,0,1-.883.123Z\"\n                    />\n                    <path\n                      id=\"Fill-87\"\n                      class=\"cls-14\"\n                      d=\"M18.576,66.358,19.337,68l-.59-1.645Z\"\n                    />\n                    <path id=\"Fill-89\" class=\"cls-14\" d=\"M19.95,67.094Z\" />\n                    <path\n                      id=\"Fill-91\"\n                      class=\"cls-4\"\n                      d=\"M65.336,52.791H63.668a2.453,2.453,0,0,1-1.178-4.71,20.867,20.867,0,0,1,3.337-1.644c4.146-1.667,8.637-3.238,14.72-5.1a7.143,7.143,0,0,1,.785-.222,2.26,2.26,0,0,1,2.8,1.5c.318.981.588,1.963.808,2.969a35.016,35.016,0,0,1,.687,4.146,2.282,2.282,0,0,1-2.428,2.8h-6.65l-10.525.27Z\"\n                    />\n                    <path\n                      id=\"Fill-93\"\n                      class=\"cls-4\"\n                      d=\"M35.823,50.387a18.963,18.963,0,0,1-3.067-.588c-5.446-1.375-10.8-3.067-15.407-4.589a8.25,8.25,0,0,1-.981-.391,2.111,2.111,0,0,1-1.338-2.667.952.952,0,0,1,.038-.1A22.1,22.1,0,0,1,16,39.592,39.216,39.216,0,0,1,18.11,35.4a2.233,2.233,0,0,1,3.389-.86c.859.54,1.668,1.13,2.453,1.717l.736.54c2.012,1.424,4.023,2.846,6.06,4.244l4.465,3.092a19.58,19.58,0,0,1,2.453,1.962,2.575,2.575,0,0,1-1.84,4.367Z\"\n                    />\n                    <path\n                      id=\"Fill-95\"\n                      class=\"cls-14\"\n                      d=\"M16.81,42.61l1.742.589Z\"\n                    />\n                    <path\n                      id=\"Fill-97\"\n                      class=\"cls-4\"\n                      d=\"M59.841,45.383a2.6,2.6,0,0,1-1.791-.736A13.717,13.717,0,0,0,56.063,43.1a2.823,2.823,0,0,1-1.251-2.6,12.234,12.234,0,0,1,.981-3.754A58.68,58.68,0,0,1,59.4,29.828c1.4-2.453,2.7-4.491,4.023-6.452a8.079,8.079,0,0,1,.54-.761,2.281,2.281,0,0,1,3.067-.762,38.019,38.019,0,0,1,5.4,3.657,36.428,36.428,0,0,1,5.913,6.084,2.182,2.182,0,0,1-.188,3.081,1.653,1.653,0,0,1-.13.108,22.453,22.453,0,0,1-2.282,1.742l-.417.319A110.811,110.811,0,0,1,65.7,43.125a22.811,22.811,0,0,1-4.391,2.011l-.761.173h-.515Z\"\n                    />\n                    <path\n                      id=\"Fill-99\"\n                      class=\"cls-4\"\n                      d=\"M39.847,44.67a3.244,3.244,0,0,1-1.179-.245,11.676,11.676,0,0,1-2.453-1.57,42.669,42.669,0,0,1-3.973-3.631c-2.331-2.453-4.686-5.175-7.213-8.317a5.8,5.8,0,0,1-.466-.638l-.172-.245a2.181,2.181,0,0,1,.49-2.992,36.746,36.746,0,0,1,8.071-5.667,37.562,37.562,0,0,1,4.761-2.037,2.159,2.159,0,0,1,2.821,1.166l.025.06a16.047,16.047,0,0,1,.785,2.134,111.417,111.417,0,0,1,3.165,11.581,24,24,0,0,1,.638,4.906v1.277a2.724,2.724,0,0,1-1.423,2.109,15.33,15.33,0,0,0-2.11,1.447,2.721,2.721,0,0,1-1.766.662\"\n                    />\n                    <path\n                      id=\"Fill-101\"\n                      class=\"cls-4\"\n                      d=\"M50.714,41.384h-.269a2.452,2.452,0,0,1-2.282-1.889,22.659,22.659,0,0,1-.467-3.509c-.2-2.65-.269-5.274-.318-8.07v-7.8a5.882,5.882,0,0,1,0-.687,2.11,2.11,0,0,1,2.158-2.037,34.888,34.888,0,0,1,3.95.246,35.9,35.9,0,0,1,3.608.588,2.451,2.451,0,0,1,1.643.958,2.258,2.258,0,0,1,.222,1.79c-.2.811-.466,1.619-.711,2.454l-.2.563c-1.129,3.509-2.183,7.042-3.237,10.6L54.149,36.8a27.178,27.178,0,0,1-1.1,3.165,2.454,2.454,0,0,1-2.258,1.423Z\"\n                    />\n                    <path\n                      id=\"Fill-103\"\n                      class=\"cls-15\"\n                      d=\"M49.414,86.034h2.8v-.86c-.148-2.673-.345-4.906-.564-7.163a57.925,57.925,0,0,0-.909-6.035,11.049,11.049,0,0,0-.785-2.454,15.835,15.835,0,0,1-2.158,0,8.592,8.592,0,0,0-1.007,1.522,47.992,47.992,0,0,0-2.845,6.427c-1.105,2.872-1.939,5.3-2.626,7.581a30.368,30.368,0,0,0,8.1.982\"\n                    />\n                    <path\n                      id=\"Fill-105\"\n                      class=\"cls-15\"\n                      d=\"M59.767,70.7l.319.907c1.03,2.895,2.036,5.765,3.018,8.661l.319.981c.147.49.294.956.466,1.447.859-.443,1.766-.932,2.7-1.521l.761-.466c-1.374-1.914-2.869-3.925-4.907-6.477-.761-1.081-1.717-2.332-2.674-3.533\"\n                    />\n                    <path\n                      id=\"Fill-107\"\n                      class=\"cls-15\"\n                      d=\"M26.083,76.2A33.615,33.615,0,0,0,29,78.869l1.251-1.717.221-.318c2.159-2.993,4-5.594,5.716-8.219L34.3,70.038c-1.815,1.4-3.654,2.772-5.5,4.146Z\"\n                    />\n                    <path\n                      id=\"Fill-109\"\n                      class=\"cls-15\"\n                      d=\"M64.134,60.053a12.148,12.148,0,0,0,1.742,2.036,63.623,63.623,0,0,0,5.275,4.539c1.815,1.424,3.754,2.921,5.814,4.342a32.223,32.223,0,0,0,3.8-8.487,15.062,15.062,0,0,0,.417-1.6C77.945,60,74.73,59.239,71.589,58.65a35.667,35.667,0,0,0-5.2-.686,5.885,5.885,0,0,0-1.521,0,18.336,18.336,0,0,1-.736,2.084\"\n                    />\n                    <path\n                      id=\"Fill-111\"\n                      class=\"cls-15\"\n                      d=\"M16.932,55.466a25.5,25.5,0,0,0,.319,2.969,33.543,33.543,0,0,0,1.717,6.6l.443,1.054c2.134-.808,4.439-1.741,7.359-2.992a55.023,55.023,0,0,0,6.011-3.018,9.871,9.871,0,0,0,1.6-1.178,16.161,16.161,0,0,1-.59-2.062l-1.03-.342a32.165,32.165,0,0,0-5.422-.736c-2.183-.173-4.416-.245-6.353-.294Z\"\n                    />\n                    <path\n                      id=\"Fill-113\"\n                      class=\"cls-15\"\n                      d=\"M80.915,44.989c-4.636,1.472-8.366,2.748-11.751,4.048l7.237-.2h5.348c-.147-.858-.294-1.668-.466-2.453s-.245-.957-.368-1.4\"\n                    />\n                    <path\n                      id=\"Fill-115\"\n                      class=\"cls-15\"\n                      d=\"M19.017,41.923c3.631,1.179,7.729,2.453,11.923,3.631l-2.257-1.569c-2.061-1.424-4.1-2.822-6.133-4.269l-.761-.564-1.127-.811a25.38,25.38,0,0,0-1.251,2.626c-.147.293-.271.637-.394.956\"\n                    />\n                    <path\n                      id=\"Fill-117\"\n                      class=\"cls-15\"\n                      d=\"M58.541,40.328a14.1,14.1,0,0,1,1.644,1.3,18.1,18.1,0,0,0,3.63-1.668,108.514,108.514,0,0,0,9.373-6.06l.417-.319,1.006-.711A33.888,33.888,0,0,0,70.1,28.405a34.279,34.279,0,0,0-3.8-2.674c-1.2,1.84-2.453,3.8-3.73,6.011a53.391,53.391,0,0,0-3.335,6.427,8.338,8.338,0,0,0-.687,2.16\"\n                    />\n                    <path\n                      id=\"Fill-119\"\n                      class=\"cls-15\"\n                      d=\"M28.168,28.994c2.453,2.919,4.588,5.471,6.771,7.777A41.162,41.162,0,0,0,38.4,40.058a9.817,9.817,0,0,0,1.276.859,19.779,19.779,0,0,1,1.742-1.178.912.912,0,0,1,0-.27,19.346,19.346,0,0,0-.564-4.367,103.606,103.606,0,0,0-3.067-11.015,5.18,5.18,0,0,0-.245-.736A30.145,30.145,0,0,0,34.5,24.725a32.244,32.244,0,0,0-6.33,4.269\"\n                    />\n                    <path\n                      id=\"Fill-121\"\n                      class=\"cls-15\"\n                      d=\"M51.009,21.069v6.673c0,1.963,0,3.827.171,5.644,1.056-3.558,2.111-7.116,3.264-10.649l.171-.588a2.861,2.861,0,0,1,.246-.736l-1.791-.245a19.769,19.769,0,0,0-1.988-.1Z\"\n                    />\n                    <path\n                      id=\"Fill-123\"\n                      class=\"cls-4\"\n                      d=\"M49.414,4.461A49.067,49.067,0,1,0,98.48,53.527,49.067,49.067,0,0,0,49.414,4.461m0,7.36A41.707,41.707,0,1,1,7.708,53.527,41.707,41.707,0,0,1,49.414,11.821\"\n                    />\n                    <path\n                      id=\"Fill-125\"\n                      class=\"cls-14\"\n                      d=\"M49.414,49.847a3.68,3.68,0,1,1-3.68,3.68,3.68,3.68,0,0,1,3.68-3.68\"\n                    />\n                  </g>\n                </g>\n              </g>\n            </g>\n            {/* ------------------------------------------------- Wheel2 ------------------------------------------------- */}\n            <g transform=\"translate(404.03 80.338)\">\n              <g transform=\"translate(50.00 54.0)\">\n                <g id=\"Circleelement\">\n                  <g transform=\"translate(-50.00 -54.0)\">\n                    <path\n                      id=\"Fill-73\"\n                      class=\"cls-13\"\n                      d=\"M93.775,54.234A44.065,44.065,0,1,1,49.71,10.168,44.065,44.065,0,0,1,93.775,54.234\"\n                    />\n                    <path\n                      id=\"Fill-75\"\n                      class=\"cls-4\"\n                      d=\"M50.469,89.714H49.414a34.789,34.789,0,0,1-10.033-1.4,2.454,2.454,0,0,1-1.915-3.484c.761-2.6,1.693-5.373,2.944-8.685a53.247,53.247,0,0,1,3.116-6.918,13.824,13.824,0,0,1,1.717-2.453,2.919,2.919,0,0,1,2.674-.981,11.237,11.237,0,0,0,2.208,0,2.77,2.77,0,0,1,2.7,1.374,11.554,11.554,0,0,1,1.473,3.9,57.514,57.514,0,0,1,.98,6.451c.245,2.209.418,4.613.589,7.361V85.2a15.139,15.139,0,0,1,0,2.11A2.231,2.231,0,0,1,54,89.346a19.957,19.957,0,0,1-2.6.27Z\"\n                    />\n                    <path\n                      id=\"Fill-77\"\n                      class=\"cls-4\"\n                      d=\"M62.957,86.869a2.136,2.136,0,0,1-2.012-1.449c-.393-.956-.711-1.937-1.032-2.943l-.318-.932c-.957-2.895-1.963-5.742-2.969-8.588l-1.2-3.386c-.343-1-.613-1.937-.834-2.845a2.563,2.563,0,0,1,4-2.454,12.045,12.045,0,0,1,1.693,1.619c1.865,2.037,3.533,4.221,5.152,6.33,2.11,2.748,3.7,4.908,5.177,6.993a5.7,5.7,0,0,1,.515.808,2.515,2.515,0,0,1,.368.492l.123.49a2.256,2.256,0,0,1-.883,1.938A20.153,20.153,0,0,1,68.6,84.39a31.353,31.353,0,0,1-3.95,2.11,4.253,4.253,0,0,1-.662.245,2.63,2.63,0,0,1-1.007.123Z\"\n                    />\n                    <path\n                      id=\"Fill-79\"\n                      class=\"cls-4\"\n                      d=\"M29.321,83.115a3.164,3.164,0,0,1-1.815-.762A33.386,33.386,0,0,1,22.6,77.914a2.7,2.7,0,0,1-.908-2.111,2.623,2.623,0,0,1,1.3-1.912c1.129-.859,2.257-1.718,3.41-2.454,2.012-1.471,3.8-2.845,5.618-4.219l3.827-2.9A22.483,22.483,0,0,1,38.5,62.555a2.862,2.862,0,0,1,1.1-.44,2.626,2.626,0,0,1,2.183,1.153,2.452,2.452,0,0,1,.27,2.527,22.325,22.325,0,0,1-1.84,3.337c-2.085,3.287-4.244,6.33-6.845,9.985l-.221.294q-.907,1.325-1.914,2.575a2.648,2.648,0,0,1-1.914,1.13\"\n                    />\n                    <path\n                      id=\"Fill-81\"\n                      class=\"cls-4\"\n                      d=\"M77.431,75.215a3.113,3.113,0,0,1-1.693-.638c-2.453-1.668-4.907-3.484-6.82-5.054a65.292,65.292,0,0,1-5.592-4.907A16.409,16.409,0,0,1,60.871,61.6a2.87,2.87,0,0,1-.146-2.87,13.888,13.888,0,0,0,.785-2.16,2.747,2.747,0,0,1,2.06-2.06,9.842,9.842,0,0,1,3.018-.222,37.675,37.675,0,0,1,5.765.737c3.386.661,6.895,1.472,10.4,2.453a5.314,5.314,0,0,1,.81.293,2.259,2.259,0,0,1,1.547,2.773c-.2,1.006-.443,1.987-.713,2.943a36.357,36.357,0,0,1-4.906,10.354,2.456,2.456,0,0,1-2.062,1.374\"\n                    />\n                    <path\n                      id=\"Fill-83\"\n                      class=\"cls-14\"\n                      d=\"M83.221,60.2l-1.791-.417,1.791.368-1.791-.368Z\"\n                    />\n                    <path\n                      id=\"Fill-85\"\n                      class=\"cls-4\"\n                      d=\"M18.576,70.014a2.134,2.134,0,0,1-1.987-1.251c-.417-.811-.736-1.644-1.079-2.453a37.066,37.066,0,0,1-1.938-7.36,34.345,34.345,0,0,1-.393-4.662,2.257,2.257,0,0,1,2.052-2.444c.051,0,.1-.008.156-.008a33.14,33.14,0,0,1,3.459,0H21.03c2.035,0,4.342.123,6.6.318a32.538,32.538,0,0,1,5.985.86,11.907,11.907,0,0,1,1.915.687,2.845,2.845,0,0,1,1.717,2.11,12.388,12.388,0,0,0,.686,2.453,2.67,2.67,0,0,1-.514,2.624A10.723,10.723,0,0,1,34.7,63.342a58.8,58.8,0,0,1-6.452,3.238c-3.362,1.349-5.814,2.38-8.268,3.263l-.492.147a3.229,3.229,0,0,1-.883.123Z\"\n                    />\n                    <path\n                      id=\"Fill-87\"\n                      class=\"cls-14\"\n                      d=\"M18.576,66.358,19.337,68l-.59-1.645Z\"\n                    />\n                    <path id=\"Fill-89\" class=\"cls-14\" d=\"M19.95,67.094Z\" />\n                    <path\n                      id=\"Fill-91\"\n                      class=\"cls-4\"\n                      d=\"M65.336,52.791H63.668a2.453,2.453,0,0,1-1.178-4.71,20.867,20.867,0,0,1,3.337-1.644c4.146-1.667,8.637-3.238,14.72-5.1a7.143,7.143,0,0,1,.785-.222,2.26,2.26,0,0,1,2.8,1.5c.318.981.588,1.963.808,2.969a35.016,35.016,0,0,1,.687,4.146,2.282,2.282,0,0,1-2.428,2.8h-6.65l-10.525.27Z\"\n                    />\n                    <path\n                      id=\"Fill-93\"\n                      class=\"cls-4\"\n                      d=\"M35.823,50.387a18.963,18.963,0,0,1-3.067-.588c-5.446-1.375-10.8-3.067-15.407-4.589a8.25,8.25,0,0,1-.981-.391,2.111,2.111,0,0,1-1.338-2.667.952.952,0,0,1,.038-.1A22.1,22.1,0,0,1,16,39.592,39.216,39.216,0,0,1,18.11,35.4a2.233,2.233,0,0,1,3.389-.86c.859.54,1.668,1.13,2.453,1.717l.736.54c2.012,1.424,4.023,2.846,6.06,4.244l4.465,3.092a19.58,19.58,0,0,1,2.453,1.962,2.575,2.575,0,0,1-1.84,4.367Z\"\n                    />\n                    <path\n                      id=\"Fill-95\"\n                      class=\"cls-14\"\n                      d=\"M16.81,42.61l1.742.589Z\"\n                    />\n                    <path\n                      id=\"Fill-97\"\n                      class=\"cls-4\"\n                      d=\"M59.841,45.383a2.6,2.6,0,0,1-1.791-.736A13.717,13.717,0,0,0,56.063,43.1a2.823,2.823,0,0,1-1.251-2.6,12.234,12.234,0,0,1,.981-3.754A58.68,58.68,0,0,1,59.4,29.828c1.4-2.453,2.7-4.491,4.023-6.452a8.079,8.079,0,0,1,.54-.761,2.281,2.281,0,0,1,3.067-.762,38.019,38.019,0,0,1,5.4,3.657,36.428,36.428,0,0,1,5.913,6.084,2.182,2.182,0,0,1-.188,3.081,1.653,1.653,0,0,1-.13.108,22.453,22.453,0,0,1-2.282,1.742l-.417.319A110.811,110.811,0,0,1,65.7,43.125a22.811,22.811,0,0,1-4.391,2.011l-.761.173h-.515Z\"\n                    />\n                    <path\n                      id=\"Fill-99\"\n                      class=\"cls-4\"\n                      d=\"M39.847,44.67a3.244,3.244,0,0,1-1.179-.245,11.676,11.676,0,0,1-2.453-1.57,42.669,42.669,0,0,1-3.973-3.631c-2.331-2.453-4.686-5.175-7.213-8.317a5.8,5.8,0,0,1-.466-.638l-.172-.245a2.181,2.181,0,0,1,.49-2.992,36.746,36.746,0,0,1,8.071-5.667,37.562,37.562,0,0,1,4.761-2.037,2.159,2.159,0,0,1,2.821,1.166l.025.06a16.047,16.047,0,0,1,.785,2.134,111.417,111.417,0,0,1,3.165,11.581,24,24,0,0,1,.638,4.906v1.277a2.724,2.724,0,0,1-1.423,2.109,15.33,15.33,0,0,0-2.11,1.447,2.721,2.721,0,0,1-1.766.662\"\n                    />\n                    <path\n                      id=\"Fill-101\"\n                      class=\"cls-4\"\n                      d=\"M50.714,41.384h-.269a2.452,2.452,0,0,1-2.282-1.889,22.659,22.659,0,0,1-.467-3.509c-.2-2.65-.269-5.274-.318-8.07v-7.8a5.882,5.882,0,0,1,0-.687,2.11,2.11,0,0,1,2.158-2.037,34.888,34.888,0,0,1,3.95.246,35.9,35.9,0,0,1,3.608.588,2.451,2.451,0,0,1,1.643.958,2.258,2.258,0,0,1,.222,1.79c-.2.811-.466,1.619-.711,2.454l-.2.563c-1.129,3.509-2.183,7.042-3.237,10.6L54.149,36.8a27.178,27.178,0,0,1-1.1,3.165,2.454,2.454,0,0,1-2.258,1.423Z\"\n                    />\n                    <path\n                      id=\"Fill-103\"\n                      class=\"cls-15\"\n                      d=\"M49.414,86.034h2.8v-.86c-.148-2.673-.345-4.906-.564-7.163a57.925,57.925,0,0,0-.909-6.035,11.049,11.049,0,0,0-.785-2.454,15.835,15.835,0,0,1-2.158,0,8.592,8.592,0,0,0-1.007,1.522,47.992,47.992,0,0,0-2.845,6.427c-1.105,2.872-1.939,5.3-2.626,7.581a30.368,30.368,0,0,0,8.1.982\"\n                    />\n                    <path\n                      id=\"Fill-105\"\n                      class=\"cls-15\"\n                      d=\"M59.767,70.7l.319.907c1.03,2.895,2.036,5.765,3.018,8.661l.319.981c.147.49.294.956.466,1.447.859-.443,1.766-.932,2.7-1.521l.761-.466c-1.374-1.914-2.869-3.925-4.907-6.477-.761-1.081-1.717-2.332-2.674-3.533\"\n                    />\n                    <path\n                      id=\"Fill-107\"\n                      class=\"cls-15\"\n                      d=\"M26.083,76.2A33.615,33.615,0,0,0,29,78.869l1.251-1.717.221-.318c2.159-2.993,4-5.594,5.716-8.219L34.3,70.038c-1.815,1.4-3.654,2.772-5.5,4.146Z\"\n                    />\n                    <path\n                      id=\"Fill-109\"\n                      class=\"cls-15\"\n                      d=\"M64.134,60.053a12.148,12.148,0,0,0,1.742,2.036,63.623,63.623,0,0,0,5.275,4.539c1.815,1.424,3.754,2.921,5.814,4.342a32.223,32.223,0,0,0,3.8-8.487,15.062,15.062,0,0,0,.417-1.6C77.945,60,74.73,59.239,71.589,58.65a35.667,35.667,0,0,0-5.2-.686,5.885,5.885,0,0,0-1.521,0,18.336,18.336,0,0,1-.736,2.084\"\n                    />\n                    <path\n                      id=\"Fill-111\"\n                      class=\"cls-15\"\n                      d=\"M16.932,55.466a25.5,25.5,0,0,0,.319,2.969,33.543,33.543,0,0,0,1.717,6.6l.443,1.054c2.134-.808,4.439-1.741,7.359-2.992a55.023,55.023,0,0,0,6.011-3.018,9.871,9.871,0,0,0,1.6-1.178,16.161,16.161,0,0,1-.59-2.062l-1.03-.342a32.165,32.165,0,0,0-5.422-.736c-2.183-.173-4.416-.245-6.353-.294Z\"\n                    />\n                    <path\n                      id=\"Fill-113\"\n                      class=\"cls-15\"\n                      d=\"M80.915,44.989c-4.636,1.472-8.366,2.748-11.751,4.048l7.237-.2h5.348c-.147-.858-.294-1.668-.466-2.453s-.245-.957-.368-1.4\"\n                    />\n                    <path\n                      id=\"Fill-115\"\n                      class=\"cls-15\"\n                      d=\"M19.017,41.923c3.631,1.179,7.729,2.453,11.923,3.631l-2.257-1.569c-2.061-1.424-4.1-2.822-6.133-4.269l-.761-.564-1.127-.811a25.38,25.38,0,0,0-1.251,2.626c-.147.293-.271.637-.394.956\"\n                    />\n                    <path\n                      id=\"Fill-117\"\n                      class=\"cls-15\"\n                      d=\"M58.541,40.328a14.1,14.1,0,0,1,1.644,1.3,18.1,18.1,0,0,0,3.63-1.668,108.514,108.514,0,0,0,9.373-6.06l.417-.319,1.006-.711A33.888,33.888,0,0,0,70.1,28.405a34.279,34.279,0,0,0-3.8-2.674c-1.2,1.84-2.453,3.8-3.73,6.011a53.391,53.391,0,0,0-3.335,6.427,8.338,8.338,0,0,0-.687,2.16\"\n                    />\n                    <path\n                      id=\"Fill-119\"\n                      class=\"cls-15\"\n                      d=\"M28.168,28.994c2.453,2.919,4.588,5.471,6.771,7.777A41.162,41.162,0,0,0,38.4,40.058a9.817,9.817,0,0,0,1.276.859,19.779,19.779,0,0,1,1.742-1.178.912.912,0,0,1,0-.27,19.346,19.346,0,0,0-.564-4.367,103.606,103.606,0,0,0-3.067-11.015,5.18,5.18,0,0,0-.245-.736A30.145,30.145,0,0,0,34.5,24.725a32.244,32.244,0,0,0-6.33,4.269\"\n                    />\n                    <path\n                      id=\"Fill-121\"\n                      class=\"cls-15\"\n                      d=\"M51.009,21.069v6.673c0,1.963,0,3.827.171,5.644,1.056-3.558,2.111-7.116,3.264-10.649l.171-.588a2.861,2.861,0,0,1,.246-.736l-1.791-.245a19.769,19.769,0,0,0-1.988-.1Z\"\n                    />\n                    <path\n                      id=\"Fill-123\"\n                      class=\"cls-4\"\n                      d=\"M49.414,4.461A49.067,49.067,0,1,0,98.48,53.527,49.067,49.067,0,0,0,49.414,4.461m0,7.36A41.707,41.707,0,1,1,7.708,53.527,41.707,41.707,0,0,1,49.414,11.821\"\n                    />\n                    <path\n                      id=\"Fill-125\"\n                      class=\"cls-14\"\n                      d=\"M49.414,49.847a3.68,3.68,0,1,1-3.68,3.68,3.68,3.68,0,0,1,3.68-3.68\"\n                    />\n                  </g>\n                </g>\n              </g>\n            </g>\n          </g>\n        </g>\n      </svg>\n    </div>\n  );\n};\n\nconst Basic = () => (\n  <Form autocomplete=\"off\">\n    <Select name=\"color\" label=\"Color\" initialValue=\"blue\">\n      <option value=\"red\">Red</option>\n      <option value=\"green\">Green</option>\n      <option value=\"blue\">Blue</option>\n      <option value=\"pink\">Pink</option>\n    </Select>\n    <button type=\"submit\">Submit</button>\n    <Debug values />\n    <br />\n    <SVG />\n  </Form>\n);\n\nexport default withDocs(readme, Basic);\n","export default \"# Conditional Props\\n\\nSometimes you need to conditionally change the props.\\n\\n<!-- STORY -->\\n\\n```jsx\\nimport { Form, Input, Select, useConditional, Debug } from 'informed';\\n\\nconst CarSelect = () => {\\n  const evaluate = ({ formState, formApi }) => {\\n    if (!formState.values.age || formState.values.age < 16) {\\n      formApi.clearValue('car');\\n      return { disabled: true };\\n    }\\n    return { disabled: false };\\n  };\\n\\n  const { disabled } = useConditional({\\n    evaluate,\\n    evaluateWhen: ['age']\\n  });\\n\\n  return (\\n    <Select name=\\\"car\\\" label=\\\"Car\\\" initialValue=\\\"ms\\\" disabled={disabled}>\\n      <option value=\\\"ms\\\">Model S</option>\\n      <option value=\\\"m3\\\">Model 3</option>\\n      <option value=\\\"mx\\\">Model X</option>\\n      <option value=\\\"my\\\">Model Y</option>\\n    </Select>\\n  );\\n};\\n\\nconst ConditionalProps = () => (\\n  <Form>\\n    <Input name=\\\"age\\\" type=\\\"number\\\" label=\\\"Age\\\" />\\n    <CarSelect />\\n    <Debug values />\\n  </Form>\\n);\\n```\\n\";","import React from 'react';\nimport withDocs from '../../utils/withDocs';\nimport readme from './README.md';\n\nimport { Form, Input, Select, useConditional, Debug } from '../../../src';\n\nconst CarSelect = () => {\n  const evaluate = ({ formState, formApi }) => {\n    if (!formState.values.age || formState.values.age < 16) {\n      formApi.clearValue('car');\n      return { disabled: true };\n    }\n    return { disabled: false };\n  };\n\n  const { disabled } = useConditional({\n    evaluate,\n    evaluateWhen: ['age']\n  });\n\n  return (\n    <Select name=\"car\" label=\"Car\" initialValue=\"ms\" disabled={disabled}>\n      <option value=\"ms\">Model S</option>\n      <option value=\"m3\">Model 3</option>\n      <option value=\"mx\">Model X</option>\n      <option value=\"my\">Model Y</option>\n    </Select>\n  );\n};\n\nconst ConditionalProps = () => (\n  <Form>\n    <Input name=\"age\" type=\"number\" label=\"Age\" />\n    <CarSelect />\n    <Debug values />\n  </Form>\n);\n\nexport default withDocs(readme, ConditionalProps);\n","export default \"# Conditional Props\\n\\nSometimes you need to conditionally change the props.\\n\\n<!-- STORY -->\\n\\n```jsx\\nimport { Form, SchemaFields, Debug } from 'informed';\\n\\nconst evaluate = ({ formState, formApi }) => {\\n  if (!formState.values.age || formState.values.age < 16) {\\n    formApi.clearValue('car');\\n    return { disabled: true };\\n  }\\n  return { disabled: false };\\n};\\n\\nconst schema = {\\n  type: 'object',\\n  properties: {\\n    age: {\\n      type: 'number',\\n      title: 'Age',\\n      'ui:control': 'input',\\n      'ui:props': {\\n        type: 'number'\\n      }\\n    },\\n    car: {\\n      type: 'string',\\n      title: 'Car',\\n      'ui:control': 'select',\\n      oneOf: [\\n        { const: 'ms', title: 'Model S' },\\n        { const: 'm3', title: 'Model 3' },\\n        { const: 'mx', title: 'Model X' },\\n        { const: 'my', title: 'Model Y' }\\n      ],\\n      default: null,\\n      'ui:props': {\\n        evaluate,\\n        evaluateWhen: ['age']\\n      }\\n    }\\n  }\\n};\\n```\\n\";","import React from 'react';\nimport withDocs from '../../utils/withDocs';\nimport readme from './README.md';\n\nimport { Form, SchemaFields, Debug } from '../../../src';\n\nconst evaluate = ({ formState, formApi }) => {\n  if (!formState.values.age || formState.values.age < 16) {\n    formApi.clearValue('car');\n    return { disabled: true };\n  }\n  return { disabled: false };\n};\n\nconst schema = {\n  type: 'object',\n  properties: {\n    age: {\n      type: 'number',\n      title: 'Age',\n      'ui:control': 'input',\n      'ui:props': {\n        type: 'number'\n      }\n    },\n    car: {\n      type: 'string',\n      title: 'Car',\n      'ui:control': 'select',\n      oneOf: [\n        { const: 'ms', title: 'Model S' },\n        { const: 'm3', title: 'Model 3' },\n        { const: 'mx', title: 'Model X' },\n        { const: 'my', title: 'Model Y' }\n      ],\n      default: null,\n      'ui:props': {\n        evaluate,\n        evaluateWhen: ['age']\n      }\n    }\n  }\n};\n\nconst ConditionalProps = () => (\n  <Form schema={schema}>\n    <SchemaFields />\n    <button type=\"submit\">Submit</button>\n    <Debug values />\n  </Form>\n);\n\nexport default withDocs(readme, ConditionalProps);\n","export default \"## Formatted Object Input\\n\\nSometimes you need to make object inputs that also format per field.\\n\\n<!-- STORY -->\\n\\n<!-- IDFK Strange issue where i need this commnet or code formatting is messed up -->\\n\\n```jsx\\nimport React, { useRef } from 'react';\\nimport { Form, useField, useCursorPosition, utils } from 'informed';\\nconst { informedFormat } = utils;\\n\\nconst formatter = [\\n  '+',\\n  '1',\\n  ' ',\\n  /\\\\d/,\\n  /\\\\d/,\\n  /\\\\d/,\\n  '-',\\n  /\\\\d/,\\n  /\\\\d/,\\n  /\\\\d/,\\n  '-',\\n  /\\\\d/,\\n  /\\\\d/,\\n  /\\\\d/,\\n  /\\\\d/\\n];\\n\\nconst initialize = ({ a, b }) => {\\n  return {\\n    a: informedFormat(a, formatter).value,\\n    b: informedFormat(b, formatter).value\\n  };\\n};\\n\\nconst FormattedObjectInput = props => {\\n  const refA = useRef();\\n  const refB = useRef();\\n\\n  const { fieldState, fieldApi, render, userProps } = useField({\\n    ...props,\\n    inputRefs: {\\n      a: refA,\\n      b: refB\\n    },\\n    formatter: {\\n      a: formatter,\\n      b: formatter\\n    },\\n    parser: {\\n      a: parser,\\n      b: parser\\n    }\\n  });\\n\\n  const { maskedValue } = fieldState;\\n  const { setValue, setTouched } = fieldApi;\\n  const { onChange, onBlur, ...rest } = userProps;\\n\\n  const aChange = e => {\\n    const newVal = { ...v };\\n\\n    const val = e.target.value;\\n\\n    // update the \\\"a\\\" value\\n    newVal.a = val;\\n\\n    setValue(newVal, e, 'a');\\n  };\\n\\n  const bChange = e => {\\n    const newVal = { ...v };\\n\\n    const val = e.target.value;\\n\\n    // update the \\\"a\\\" value\\n    newVal.b = val;\\n\\n    setValue(newVal, e, 'b');\\n  };\\n\\n  const v = maskedValue || {};\\n\\n  const { a, b } = v;\\n\\n  return render(\\n    <React.Fragment>\\n      <input\\n        {...rest}\\n        ref={refA}\\n        value={a ? a : ''}\\n        onChange={aChange}\\n        onBlur={() => setTouched}\\n      />\\n      <input\\n        {...rest}\\n        ref={refB}\\n        value={b ? b : ''}\\n        onChange={bChange}\\n        onBlur={() => setTouched()}\\n      />\\n    </React.Fragment>\\n  );\\n};\\n\\n<Form>\\n  <label>\\n    Double Phone\\n    <FormattedObjectInput field=\\\"doublePhone\\\" />\\n  </label>\\n  <button type=\\\"submit\\\">Submit</button>\\n  <button type=\\\"button\\\" onClick={() => formApi.reset()}>\\n    Reset\\n  </button>\\n  <button\\n    type=\\\"button\\\"\\n    onClick={() =>\\n      formApi.setValue('doublePhone', {\\n        a: '4324324321',\\n        b: '1231231234'\\n      })\\n    }>\\n    Set Value\\n  </button>\\n</Form>;\\n```\\n\";","import React, { useRef } from 'react';\nimport Code from '../../utils/Code';\nimport withDocs from '../../utils/withDocs';\nimport readme from './README.md';\nimport { Form, useField, useCursorPosition, utils } from '../../../src';\n\nconst { informedFormat } = utils;\n\nconst formatter = [\n  '+',\n  '1',\n  ' ',\n  /\\d/,\n  /\\d/,\n  /\\d/,\n  '-',\n  /\\d/,\n  /\\d/,\n  /\\d/,\n  '-',\n  /\\d/,\n  /\\d/,\n  /\\d/,\n  /\\d/\n];\n\nconst parser = value => {\n  return value.replace('+1 ', '').replace(/-/g, '');\n};\n\nconst FormattedObjectInput = props => {\n  const refA = useRef();\n  const refB = useRef();\n\n  const { fieldState, fieldApi, render, userProps } = useField({\n    ...props,\n    inputRefs: {\n      a: refA,\n      b: refB\n    },\n    formatter: {\n      a: formatter,\n      b: formatter\n    },\n    parser: {\n      a: parser,\n      b: parser\n    }\n  });\n\n  const { maskedValue } = fieldState;\n  const { setValue, setTouched } = fieldApi;\n  const { onChange, onBlur, ...rest } = userProps;\n\n  const aChange = e => {\n    const newVal = { ...v };\n\n    const val = e.target.value;\n\n    // update the \"a\" value\n    newVal.a = val;\n\n    setValue(newVal, e, 'a');\n  };\n\n  const bChange = e => {\n    const newVal = { ...v };\n\n    const val = e.target.value;\n\n    // update the \"a\" value\n    newVal.b = val;\n\n    setValue(newVal, e, 'b');\n  };\n\n  const v = maskedValue || {};\n\n  const { a, b } = v;\n\n  return render(\n    <React.Fragment>\n      <input\n        {...rest}\n        ref={refA}\n        value={a ? a : ''}\n        onChange={aChange}\n        onBlur={() => setTouched}\n      />\n      <input\n        {...rest}\n        ref={refB}\n        value={b ? b : ''}\n        onChange={bChange}\n        onBlur={() => setTouched()}\n      />\n    </React.Fragment>\n  );\n};\n\nconst Example = () => (\n  <div>\n    <Form>\n      {({ formApi, formState }) => (\n        <React.Fragment>\n          <label>\n            Double Phone\n            <FormattedObjectInput\n              field=\"doublePhone\"\n              initialValue={{\n                a: '1231231234',\n                b: '4324324321'\n              }}\n            />\n          </label>\n          <button type=\"submit\">Submit</button>\n          <button type=\"button\" onClick={() => formApi.reset()}>\n            Reset\n          </button>\n          <button\n            type=\"button\"\n            onClick={() =>\n              formApi.setValue('doublePhone', {\n                a: '4324324321',\n                b: '1231231234'\n              })\n            }>\n            Set Value\n          </button>\n          <label>Values:</label>\n          <Code language=\"language-js\">\n            {JSON.stringify(formState.values, null, 2)}\n          </Code>\n        </React.Fragment>\n      )}\n    </Form>\n  </div>\n);\n\nexport default withDocs(readme, Example);\n\n// --------------------------------------------------------\n\n// import React, { useRef } from 'react';\n// import Code from '../../utils/Code';\n// import withDocs from '../../utils/withDocs';\n// import readme from './README.md';\n// import { Form, useField, useCursorPosition, utils } from '../../../src';\n\n// const { informedFormat } = utils;\n\n// const formatter = [\n//   '+',\n//   '1',\n//   ' ',\n//   /\\d/,\n//   /\\d/,\n//   /\\d/,\n//   '-',\n//   /\\d/,\n//   /\\d/,\n//   /\\d/,\n//   '-',\n//   /\\d/,\n//   /\\d/,\n//   /\\d/,\n//   /\\d/\n// ];\n\n// const initialize = ({ a, b }) => {\n//   return {\n//     a: informedFormat(a, formatter).value,\n//     b: informedFormat(b, formatter).value\n//   };\n// };\n\n// const FormattedObjectInput = props => {\n//   const refA = useRef();\n//   const refB = useRef();\n\n//   const { fieldState, fieldApi, render, userProps } = useField({\n//     ...props,\n//     initialize\n//   });\n\n//   const { maskedValue } = fieldState;\n//   const { setValue, setTouched } = fieldApi;\n//   const { onChange, onBlur, ...rest } = userProps;\n\n//   const v = maskedValue || {};\n\n//   const {\n//     setCursorOffset: setCursorOffsetA,\n//     setCursor: setCursorA\n//   } = useCursorPosition({ value: v.a, inputRef: refA });\n//   const {\n//     setCursorOffset: setCursorOffsetB,\n//     setCursor: setCursorB\n//   } = useCursorPosition({ value: v.b, inputRef: refB });\n\n//   const aChange = e => {\n//     const newVal = { ...v };\n\n//     const val = e.target.value;\n\n//     // Remember Cursor position!\n//     if (e && e.target && e.target.selectionStart) {\n//       setCursorA(e.target.selectionStart);\n//     }\n\n//     // Format the value\n//     const res = informedFormat(val, formatter);\n\n//     // Set the curosor offset\n//     setCursorOffsetA(res.offset);\n\n//     // update the \"a\" value\n//     newVal.a = res.value;\n\n//     setMaskedValue(newVal);\n//     setValue(newVal);\n//   };\n\n//   const bChange = e => {\n//     const newVal = { ...v };\n\n//     const val = e.target.value;\n\n//     // Remember Cursor position!\n//     if (e && e.target && e.target.selectionStart) {\n//       setCursorB(e.target.selectionStart);\n//     }\n\n//     // Format the value\n//     const res = informedFormat(val, formatter);\n\n//     // Set the curosor offset\n//     setCursorOffsetB(res.offset);\n\n//     // update the \"b\" value\n//     newVal.b = res.value;\n\n//     setValue(newVal);\n//   };\n\n//   const { a, b } = v;\n\n//   return render(\n//     <React.Fragment>\n//       <input\n//         {...rest}\n//         ref={refA}\n//         value={a ? a : ''}\n//         onChange={aChange}\n//         onBlur={() => setTouched}\n//       />\n//       <input\n//         {...rest}\n//         ref={refB}\n//         value={b ? b : ''}\n//         onChange={bChange}\n//         onBlur={() => setTouched()}\n//       />\n//     </React.Fragment>\n//   );\n// };\n\n// const Example = () => (\n//   <div>\n//     <Form>\n//       {({ formApi, formState }) => (\n//         <React.Fragment>\n//           <label>\n//             Double Phone\n//             <FormattedObjectInput\n//               field=\"doublePhone\"\n//               initialValue={{\n//                 a: '1231231234',\n//                 b: '4324324321'\n//               }}\n//             />\n//           </label>\n//           <button type=\"submit\">Submit</button>\n//           <button type=\"button\" onClick={() => formApi.reset()}>\n//             Reset\n//           </button>\n//           <button\n//             type=\"button\"\n//             onClick={() =>\n//               formApi.setValue('doublePhone', {\n//                 a: '4324324321',\n//                 b: '1231231234'\n//               })\n//             }>\n//             Set Value\n//           </button>\n//           <label>Values:</label>\n//           <Code language=\"language-js\">\n//             {JSON.stringify(formState.values, null, 2)}\n//           </Code>\n//         </React.Fragment>\n//       )}\n//     </Form>\n//   </div>\n// );\n\n// export default withDocs(readme, Example);\n","export default \"## So what if i do want to hook it all up myself?\\n\\n**Dont Fret!** Check out the example below:\\n\\n<!-- STORY -->\\n\\n<!-- IDFK Strange issue where i need this commnet or code formatting is messed up -->\\n\\n```jsx\\nimport { Form, asField } from 'informed';\\n\\nconst validate = value => {\\n  return !value || value.length < 5\\n    ? 'Field must be at least five characters'\\n    : undefined;\\n};\\n\\nconst ErrorText = asField(({ fieldState, fieldApi, ...props }) => {\\n  const { value, error, showError } = fieldState;\\n  const { setValue, setTouched } = fieldApi;\\n  const { onChange, onBlur, initialValue, forwardedRef, ...rest } = props;\\n  return (\\n    <React.Fragment>\\n      <input\\n        {...rest}\\n        ref={forwardedRef}\\n        value={!value && value !== 0 ? '' : value}\\n        onChange={e => {\\n          setValue(e.target.value);\\n          if (onChange) {\\n            onChange(e);\\n          }\\n        }}\\n        onBlur={e => {\\n          setTouched(true);\\n          if (onBlur) {\\n            onBlur(e);\\n          }\\n        }}\\n        style={showError ? { border: 'solid 1px red' } : null}\\n      />\\n      {showError ? (\\n        <small style={{ color: 'red' }}>{fieldState.error}</small>\\n      ) : null}\\n    </React.Fragment>\\n  );\\n});\\n\\n<Form id=\\\"custom-form\\\">\\n  <label>\\n    First name:\\n    <ErrorText\\n      field=\\\"name\\\"\\n      validate={validate}\\n      validateOnChange\\n      validateOnBlur\\n    />\\n  </label>\\n  <button type=\\\"submit\\\">Submit</button>\\n</Form>;\\n```\\n\";","import React from 'react';\nimport Code from '../../utils/Code';\nimport withDocs from '../../utils/withDocs';\nimport readme from './README.md';\nimport { Form, useField } from '../../../src';\n\nconst validate = value => {\n  return !value || value.length < 5\n    ? 'Field must be at least five characters'\n    : undefined;\n};\n\nexport const ErrorText = React.memo(({ label, ...props }) => {\n  const { render, fieldState, fieldApi } = useField({\n    type: 'text',\n    ...props\n  });\n  const { value, error, showError } = fieldState;\n  const { setValue, setTouched } = fieldApi;\n  const { onChange, onBlur, initialValue, forwardedRef, ...rest } = props;\n  return render(\n    <React.Fragment>\n      <input\n        {...rest}\n        ref={forwardedRef}\n        value={!value && value !== 0 ? '' : value}\n        onChange={e => {\n          setValue(e.target.value);\n          if (onChange) {\n            onChange(e);\n          }\n        }}\n        onBlur={e => {\n          setTouched(true);\n          if (onBlur) {\n            onBlur(e);\n          }\n        }}\n        style={showError ? { border: 'solid 1px red' } : null}\n      />\n      {showError ? <small style={{ color: 'red' }}>{error}</small> : null}\n    </React.Fragment>\n  );\n});\n\nconst FromScratch = () => (\n  <div>\n    <Form id=\"custom-form-2\">\n      {({ formApi, formState }) => (\n        <React.Fragment>\n          <label>\n            First name:\n            <ErrorText\n              field=\"name\"\n              validate={validate}\n              validateOnChange\n              validateOnBlur\n            />\n          </label>\n          <button type=\"submit\">Submit</button>\n          <label>Values:</label>\n          <Code language=\"language-js\">\n            {JSON.stringify(formState.values, null, 2)}\n          </Code>\n          <label>Errors:</label>\n          <Code language=\"language-js\">\n            {JSON.stringify(formState.errors, null, 2)}\n          </Code>\n        </React.Fragment>\n      )}\n    </Form>\n  </div>\n);\n\nexport default withDocs(readme, FromScratch);\n","export default \"# Custom Inputs\\n\\nSometimes the inputs `informed` provides are not good enough. So we decided to\\nhelp you out with that! Informed also gives you access to a useField hook.\\n\\n## Custom Text Input\\n\\nLets say you like `informed`'s text input but you want to show an error and turn\\nit red when there is an error. You could achieve this with the following code.\\n\\n<!-- IDFK Strange issue where i need this commnet or code formatting is messed up -->\\n\\n```jsx\\nimport { Form, BasicText, useField } from 'informed';\\n\\nconst validate = value => {\\n  return !value || value.length < 5\\n    ? 'Field must be at least five characters'\\n    : undefined;\\n};\\n\\nexport const ErrorTextField = React.memo(({ label, ...props }) => {\\n  const { render, informed, ref, fieldState } = useField({\\n    type: 'text',\\n    ...props\\n  });\\n  const { showError } = fieldState;\\n  return render(\\n    <label>\\n      {label}\\n      <input\\n        ref={ref}\\n        {...informed}\\n        style={showError ? { border: 'solid 1px red' } : null}\\n      />\\n      {showError ? (\\n        <small style={{ color: 'red' }}>{fieldState.error}</small>\\n      ) : null}\\n    </label>\\n  );\\n});\\n\\nconst Intro = () => (\\n  <div>\\n    <Form>\\n      <ErrorTextField\\n        field=\\\"name\\\"\\n        label=\\\"First name:\\\"\\n        validate={validate}\\n        validateOnChange\\n        validateOnBlur\\n      />\\n      <button type=\\\"submit\\\">Submit</button>\\n      <Debug values errors />\\n    </Form>\\n  </div>\\n);\\n```\\n\\n<!-- STORY -->\\n\\n## I need an explanation!\\n\\nOk so what did we just do? We took advantage of two parts of `informed`.\\n\\n1. The `asField` HOC that turns a Component into an InformedField.\\n2. The internal `BasicText` Component.\\n\\n`asField` is a HOC that will turn your Component into an `informed` Field Component by\\ngiving your component access to the fieldApi and fieldState, and wrapping it in some magic!\\nIf you wanted to you could hook up all the functions yourself, but for convenience we\\nexpose our internal input definitions for you!\\n\";","import React from 'react';\nimport withDocs from '../../utils/withDocs';\nimport readme from './README.md';\nimport { Form, useField } from '../../../src';\n\nconst validate = value => {\n  return !value || value.length < 5\n    ? 'Field must be at least five characters'\n    : undefined;\n};\n\nexport const ErrorTextField = React.memo(({ label, ...props }) => {\n  const { render, informed, fieldState, ref } = useField({\n    type: 'text',\n    ...props\n  });\n  const { showError } = fieldState;\n  return render(\n    <label>\n      {label}\n      <input\n        {...informed}\n        ref={ref}\n        style={showError ? { border: 'solid 1px red' } : null}\n      />\n      {showError ? (\n        <small style={{ color: 'red' }}>{fieldState.error}</small>\n      ) : null}\n    </label>\n  );\n});\n\nconst Intro = () => (\n  <div>\n    <Form>\n      <ErrorTextField\n        field=\"name\"\n        label=\"First name:\"\n        validate={validate}\n        validateOnChange\n        validateOnBlur\n      />\n      <button type=\"submit\">Submit</button>\n      <Debug values errors />\n    </Form>\n  </div>\n);\n\nexport default withDocs(readme, Intro);\n","export default \"## Object Input\\n\\nSometimes you need to make object input. An input whos value is an object and made up of more than one phisical input element.\\n\\n<!-- STORY -->\\n\\n<!-- IDFK Strange issue where i need this commnet or code formatting is messed up -->\\n\\n```jsx\\nimport React from 'react';\\nimport { Form, useField } from 'informed';\\n\\nconst ObjectInput = props => {\\n  const { fieldState, fieldApi, render, userProps } = useField(props);\\n\\n  const { value } = fieldState;\\n  const { setValue, setTouched } = fieldApi;\\n  const { onChange, onBlur, ...rest } = userProps;\\n\\n  const v = value || {};\\n\\n  const aChange = e => {\\n    const newVal = { ...v };\\n\\n    newVal.a = e.target.value;\\n\\n    setValue(newVal);\\n  };\\n\\n  const bChange = e => {\\n    const newVal = { ...v };\\n\\n    newVal.b = e.target.value;\\n\\n    setValue(newVal);\\n  };\\n\\n  const { a, b } = v;\\n\\n  return render(\\n    <React.Fragment>\\n      <input\\n        {...rest}\\n        value={a ? a : ''}\\n        onChange={aChange}\\n        onBlur={() => setTouched}\\n      />\\n      <input\\n        {...rest}\\n        value={b ? b : ''}\\n        onChange={bChange}\\n        onBlur={() => setTouched()}\\n      />\\n    </React.Fragment>\\n  );\\n};\\n\\n<Form>\\n  <label>\\n    Double Input\\n    <ObjectInput field=\\\"doubleInput\\\" />\\n  </label>\\n  <button type=\\\"submit\\\">Submit</button>\\n</Form>;\\n```\\n\";","import React, { useRef } from 'react';\nimport Code from '../../utils/Code';\nimport withDocs from '../../utils/withDocs';\nimport readme from './README.md';\nimport { Form, useField } from '../../../src';\n\nconst ObjectInput = props => {\n  const { fieldState, fieldApi, render, userProps } = useField(props);\n\n  const { value } = fieldState;\n  const { setValue, setTouched } = fieldApi;\n  const { onChange, onBlur, ...rest } = userProps;\n\n  const v = value || {};\n\n  const aChange = e => {\n    const newVal = { ...v };\n\n    newVal.a = e.target.value;\n\n    setValue(newVal);\n  };\n\n  const bChange = e => {\n    const newVal = { ...v };\n\n    newVal.b = e.target.value;\n\n    setValue(newVal);\n  };\n\n  const { a, b } = v;\n\n  return render(\n    <React.Fragment>\n      <input\n        {...rest}\n        value={a ? a : ''}\n        onChange={aChange}\n        onBlur={() => setTouched}\n      />\n      <input\n        {...rest}\n        value={b ? b : ''}\n        onChange={bChange}\n        onBlur={() => setTouched()}\n      />\n    </React.Fragment>\n  );\n};\n\nconst Example = () => (\n  <div>\n    <Form>\n      {({ formApi, formState }) => (\n        <React.Fragment>\n          <label>\n            Double Input\n            <ObjectInput field=\"doubleInput\" />\n          </label>\n          <button type=\"submit\">Submit</button>\n          <label>Values:</label>\n          <Code language=\"language-js\">\n            {JSON.stringify(formState.values, null, 2)}\n          </Code>\n        </React.Fragment>\n      )}\n    </Form>\n  </div>\n);\n\nexport default withDocs(readme, Example);\n","export default \"## Endless Possibilities\\n\\nBecause of this design, you can add your very own custom inputs! Below is an example of a slider!\\n\\n<!-- STORY -->\\n\\n```jsx\\nimport { Form, useField, Debug } from 'informed';\\n\\nconst Slider = ({ min, max, step, ...props }) => {\\n  const { render, fieldState, fieldApi, ref, userProps } = useField({\\n    ...props\\n  });\\n  const { value } = fieldState;\\n  const { setValue, setTouched } = fieldApi;\\n  return render(\\n    <>\\n      <label htmlFor={userProps.id}>Range:</label>\\n      <input\\n        {...userProps}\\n        type=\\\"range\\\"\\n        min={min}\\n        max={max}\\n        step={step}\\n        ref={ref}\\n        value={value || '0'}\\n        onChange={e => {\\n          setValue(e.target.value, e);\\n        }}\\n        onBlur={e => {\\n          setTouched(true, e);\\n        }}\\n      />\\n    </>\\n  );\\n};\\n\\nconst SliderExample = () => (\\n  <Form>\\n    <React.Fragment>\\n      <Slider field=\\\"range\\\" initialValue=\\\"69\\\" min=\\\"0\\\" max=\\\"100\\\" />\\n      <button type=\\\"submit\\\">Submit</button>\\n      <Debug values />\\n    </React.Fragment>\\n  </Form>\\n);\\n```\\n\";","import React from 'react';\nimport Code from '../../utils/Code';\nimport withDocs from '../../utils/withDocs';\nimport readme from './README.md';\nimport { Form, useField, Debug } from '../../../src';\n\nconst Slider = ({ min, max, step, ...props }) => {\n  const { render, fieldState, fieldApi, ref, userProps } = useField({\n    ...props\n  });\n  const { value } = fieldState;\n  const { setValue, setTouched } = fieldApi;\n  return render(\n    <>\n      <label htmlFor={userProps.id}>Range:</label>\n      <input\n        {...userProps}\n        type=\"range\"\n        min={min}\n        max={max}\n        step={step}\n        ref={ref}\n        value={value || '0'}\n        onChange={e => {\n          setValue(e.target.value, e);\n        }}\n        onBlur={e => {\n          setTouched(true, e);\n        }}\n      />\n    </>\n  );\n};\n\nconst SliderExample = () => (\n  <Form>\n    <React.Fragment>\n      <Slider field=\"range\" initialValue=\"69\" min=\"0\" max=\"100\" />\n      <button type=\"submit\">Submit</button>\n      <Debug values />\n    </React.Fragment>\n  </Form>\n);\n\nexport default withDocs(readme, SliderExample);\n","export default \"# Custom Inputs\\n\\nSometimes the inputs `informed` provides are not good enough. So we decided to\\nhelp you out with that! Informed also gives you access to an useField Hook.\\n\\n## Custom Text Input\\n\\nLets say you like `informed`'s text input but you want to show an error and turn\\nit red when there is an error. You could achieve this with the following code.\\n\\n<!-- STORY -->\\n\\n<!-- IDFK Strange issue where i need this commnet or code formatting is messed up -->\\n\\n```jsx\\nimport { Form, useField } from 'informed';\\n\\nconst CustomInput = props => {\\n  const { fieldState, fieldApi, render, ref, userProps } = useField(props);\\n\\n  // The field state\\n  const { value, error, showError } = fieldState;\\n\\n  // The field control\\n  const { setValue, setTouched } = fieldApi;\\n\\n  // Everything else\\n  const { label, id, ...rest } = userProps;\\n\\n  return render(\\n    <>\\n      {label ? <label htmlFor={id}>{label}</label> : null}\\n      <input\\n        {...rest}\\n        id={id}\\n        ref={ref}\\n        value={!value && value !== 0 ? '' : value}\\n        onChange={e => {\\n          setValue(e.target.value, e);\\n        }}\\n        onBlur={e => {\\n          setTouched(true, e);\\n        }}\\n        style={showError ? { border: 'solid 1px red' } : null}\\n      />\\n      {showError ? <small style={{ color: 'red' }}>{error}</small> : null}\\n    </>\\n  );\\n};\\n\\nconst Example = () => (\\n  <Form>\\n    <ErrorText\\n      field=\\\"name\\\"\\n      label=\\\"First name:\\\"\\n      validateOn=\\\"change\\\"\\n      required\\n      minLength={5}\\n    />\\n    <button type=\\\"submit\\\">Submit</button>\\n    <Debug />\\n  </Form>\\n);\\n```\\n\";","import React from 'react';\nimport withDocs from '../../utils/withDocs';\nimport readme from './README.md';\nimport { Form, Debug, useField } from '../../../src';\n\nconst CustomInput = props => {\n  const { fieldState, fieldApi, render, ref, userProps } = useField(props);\n\n  const { value, error, showError } = fieldState;\n  const { setValue, setTouched } = fieldApi;\n  const { label, id, ...rest } = userProps;\n  return render(\n    <>\n      {label ? <label htmlFor={id}>{label}</label> : null}\n      <input\n        {...rest}\n        id={id}\n        ref={ref}\n        value={!value && value !== 0 ? '' : value}\n        onChange={e => {\n          setValue(e.target.value, e);\n        }}\n        onBlur={e => {\n          setTouched(true, e);\n        }}\n        style={showError ? { border: 'solid 1px red' } : null}\n      />\n      {showError ? <small style={{ color: 'red' }}>{error}</small> : null}\n    </>\n  );\n};\n\nconst Example = () => (\n  <Form autocomplete=\"off\">\n    <CustomInput\n      field=\"name\"\n      label=\"First name:\"\n      validateOn=\"change\"\n      required\n      minLength={5}\n    />\n    <button type=\"submit\">Submit</button>\n    <Debug />\n  </Form>\n);\n\nexport default withDocs(readme, Example);\n","export default \"## But it gets easier!\\n\\nHere we use the hook `useField`, BUT, instead of hooking it all up ourselves,\\nwe just spread the informed object onto the input. Its important to note the use of fieldType,\\nwhen you want to use the informed object, you need to tell the hook what type of input\\nyour dealing with so it knows how to handle the dom or native event.\\n\\n<!-- STORY -->\\n\\n<!-- IDFK Strange issue where i need this commnet or code formatting is messed up -->\\n\\n```jsx\\nimport { Form, useField } from 'informed';\\n\\nconst CustomInput = props => {\\n  const { render, informed, fieldState, userProps, ref } = useField({\\n    type: 'text',\\n    ...props\\n  });\\n\\n  const { id, label, ...rest } = userProps;\\n  const { error, showError } = fieldState;\\n\\n  return render(\\n    <>\\n      <label htmlFor={id}>{label}</label>\\n      <input\\n        {...rest}\\n        {...informed}\\n        ref={ref}\\n        style={showError ? { border: 'solid 1px red' } : null}\\n      />\\n      {showError && <small style={{ color: 'red' }}>{error}</small>}\\n    </>\\n  );\\n};\\n\\nconst Example = () => (\\n  <Form>\\n    <CustomInput\\n      field=\\\"name\\\"\\n      label=\\\"First name:\\\"\\n      validateOn=\\\"change\\\"\\n      required\\n      minLength={5}\\n    />\\n    <button type=\\\"submit\\\">Submit</button>\\n    <Debug values errors />\\n  </Form>\\n);\\n```\\n\";","import React from 'react';\nimport withDocs from '../../utils/withDocs';\nimport readme from './README.md';\nimport { Form, Debug, useField } from '../../../src';\n\nconst CustomInput = props => {\n  const { render, informed, fieldState, userProps, ref } = useField({\n    type: 'text',\n    ...props\n  });\n\n  const { id, label, ...rest } = userProps;\n  const { error, showError } = fieldState;\n\n  return render(\n    <>\n      <label htmlFor={id}>{label}</label>\n      <input\n        {...rest}\n        {...informed}\n        ref={ref}\n        style={showError ? { border: 'solid 1px red' } : null}\n      />\n      {showError && <small style={{ color: 'red' }}>{error}</small>}\n    </>\n  );\n};\n\nconst Example = () => (\n  <Form>\n    <CustomInput\n      field=\"name\"\n      label=\"First name:\"\n      validateOn=\"change\"\n      required\n      minLength={5}\n    />\n    <button type=\"submit\">Submit</button>\n    <Debug values errors />\n  </Form>\n);\n\nexport default withDocs(readme, Example);\n","import React from 'react';\nimport Intro from './Intro';\nimport FromScratch from './FromScratch';\nimport UseField from './UseField';\nimport Slider from './Slider';\nimport UseFieldHooked from './UseFieldHooked';\n\nconst CreatingCustomInputs = () => (\n  <div>\n    {/* <Intro /> */}\n    {/* <br /> */}\n    {/* <FromScratch /> */}\n    {/* <br /> */}\n    <UseField />\n    <br />\n    <UseFieldHooked />\n    <br />\n    <Slider />\n  </div>\n);\n\nexport default CreatingCustomInputs;\n","export default \"# Debug Components\\n\\nSometimes you just want to see whats going on with the form state.\\nThis can easily be achieved by rendering Debug components.\\n\\n<!-- STORY -->\\n\\n```jsx\\nimport { Form, Input, Debug, DebugField } from 'informed';\\n\\n<Form>\\n  <Input name=\\\"name\\\" label=\\\"Name:\\\" />\\n  <button type=\\\"submit\\\">Submit</button>\\n  <Debug />\\n  <DebugField name=\\\"name\\\" />\\n</Form>;\\n```\\n\\n## Debugging Logs\\n\\nIn addition to the exported helpers, informed also comes with internal logging that can be enabled in following ways:\\n\\n#### When running in a browser ( development )\\n\\n```js\\nlocalStorage.debug = 'informed:.*';\\n```\\n\\n#### When running in React Native ( development )\\n\\n```js\\n// only enable this in __DEV__ environment\\nif (__DEV__) {\\n  global.DEBUG_INFORMED = 'informed:.*';\\n}\\n```\\n\\n#### When running in node ( unit tests )\\n\\n```js\\nDEBUG = 'informed:.*';\\n```\\n\\nTo reset debugging just set the flag back to an empty string.\\n\";","import React from 'react';\nimport withDocs from '../../utils/withDocs';\nimport readme from './README.md';\n\nimport { Form, Input, Debug, DebugField } from '../../../src';\n\nconst DebugExample = () => (\n  <Form>\n    <div style={{ display: 'flex' }}>\n      <div style={{ flex: 2, marginRight: '2rem' }}>\n        <Input name=\"name\" label=\"Name:\" />\n        <button type=\"submit\">Submit</button>\n      </div>\n      <div style={{ flex: 2, marginLeft: '2rem' }}>\n        <Debug />\n      </div>\n      <div style={{ flex: 2, marginLeft: '2rem' }}>\n        <DebugField name=\"name\" />\n      </div>\n    </div>\n  </Form>\n);\n\nexport default withDocs(readme, DebugExample);\n","export default \"# Async Dependent Fields\\n\\nSometimes you need to change options in fields based on results from maybe an API call. This can easily be achieved, see example below.\\n\\n<!-- STORY -->\\n\\n```jsx\\nimport { Form, Select, useFieldState, useFieldApi, Debug } from 'informed';\\nimport style from './style.css';\\nimport { useEffect } from 'react';\\n\\nconst options = {\\n  car: [\\n    {\\n      value: '',\\n      label: '- Select -',\\n      disabled: true\\n    },\\n    {\\n      value: 'modelS',\\n      label: 'Model S'\\n    },\\n    {\\n      value: 'model3',\\n      label: 'Model 3'\\n    },\\n    {\\n      value: 'modelX',\\n      label: 'Model X'\\n    },\\n    {\\n      value: 'modely',\\n      label: 'Model Y'\\n    }\\n  ],\\n  truck: [\\n    {\\n      value: '',\\n      label: '- Select -',\\n      disabled: true\\n    },\\n    {\\n      value: 'semi',\\n      label: 'Semi Truck'\\n    },\\n    {\\n      value: 'cyber',\\n      label: 'Cyber Truck'\\n    }\\n  ]\\n};\\n\\nconst gatherData = async value => {\\n  return new Promise((resolve, reject) => {\\n    setTimeout(() => {\\n      const opts = options[value];\\n\\n      resolve(opts);\\n    }, 3000);\\n  });\\n};\\n\\nconst ProductSelect = () => {\\n  const { data } = useFieldState('type');\\n  const { clearValue } = useFieldApi('product');\\n\\n  useEffect(\\n    () => {\\n      clearValue();\\n    },\\n    [data]\\n  );\\n\\n  return (\\n    <Select field=\\\"product\\\" label=\\\"Product\\\">\\n      {data &&\\n        data.map(option => (\\n          <option key={option.value} value={option.value}>\\n            {option.label}\\n          </option>\\n        ))}\\n    </Select>\\n  );\\n};\\n\\nexport default function Example() {\\n  return (\\n    <Form onSubmit={onSubmit} autocomplete=\\\"off\\\">\\n      <Select\\n        field=\\\"type\\\"\\n        label=\\\"Would you like a car or truck?\\\"\\n        gatherData={gatherData}\\n        gatherOnMount\\n        initialValue=\\\"car\\\">\\n        <option value=\\\"\\\" disabled>\\n          -Select-\\n        </option>\\n        <option value=\\\"car\\\">Car</option>\\n        <option value=\\\"truck\\\">Truck</option>\\n      </Select>\\n      <ProductSelect />\\n      <button type=\\\"submit\\\">Submit</button>\\n      <Debug values gathering data />\\n    </Form>\\n  );\\n}\\n```\\n\";","import React from 'react';\nimport withDocs from '../../utils/withDocs';\nimport readme from './README.md';\n\nimport { Form, Select, useFieldState, useFieldApi, Debug } from '../../../src';\nimport { useEffect } from 'react';\n\nconst onSubmit = ({ values }) => console.log(values);\n\nconst options = {\n  car: [\n    {\n      value: '',\n      label: '- Select -',\n      disabled: true\n    },\n    {\n      value: 'modelS',\n      label: 'Model S'\n    },\n    {\n      value: 'model3',\n      label: 'Model 3'\n    },\n    {\n      value: 'modelX',\n      label: 'Model X'\n    },\n    {\n      value: 'modely',\n      label: 'Model Y'\n    }\n  ],\n  truck: [\n    {\n      value: '',\n      label: '- Select -',\n      disabled: true\n    },\n    {\n      value: 'semi',\n      label: 'Semi Truck'\n    },\n    {\n      value: 'cyber',\n      label: 'Cyber Truck'\n    }\n  ]\n};\n\nconst gatherData = async value => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const opts = options[value];\n\n      resolve(opts);\n    }, 3000);\n  });\n};\n\nconst ProductSelect = () => {\n  const { data } = useFieldState('type');\n  const { clearValue } = useFieldApi('product');\n\n  useEffect(\n    () => {\n      clearValue();\n    },\n    [data]\n  );\n\n  return (\n    <Select field=\"product\" label=\"Product\">\n      {data &&\n        data.map(option => (\n          <option key={option.value} value={option.value}>\n            {option.label}\n          </option>\n        ))}\n    </Select>\n  );\n};\n\nfunction Example() {\n  return (\n    <Form onSubmit={onSubmit} autocomplete=\"off\">\n      <Select\n        field=\"type\"\n        label=\"Would you like a car or truck?\"\n        gatherData={gatherData}\n        gatherOnMount\n        initialValue=\"car\">\n        <option value=\"\" disabled>\n          -Select-\n        </option>\n        <option value=\"car\">Car</option>\n        <option value=\"truck\">Truck</option>\n      </Select>\n      <ProductSelect />\n      <button type=\"submit\">Submit</button>\n      <Debug values gathering data />\n    </Form>\n  );\n}\n\nexport default withDocs(readme, Example);\n","export default \"# Dependent Fields\\n\\nSometimes fields values depend on what you input in other parts of the form.\\n\\n<!-- STORY -->\\n\\n```jsx\\nimport { Form, Input, Debug, useFieldState, useFieldApi } from 'informed';\\n\\nconst Multiplyer = () => {\\n  return (\\n    <Input\\n      name=\\\"multiplyer\\\"\\n      label=\\\"Multiplyer\\\"\\n      type=\\\"number\\\"\\n      defaultValue={0.02}\\n    />\\n  );\\n};\\n\\nconst Rate = () => {\\n  const { value: multiplyer, dirty } = useFieldState('multiplyer');\\n  const { setValueQuietly, setValue } = useFieldApi('rate');\\n\\n  useEffect(\\n    () => {\\n      dirty ? setValue(multiplyer * 2) : setValueQuietly(multiplyer * 2);\\n    },\\n    [multiplyer]\\n  );\\n\\n  return <Input name=\\\"rate\\\" label=\\\"Rate\\\" type=\\\"number\\\" />;\\n};\\n\\nconst DependentFields = () => (\\n  <Form>\\n    <Multiplyer />\\n    <Rate />\\n    <button type=\\\"submit\\\">Submit</button>\\n    <Debug values dirty pristine dirt />\\n  </Form>\\n);\\n```\\n\";","import React, { useEffect, useMemo } from 'react';\nimport withDocs from '../../utils/withDocs';\nimport readme from './README.md';\nimport { Form, Input, Debug, useFieldState, useFieldApi } from '../../../src';\n\nconst Multiplyer = () => {\n  return (\n    <Input\n      name=\"multiplyer\"\n      label=\"Multiplyer\"\n      type=\"number\"\n      defaultValue={0.02}\n    />\n  );\n};\n\nconst Rate = () => {\n  const { value: multiplyer, dirty } = useFieldState('multiplyer');\n  const { setValueQuietly, setValue } = useFieldApi('rate');\n\n  useEffect(\n    () => {\n      dirty ? setValue(multiplyer * 2) : setValueQuietly(multiplyer * 2);\n    },\n    [multiplyer]\n  );\n\n  return <Input name=\"rate\" label=\"Rate\" type=\"number\" />;\n};\n\nconst DependentFields = () => (\n  <Form>\n    <Multiplyer />\n    <Rate />\n    <button type=\"submit\">Submit</button>\n    <Debug values dirty pristine dirt />\n  </Form>\n);\n\nexport default withDocs(readme, DependentFields);\n","export default \"# Dynamic Fields\\n\\nSometimes you need to conditionally render fields. Below is a simple\\nexample the shows or hides a spouse depending on the radio selected!\\n\\n<!-- STORY -->\\n\\n```jsx\\nimport { Form, Input, RadioGroup, Radio, Relevant } from 'informed';\\n\\n<Form>\\n  <Input name=\\\"name\\\" label=\\\"First name:\\\" />\\n  <label>Are you married?</label>\\n  <RadioGroup field=\\\"married\\\">\\n    <label>\\n      Yes <Radio value=\\\"yes\\\" />\\n    </label>\\n    <label>\\n      No <Radio value=\\\"no\\\" />\\n    </label>\\n  </RadioGroup>\\n  <Relevant when={({ formState }) => formState.values?.married === 'yes'}>\\n    <Input name=\\\"spouse\\\" label=\\\"Spouse name:\\\" />\\n  </Relevant>\\n  <button type=\\\"submit\\\">Submit</button>\\n</Form>;\\n```\\n\";","import React from 'react';\nimport withDocs from '../../utils/withDocs';\nimport readme from './README.md';\n\nimport {\n  Form,\n  Input,\n  RadioGroup,\n  Radio,\n  Relevant,\n  Debug,\n  ArrayField,\n  Scope\n} from '../../../src';\n\n// const DynamicFields = () => (\n//   <div>\n//     <Form>\n//       {({ formState }) => (\n//         <div style={{ display: 'flex', flexWrap: 'wrap' }}>\n//           <div style={{ flex: 1, marginRight: '2rem' }}>\n//             <label>First name:<Input name=\"name\"/></label>\n//             <label>Are you married?</label>\n//             <RadioGroup name=\"married\">\n//               <label>Yes <Radio value=\"yes\"/></label>\n//               <label>No <Radio value=\"no\"/></label>\n//             </RadioGroup>\n//             {formState.values.married === 'yes' ? (\n//               <label >Spouse name:<Input name=\"spouse\" /></label>\n//             ) : null}\n//             <button type=\"submit\">Submit</button>\n//           </div>\n//           <div style={{ flex: 2, minWidth: '300px' }}>\n//             <Debug />\n//           </div>\n//         </div>\n//       )}\n//     </Form>\n//   </div>\n// );\n\nconst initialValues = { person: { spouse: 'Shannon' } };\n\nconst DynamicFields = () => (\n  <div>\n    <Form>\n      <div style={{ display: 'flex', flexWrap: 'wrap' }}>\n        <div style={{ flex: 1, marginRight: '2rem' }}>\n          {/* <Scope scope=\"person\"> */}\n          <Input name=\"name\" label=\"First name:\" />\n          <label>Are you married?</label>\n          <RadioGroup name=\"married\">\n            <label>\n              Yes <Radio value=\"yes\" />\n            </label>\n            <label>\n              No <Radio value=\"no\" />\n            </label>\n          </RadioGroup>\n          <Relevant\n            // relevanceWhen={['married']}\n            when={({ formState }) => formState.values?.married === 'yes'}>\n            <Input\n              name=\"spouse\"\n              label=\"Spouse name:\"\n              // required\n              // validateOnMount\n              // showErrorIfError\n              // relevanceWhen={['married']}\n              // relevant={({ formState }) => formState.values?.married === 'yes'}\n            />\n\n            {/* <h5>Siblings:</h5>\n            <ArrayField\n              name=\"siblings\"\n              keepState\n              initialValue={[\n                { first: 'Foo', last: 'ahh' },\n                { first: 'Bar', last: 'last' }\n              ]}>\n              {({ add, reset }) => (\n                <>\n                  <button type=\"button\" onClick={add}>\n                    Add Sibling\n                  </button>\n                  <button type=\"button\" onClick={reset}>\n                    Reset Siblings\n                  </button>\n                  <ArrayField.Items>\n                    {({ remove, field, index }) => (\n                      <label>\n                        Sibling {index}:\n                        <Input name={`${field}.first`} keepState />\n                        Sibling {index}:\n                        <Input name={`${field}.last`} keepState />\n                        <button type=\"button\" onClick={remove}>\n                          Remove\n                        </button>\n                      </label>\n                    )}\n                  </ArrayField.Items>\n                </>\n              )}\n            </ArrayField> */}\n          </Relevant>\n          <button type=\"submit\">Submit</button>\n          {/* </Scope> */}\n        </div>\n        <div style={{ flex: 2, minWidth: '300px', marginLeft: '3rem' }}>\n          <Debug />\n        </div>\n      </div>\n    </Form>\n  </div>\n);\n\nexport default withDocs(readme, DynamicFields);\n","export default \"# Form Api\\n\\n**`Informed` gives you access to a `formApi`!**\\n\\nThis api allows you to grab and manipulate values using getters and setters. Below is a table that describes each function available within the formApi.\\n\\n| Function       | Example                                 | Description                                                                                                                                                                                                                                                                                                               |\\n| -------------- | --------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\\n| submitForm     | `submitForm()`                          | This function will submit the form and trigger some lifecycle events. 1. It will set all the fields to touched. 2. It will call all validators. 3. It will call onSubmit if the form is valid. This function can be called manually however it is also called if you have a `<button type='submit'>` within the `<Form>`. |\\n| setValue       | `setValue('greeting', 'Hello')`         | Function that takes two parameters, the first is the field name, and the second is the value you want to set it to.                                                                                                                                                                                                       |\\n| getValue       | `getValue('greeting')`                  | Function that when given a field name will return its value.                                                                                                                                                                                                                                                              |\\n| setTouched     | `setTouched('greeting', true)`          | Function that takes two parameters, the first is the field name, and the second is true or false.                                                                                                                                                                                                                         |\\n| getTouched     | `getTouched('greeting')`                | Function that when given a field name will return whether or not its touched.                                                                                                                                                                                                                                             |\\n| setError       | `setError('greeting', 'Error message')` | Function that takes two parameters, the first is the field name, and the second is the error message you want to set it to.                                                                                                                                                                                               |\\n| getError       | `getError('greeting')`                  | Function that when given a field name will return its error.                                                                                                                                                                                                                                                              |\\n| getFormState   | `getFormState()`                        | Function that returns the formState. Note this will only return the state as it existed when the function was called.                                                                                                                                                                                                     |\\n| reset          | `reset()`                               | Function that will reset the form to its initial state.                                                                                                                                                                                                                                                                   |\\n| setValues      | `setValues({ greeting: 'hello'})`       | Function that will set the fields values.                                                                                                                                                                                                                                                                                 |\\n| setValues      | `setValues({ greeting: 'hello'})`       | Function that will set the fields values.                                                                                                                                                                                                                                                                                 |\\n| setFormError   | `setFormError('There was an error!')`   | Function that will set the forms error manually.                                                                                                                                                                                                                                                                          |\\n| validate       | `validate()`                            | Function that will trigger the forms validation manually.                                                                                                                                                                                                                                                                 |\\n| setValues      | `setValues(values)`                     | Function that will set all form values ( clearing values you dont include )                                                                                                                                                                                                                                               |\\n| setTheseValues | `setTheseValues(values)`                | Function that will set some form values                                                                                                                                                                                                                                                                                   |\\n| fieldExists    | `fieldExists('fieldName')`              | Function that when given a field name will return whether or not it exists (i.e. the component is rendered).                                                                                                                                                                                                              |\\n| resetPath      | `resetPath(\\\"brothers.friend\\\")`          | Function that will reset all fields under given path                                                                                                                                                                                                                                                                      |\\n| disable        | `disable()`                             | Function that will disable the form                                                                                                                                                                                                                                                                                       |\\n| enable         | `enable()`                              | Function that will enable the form PLEASE NOTE if you pass in disabled prop that will override this                                                                                                                                                                                                                       |\\n\\n**\\\"Ok so informed gives us access to this formApi.. but how do i get my hands\\non it??**\\n\\nThats a great question! There are many ways so lets take a look at a few!\\n\\nBelow is an example that shows you how to access the form api and use some of\\nits functions.\\n\\n<!-- STORY -->\\n\\n```jsx\\nimport { Form, Text } from 'informed';\\n\\n<Form id=\\\"form-api-form\\\">\\n  {({ formApi }) => (\\n    <div>\\n      <Input name=\\\"name\\\" label=\\\"First name:\\\" />\\n      <button type=\\\"button\\\" onClick={() => formApi.setValue('name', 'Joe')}>\\n        Set Name to \\\"Joe\\\"\\n      </button>\\n      <button\\n        type=\\\"button\\\"\\n        onClick={() => formApi.setValueQuietly('name', 'Kevin')}>\\n        Set Name to \\\"Kevin\\\" Quietly\\n      </button>\\n      <button type=\\\"button\\\" onClick={() => formApi.reset()}>\\n        Reset\\n      </button>\\n      <button type=\\\"button\\\" onClick={() => formApi.setValue('foo', 'Bar')}>\\n        Set Foo to \\\"Bar\\\"\\n      </button>\\n      <button type=\\\"button\\\" onClick={() => formApi.disable()}>\\n        Disable\\n      </button>\\n      <button type=\\\"button\\\" onClick={() => formApi.enable()}>\\n        Enable\\n      </button>\\n      <button type=\\\"submit\\\">Submit</button>\\n    </div>\\n  )}\\n</Form>;\\n```\\n\\n<br/>\\n\";","import React from 'react';\nimport readme from './README.md';\nimport withDocs from '../../../utils/withDocs';\n\nimport { Form, Input, Debug } from '../../../../src';\n\nconst FormApi = () => (\n  <Form id=\"form-api-form\">\n    {({ formApi }) => (\n      <div>\n        <Input name=\"name\" label=\"First name:\" />\n        <button type=\"button\" onClick={() => formApi.setValue('name', 'Joe')}>\n          Set Name to \"Joe\"\n        </button>\n        <button\n          type=\"button\"\n          onClick={() => formApi.setValueQuietly('name', 'Kevin')}>\n          Set Name to \"Kevin\" Quietly\n        </button>\n        <button type=\"button\" onClick={() => formApi.reset()}>\n          Reset\n        </button>\n        <button type=\"button\" onClick={() => formApi.setValue('foo', 'Bar')}>\n          Set Foo to \"Bar\"\n        </button>\n        <button type=\"button\" onClick={() => formApi.disable()}>\n          Disable\n        </button>\n        <button type=\"button\" onClick={() => formApi.enable()}>\n          Enable\n        </button>\n        <button type=\"submit\">Submit</button>\n        <Debug />\n      </div>\n    )}\n  </Form>\n);\n\nexport default withDocs(readme, FormApi);\n","export default \"You can also get access to `Informed`s form api via `useFormApi`\\n\\n<!-- STORY -->\\n\\n```jsx\\nimport { Form, Input, useFormApi } from 'informed';\\n\\nconst RandomSetterButton = () => {\\n  const formApi = useFormApi();\\n  return (\\n    <button\\n      type=\\\"button\\\"\\n      onClick={() =>\\n        formApi.setValue(\\n          'name',\\n          Math.floor(Math.random() * Math.floor(Number.MAX_SAFE_INTEGER))\\n        )\\n      }>\\n      Random\\n    </button>\\n  );\\n};\\n\\nconst SetValuesButton = () => {\\n  const formApi = useFormApi();\\n  return (\\n    <button\\n      type=\\\"button\\\"\\n      onClick={() => formApi.setValues({ age: 26, color: 'Green' })}>\\n      All\\n    </button>\\n  );\\n};\\n\\nconst SetTheseValuesButton = () => {\\n  const formApi = useFormApi();\\n  return (\\n    <button\\n      type=\\\"button\\\"\\n      onClick={() => formApi.setTheseValues({ age: 26, color: 'Green' })}>\\n      Age & Color\\n    </button>\\n  );\\n};\\n\\nconst FormApi = () => (\\n  <Form validateOn=\\\"change\\\" showErrorIfError>\\n    <Input name=\\\"name\\\" label=\\\"First Name:\\\" initialValue=\\\"Joe\\\" required />\\n    <Input name=\\\"age\\\" label=\\\"First Name:\\\" type=\\\"number\\\" initialValue=\\\"27\\\" />\\n    <Input name=\\\"color\\\" label=\\\"Favorite Color:\\\" formatter=\\\"*-*-***\\\" />\\n    <RandomSetterButton />\\n    <SetValuesButton />\\n    <SetTheseValuesButton />\\n    <button type=\\\"submit\\\">Submit</button>\\n  </Form>\\n);\\n```\\n\\n<br />\\n\";","import React from 'react';\nimport withDocs from '../../../utils/withDocs';\nimport readme from './README.md';\nimport { Form, Input, useFormApi, Debug } from '../../../../src';\n\nconst RandomSetterButton = () => {\n  const formApi = useFormApi();\n  return (\n    <button\n      type=\"button\"\n      onClick={() =>\n        formApi.setValue(\n          'name',\n          Math.floor(Math.random() * Math.floor(Number.MAX_SAFE_INTEGER))\n        )\n      }>\n      Random\n    </button>\n  );\n};\n\nconst SetValuesButton = () => {\n  const formApi = useFormApi();\n  return (\n    <button\n      type=\"button\"\n      onClick={() => formApi.setValues({ age: 26, color: 'Green' })}>\n      All\n    </button>\n  );\n};\n\nconst SetTheseValuesButton = () => {\n  const formApi = useFormApi();\n  return (\n    <button\n      type=\"button\"\n      onClick={() => formApi.setTheseValues({ age: 26, color: 'Green' })}>\n      Age & Color\n    </button>\n  );\n};\n\nconst FormApi = () => (\n  <Form validateOn=\"change\" showErrorIfError>\n    <Input name=\"name\" label=\"First Name:\" initialValue=\"Joe\" required />\n    <Input name=\"age\" label=\"First Name:\" type=\"number\" initialValue=\"27\" />\n    <Input name=\"color\" label=\"Favorite Color:\" formatter=\"*-*-***\" />\n    <RandomSetterButton />\n    <SetValuesButton />\n    <SetTheseValuesButton />\n    <button type=\"submit\">Submit</button>\n    {/* <Debug /> */}\n  </Form>\n);\n\nexport default withDocs(readme, FormApi);\n","import React from 'react';\nimport Intro from './Intro';\nimport RenderProp from '../../Intro/FormApi/RenderProp';\nimport UseFormApi from './UseFormApi';\n\nconst ApiStuff = () => (\n  <div>\n    <Intro />\n    <RenderProp />\n    <UseFormApi />\n  </div>\n);\n\nexport default ApiStuff;\n","export default \"# Basic Form\\n\\n<!-- STORY -->\\n\\n```jsx\\nimport { Form, Input, Debug } from 'informed';\\n\\nconst onSubmit = ({ values }) => {\\n  window.alert(JSON.stringify(values, null, 2));\\n};\\n\\nconst Basic = () => (\\n  <Form onSubmit={onSubmit} autocomplete=\\\"off\\\">\\n    <Input name=\\\"name\\\" label=\\\"First name:\\\" />\\n    <button type=\\\"submit\\\">Submit</button>\\n    <Debug values />\\n  </Form>\\n);\\n```\\n\";","import React from 'react';\nimport withDocs from '../../utils/withDocs';\nimport readme from './README.md';\n\nimport { Form, Input, Debug } from '../../../src';\n\nconst onSubmit = ({ values }) => {\n  window.alert(JSON.stringify(values, null, 2));\n};\n\n// const onValueChange = (formState, name) => {\n//   console.log(name, formState);\n// };\n\nconst Basic = () => (\n  <Form onSubmit={onSubmit} autocomplete=\"off\">\n    <Input name=\"name\" label=\"First name:\" />\n    <button type=\"submit\">Submit</button>\n    <Debug values />\n  </Form>\n);\n\nexport default withDocs(readme, Basic);\n","export default \"# Complex Form\\n\\n<!-- STORY -->\\n\\n```jsx\\nimport { Form, Input, useFormApi } from 'informed';\\n```\\n\";","import React from 'react';\nimport withDocs from '../../utils/withDocs';\nimport readme from './README.md';\n\nimport { Form, Input, useFormApi, Debug } from '../../../src';\n\nconst MyButton = () => {\n  const formApi = useFormApi();\n  return (\n    <button type=\"button\" onClick={formApi.reset}>\n      Reset\n    </button>\n  );\n};\n\nconst Big = () => (\n  <Form>\n    <div style={{ display: 'flex' }}>\n      <div style={{ flex: '1' }}>\n        <MyButton />\n        {Array.from(Array(250)).map((_, i) => (\n          <>\n            <label key={`big-${i}`}>\n              First name:\n              <Input name={`field-${i}`} />\n            </label>\n          </>\n        ))}\n        <button type=\"submit\">Submit</button>\n      </div>\n      <div style={{ flex: '1' }}>\n        <Debug />\n      </div>\n    </div>\n  </Form>\n);\n\nexport default withDocs(readme, Big);\n","export default \"# Complex Form\\n\\n<!-- STORY -->\\n\\n```jsx\\nimport {\\n  Form,\\n  Text,\\n  TextArea,\\n  RadioGroup,\\n  Radio,\\n  Checkbox,\\n  Select,\\n  Option,\\n  Scope\\n} from 'informed';\\n\\n<Form>\\n  <Input name=\\\"name\\\" label=\\\"First name:\\\" />\\n  <Input name=\\\"favorite.color\\\" label=\\\"Favorite color:\\\" />\\n  <Scope scope=\\\"favorite\\\">\\n    <Input name=\\\"food\\\" label=\\\"Favorite food:\\\" />\\n    <Input name=\\\"animal\\\" label=\\\"Favorite animal:\\\" />\\n  </Scope>\\n  <Input name=\\\"friends[0]\\\" label=\\\"Friend 1:\\\" />\\n  <Input name=\\\"friends[1]\\\" label=\\\"Friend 2:\\\" />\\n  <Input name=\\\"friends[2]\\\" label=\\\"Friend 3:\\\" />\\n  <TextArea name=\\\"bio\\\" label=\\\"Bio\\\" />\\n  <RadioGroup name=\\\"gender\\\">\\n    <Radio value=\\\"male\\\" label=\\\"Male:\\\" />\\n    <Radio value=\\\"female\\\" label=\\\"Female:\\\" />\\n  </RadioGroup>\\n  <Select name=\\\"status\\\" label=\\\"Relationship status:\\\">\\n    <Option value=\\\"\\\" disabled>\\n      Select One...\\n    </Option>\\n    <Option value=\\\"single\\\">Single</Option>\\n    <Option value=\\\"relationship\\\">Relationship</Option>\\n    <Option value=\\\"complicated\\\">Complicated</Option>\\n  </Select>\\n  <Select\\n    name=\\\"colors\\\"\\n    label=\\\"Colors:\\\"\\n    multiple\\n    style={{ height: '100px', width: '200px' }}>\\n    <Option value=\\\"red\\\">Red</Option>\\n    <Option value=\\\"green\\\">Green</Option>\\n    <Option value=\\\"blue\\\">Blue</Option>\\n    <Option value=\\\"yellow\\\">Yellow</Option>\\n    <Option value=\\\"orange\\\">Orange</Option>\\n    <Option value=\\\"purple\\\">Purple</Option>\\n  </Select>\\n  <Checkbox name=\\\"authorize\\\" label=\\\"Authorize:\\\" />\\n  <button type=\\\"submit\\\">Submit</button>\\n</Form>;\\n```\\n\";","import React from 'react';\nimport withDocs from '../../utils/withDocs';\nimport readme from './README.md';\n\nimport {\n  Form,\n  Input,\n  TextArea,\n  RadioGroup,\n  Radio,\n  Checkbox,\n  Select,\n  Option,\n  Scope,\n  Debug\n} from '../../../src';\n\nconst Complex = () => (\n  <div>\n    <Form autocomplete=\"off\">\n      <div style={{ display: 'flex', flexWrap: 'wrap' }}>\n        <div style={{ flex: 1, marginRight: '2rem' }}>\n          <Input name=\"name\" label=\"First name:\" />\n          <Input name=\"favorite.color\" label=\"Favorite color:\" />\n          <Scope scope=\"favorite\">\n            <Input name=\"food\" label=\"Favorite food:\" />\n            <Input name=\"animal\" label=\"Favorite animal:\" />\n          </Scope>\n          <Input name=\"friends[0]\" label=\"Friend 1:\" />\n          <Input name=\"friends[1]\" label=\"Friend 2:\" />\n          <Input name=\"friends[2]\" label=\"Friend 3:\" />\n          <TextArea name=\"bio\" label=\"Bio\" />\n          <RadioGroup name=\"gender\">\n            <Radio value=\"male\" label=\"Male:\" />\n            <Radio value=\"female\" label=\"Female:\" />\n          </RadioGroup>\n          <Select name=\"status\" label=\"Relationship status:\">\n            <Option value=\"\" disabled>\n              Select One...\n            </Option>\n            <Option value=\"single\">Single</Option>\n            <Option value=\"relationship\">Relationship</Option>\n            <Option value=\"complicated\">Complicated</Option>\n          </Select>\n          <Select\n            name=\"colors\"\n            label=\"Colors:\"\n            multiple\n            style={{ height: '100px', width: '200px' }}>\n            <Option value=\"red\">Red</Option>\n            <Option value=\"green\">Green</Option>\n            <Option value=\"blue\">Blue</Option>\n            <Option value=\"yellow\">Yellow</Option>\n            <Option value=\"orange\">Orange</Option>\n            <Option value=\"purple\">Purple</Option>\n          </Select>\n          <Checkbox name=\"authorize\" label=\"Authorize:\" />\n          <button type=\"submit\">Submit</button>\n        </div>\n        <div style={{ flex: 2, minWidth: '300px', marginLeft: '3rem' }}>\n          <Debug />\n        </div>\n      </div>\n    </Form>\n  </div>\n);\n\nexport default withDocs(readme, Complex);\n","export default \"# Dynamic Form\\n\\nOften you need to \\\"pull the rug\\\" out from under a form and dynamically change\\nthe contents. This is easily achieved with informed. Below is an example of three\\ninputs, and three toggle buttons. The first two inputs are basically the same but are\\nsimply toggled in two different ways ( same result different code ). The third one\\nis special because it has an additional \\\"keep-state\\\" prop.\\n\\nDo this! Enter somthing in the first and second fields, then hit the first two toggle buttons.\\nNotice how the old values are removed from the form state, and the fields are updated. Sometimes,\\nthis is what a developer wants! When they change the field they want the old value to go away. BUT!\\nsometimes this is not what a developer wants. Instead, they may want a fields value to stick around.\\nIn order to achive this, you simply tell informed to \\\"keep the state\\\".\\n\\nDo this now! Enter somthing in the third field and hit the third toggle button. Enter a new value in the empty field,\\nand then toggle again! You can see how the value persisted!\\n\\n<!-- STORY -->\\n\\n```jsx\\nimport React, { useState } from 'react';\\nimport { Form, Input, useFieldState } from 'informed';\\n\\nconst JoesState = () => {\\n  const fieldState = useFieldState('joe');\\n  return (\\n    <>\\n      <strong>Joes State</strong>\\n      <pre>\\n        <code>{JSON.stringify(fieldState, null, 2)}</code>\\n      </pre>\\n    </>\\n  );\\n};\\n\\nconst ElonsState = () => {\\n  const fieldState = useFieldState('elon');\\n  return (\\n    <>\\n      <strong>Elons State</strong>\\n      <pre>\\n        <code>{JSON.stringify(fieldState, null, 2)}</code>\\n      </pre>\\n    </>\\n  );\\n};\\n\\nconst DynamicForm = () => {\\n  const [field1, setField1] = useState('foo');\\n  const [field2, setField2] = useState('baz');\\n  const [field3, setField3] = useState('boo');\\n  const [disabled, setDisabled] = useState(true);\\n  const [field5, setField5] = useState('joe');\\n\\n  const toggle1 = () => {\\n    setField1(field1 === 'foo' ? 'bar' : 'foo');\\n  };\\n\\n  const toggle2 = () => {\\n    setField2(field2 === 'baz' ? 'taz' : 'baz');\\n  };\\n\\n  const toggle3 = () => {\\n    setField3(field3 === 'boo' ? 'far' : 'boo');\\n  };\\n\\n  const toggle4 = () => {\\n    setDisabled(dis => !dis);\\n  };\\n\\n  const toggle5 = () => {\\n    setField5(field5 === 'joe' ? 'elon' : 'joe');\\n  };\\n\\n  return (\\n    <div>\\n      <Form>\\n        <label htmlFor=\\\"field1\\\" key={field1}>\\n          {field1}:<Input field={field1} id=\\\"field1\\\" />\\n        </label>\\n\\n        {field2 === 'baz' ? (\\n          <label htmlFor=\\\"baz\\\" key=\\\"baz\\\">\\n            baz:\\n            <Input field=\\\"baz\\\" id=\\\"baz\\\" />\\n          </label>\\n        ) : (\\n          <label htmlFor=\\\"taz\\\" key=\\\"taz\\\">\\n            taz:\\n            <Input field=\\\"taz\\\" id=\\\"taz\\\" />\\n          </label>\\n        )}\\n\\n        <label htmlFor=\\\"field3\\\" key={field3}>\\n          {field3}:<Input field={field3} id=\\\"field3\\\" keepState />\\n        </label>\\n\\n        <label key=\\\"diabled\\\">\\n          Diabled:\\n          <Input field=\\\"disabled\\\" disabled={disabled} />\\n        </label>\\n\\n        <label>\\n          {field5}:<Input field={field5} />\\n        </label>\\n\\n        <JoesState />\\n        <br />\\n        <ElonsState />\\n\\n        <button type=\\\"submit\\\">Submit</button>\\n      </Form>\\n      <button type=\\\"button\\\" onClick={toggle1}>\\n        Toggle Foo {'<->'} Bar\\n      </button>\\n      <br />\\n      <button type=\\\"button\\\" onClick={toggle2}>\\n        Toggle Baz {'<->'} Taz\\n      </button>\\n      <br />\\n      <button type=\\\"button\\\" onClick={toggle3}>\\n        Toggle Boo {'<->'} Far\\n      </button>\\n      <br />\\n      <button type=\\\"button\\\" onClick={toggle4}>\\n        Toggle Disabled\\n      </button>\\n      <br />\\n\\n      <button type=\\\"button\\\" onClick={toggle5}>\\n        Toggle Joe {'<->'} Elon\\n      </button>\\n    </div>\\n  );\\n};\\n```\\n\";","import React, { useState } from 'react';\nimport withDocs from '../../utils/withDocs';\nimport readme from './README.md';\n\nimport { Form, Input, Debug, useFieldState } from '../../../src';\n\nconst JoesState = () => {\n  const fieldState = useFieldState('joe');\n  return (\n    <>\n      <strong>Joes State</strong>\n      <pre>\n        <code>{JSON.stringify(fieldState, null, 2)}</code>\n      </pre>\n    </>\n  );\n};\n\nconst ElonsState = () => {\n  const fieldState = useFieldState('elon');\n  return (\n    <>\n      <strong>Elons State</strong>\n      <pre>\n        <code>{JSON.stringify(fieldState, null, 2)}</code>\n      </pre>\n    </>\n  );\n};\n\nconst DynamicContent = () => {\n  const [field1, setField1] = useState('foo');\n  const [field2, setField2] = useState('baz');\n  const [field3, setField3] = useState('boo');\n  const [disabled, setDisabled] = useState(true);\n  const [field5, setField5] = useState('joe');\n\n  const toggle1 = () => {\n    setField1(field1 === 'foo' ? 'bar' : 'foo');\n  };\n\n  const toggle2 = () => {\n    setField2(field2 === 'baz' ? 'taz' : 'baz');\n  };\n\n  const toggle3 = () => {\n    setField3(field3 === 'boo' ? 'far' : 'boo');\n  };\n\n  const toggle4 = () => {\n    setDisabled(dis => !dis);\n  };\n\n  const toggle5 = () => {\n    setField5(field5 === 'joe' ? 'elon' : 'joe');\n  };\n\n  return (\n    <div>\n      <Form>\n        <div style={{ display: 'flex' }}>\n          <div style={{ flex: 1 }}>\n            <label htmlFor=\"field1\" key={field1}>\n              {field1}:<Input name={field1} id=\"field1\" />\n            </label>\n\n            {field2 === 'baz' ? (\n              <label htmlFor=\"baz\" key=\"baz\">\n                baz:\n                <Input name=\"baz\" id=\"baz\" />\n              </label>\n            ) : (\n              <label htmlFor=\"taz\" key=\"taz\">\n                taz:\n                <Input name=\"taz\" id=\"taz\" />\n              </label>\n            )}\n\n            <label htmlFor=\"field3\" key={field3}>\n              {field3}:<Input name={field3} id=\"field3\" keepState />\n            </label>\n\n            <label key=\"diabled\">\n              Diabled:\n              <Input name=\"disabled\" disabled={disabled} />\n            </label>\n\n            <label>\n              {field5}:<Input name={field5} />\n            </label>\n\n            <JoesState />\n            <br />\n            <ElonsState />\n\n            <button type=\"submit\">Submit</button>\n          </div>\n          <div style={{ flex: 1 }}>\n            <button type=\"button\" onClick={toggle1}>\n              Toggle Foo {'<->'} Bar\n            </button>\n            <br />\n            <button type=\"button\" onClick={toggle2}>\n              Toggle Baz {'<->'} Taz\n            </button>\n            <br />\n            <button type=\"button\" onClick={toggle3}>\n              Toggle Boo {'<->'} Far\n            </button>\n            <br />\n            <button type=\"button\" onClick={toggle4}>\n              Toggle Disabled\n            </button>\n            <br />\n            <button type=\"button\" onClick={toggle5}>\n              Toggle Joe {'<->'} Elon\n            </button>\n          </div>\n        </div>\n\n        <Debug />\n      </Form>\n    </div>\n  );\n};\n\nconst Dynamic = () => <DynamicContent />;\n\nexport default withDocs(readme, Dynamic);\n","export default \"# Feature Tester\\n\\nI literally made this to test lots of features in one form lols\\n\\n<!-- STORY -->\\n\\n```jsx\\n```\\n\";","import React, { useState } from 'react';\nimport withDocs from '../../utils/withDocs';\nimport readme from './README.md';\nimport { MultistepStepContext } from '../../../src/Context';\n\nimport {\n  Form,\n  Input,\n  Checkbox,\n  Relevant,\n  ArrayField,\n  useFormApi,\n  useFieldState,\n  FormStateAccessor,\n  Debug\n} from '../../../src';\n\nconst initialValues = {\n  last: 'Puzzo',\n  baz: 'BAZ',\n  friends: [\n    {\n      first: 'Joe',\n      last: 'Puzzo'\n    },\n    {\n      first: 'Jill',\n      last: 'Jillberg'\n    },\n    {\n      first: 'Jane',\n      last: 'Janney'\n    }\n  ]\n};\n\nconst Reset = () => {\n  const formApi = useFormApi();\n  return (\n    <button type=\"button\" onClick={formApi.reset}>\n      Reset Form\n    </button>\n  );\n};\n\nconst formatter = [\n  '+',\n  '1',\n  ' ',\n  /\\d/,\n  /\\d/,\n  /\\d/,\n  '-',\n  /\\d/,\n  /\\d/,\n  /\\d/,\n  '-',\n  /\\d/,\n  /\\d/,\n  /\\d/,\n  /\\d/\n];\n\nconst parser = value => {\n  return value.replace('+1 ', '').replace(/-/g, '');\n};\n\nconst mask = value => value.toUpperCase();\n\nconst onSubmit = ({ values }) => console.log(values);\n\nconst validateLength = value => {\n  return !value || value.length < 5\n    ? 'Field must be at least five characters'\n    : undefined;\n};\n\nconst validateFields = values => {\n  return {\n    foo: validateLength(values.foo),\n    bar: validateLength(values.bar),\n    baz: validateLength(values.baz),\n    friends: [\n      {\n        first: validateLength(values.friends[0].first)\n      },\n      {\n        first: validateLength(values.friends[1].first)\n      }\n    ]\n  };\n};\n\nconst FieldState = ({ name }) => {\n  const fieldState = useFieldState(name);\n  return (\n    <>\n      <h5>Component using fieldState: {name}</h5>\n      Render: {Math.random()}\n      <pre>\n        <code>{JSON.stringify(fieldState, null, 2)}</code>\n      </pre>\n    </>\n  );\n};\n\nconst FeatureTester = () => {\n  const [step, setStep] = useState(1);\n\n  const onReset = state => {\n    console.log('RESET', state);\n  };\n\n  const onChange = state => {\n    console.log('CHANGE', state);\n  };\n\n  const onSubmitFailure = state => {\n    console.log('FAILURE', state);\n  };\n\n  return (\n    <div>\n      <Form\n        onSubmit={onSubmit}\n        // onChange={onChange}\n        autocomplete=\"off\"\n        onReset={onReset}\n        onSubmitFailure={onSubmitFailure}\n        initialValues={initialValues}\n        validateFields={validateFields}>\n        <div style={{ display: 'flex', flexWrap: 'wrap' }}>\n          <div style={{ flex: 1, marginRight: '2rem' }}>\n            <Reset />\n            <FormStateAccessor>\n              {({ submitted }) => (\n                <>\n                  <button type=\"submit\">\n                    Submit {submitted ? '( Been Submitted )' : ''}\n                  </button>\n                </>\n              )}\n            </FormStateAccessor>\n            {/* ----------------------------------------------------------- */}\n            <hr />\n            <h3>Masking Test</h3>\n            <Input\n              name=\"phone\"\n              formatter={formatter}\n              parser={parser}\n              maintainCursor\n              initialValue=\"1231231234\"\n              debug\n            />\n            <Input\n              name=\"uppercase\"\n              formatter={[\n                mask,\n                mask,\n                '-',\n                mask,\n                mask,\n                '-',\n                mask,\n                mask,\n                mask,\n                mask\n              ]}\n              maintainCursor\n              initialValue=\"abcdefgh\"\n              debug\n            />\n            {/* ----------------------------------------------------------- */}\n            <hr />\n            <h3>Normal Form Test</h3>\n            <Input label=\"First Name\" name=\"first\" initialValue=\"Joe\" debug />\n            <Input\n              label=\"Last Name\"\n              name=\"last\"\n              debug\n              validate={v => (v === 'Puzzo' ? 'Ahhhh' : undefined)}\n            />\n            <Input label=\"Foo\" name=\"foo\" defaultValue=\"foo\" debug />\n            <Input\n              label=\"Bar\"\n              name=\"bar\"\n              initialValue=\"BAR\"\n              defaultValue=\"bar\"\n              debug\n            />\n            <Input label=\"Baz\" name=\"baz\" defaultValue=\"bar\" debug />\n            {/* ----------------------------------------------------------- */}\n            <hr />\n            <h3>Relevant Test</h3>\n            <Checkbox label=\"Show Info?\" name=\"showInfo\" debug />\n            <Relevant when={({ formState }) => formState.values.showInfo}>\n              <Input type=\"number\" label=\"Age\" name=\"age\" debug />\n              <Input label=\"Favorite Color\" name=\"color\" keepState debug />\n            </Relevant>\n            <Input\n              label=\"Favorite Food\"\n              name=\"food\"\n              debug\n              relevanceWhen={['showInfo']}\n              relevant={({ formState }) => formState.values.showInfo}\n            />\n            <Input\n              label=\"Favorite Animal\"\n              name=\"animal\"\n              keepState\n              debug\n              relevanceWhen={['showInfo']}\n              relevant={({ formState }) => formState.values.showInfo}\n            />\n            {/* ----------------------------------------------------------- */}\n            <hr />\n            <h3>Multistep Test</h3>\n            <MultistepStepContext.Provider value={step}>\n              <button type=\"button\" onClick={() => setStep(1)}>\n                Step1\n              </button>\n              <button type=\"button\" onClick={() => setStep(2)}>\n                Step2\n              </button>\n              {step === 1 ? (\n                <>\n                  <Checkbox label=\"Show Info?\" name=\"multi.showInfo\" debug />\n                  <Relevant\n                    when={({ formState }) => formState.values.multi?.showInfo}>\n                    <Input\n                      type=\"number\"\n                      label=\"Age []\"\n                      name=\"multi.age\"\n                      debug\n                    />\n                    <Input\n                      label=\"Favorite Color [keepState]\"\n                      name=\"multi.color\"\n                      keepState\n                      debug\n                    />\n                  </Relevant>\n                  <Input\n                    label=\"Favorite Food []\"\n                    name=\"multi.food\"\n                    debug\n                    relevanceWhen={['showInfo']}\n                    relevant={({ formState }) =>\n                      formState.values.multi?.showInfo\n                    }\n                  />\n                  <Input\n                    label=\"Favorite Animal [keepState]\"\n                    name=\"multi.animal\"\n                    keepState\n                    debug\n                    relevanceWhen={['showInfo']}\n                    relevant={({ formState }) =>\n                      formState.values.multi?.showInfo\n                    }\n                  />\n                </>\n              ) : null}\n              {step === 2 ? (\n                <>\n                  <Input\n                    label=\"First Name\"\n                    name=\"multi.first\"\n                    initialValue=\"Joe\"\n                    debug\n                  />\n                  <Input label=\"Last Name\" name=\"multi.last\" debug />\n                </>\n              ) : null}\n            </MultistepStepContext.Provider>\n            {/* ----------------------------------------------------------- */}\n            <hr />\n            <h3>Array Test</h3>\n            <Checkbox\n              label=\"Show Friends?\"\n              name=\"showFriends\"\n              initialValue\n              debug\n            />\n            <h5>Friends:</h5>\n            <ArrayField\n              name=\"friends\"\n              relevant={({ formState }) => formState.values.showFriends}>\n              {({ add, addWithInitialValue, swap, reset }) => (\n                <>\n                  <button\n                    onClick={() => {\n                      reset();\n                    }}\n                    type=\"button\">\n                    Reset\n                  </button>\n                  <button\n                    onClick={() => {\n                      add();\n                    }}\n                    type=\"button\">\n                    Add\n                  </button>\n\n                  <button\n                    onClick={() => {\n                      swap(0, 1);\n                    }}\n                    type=\"button\">\n                    Swap\n                  </button>\n                  <button\n                    type=\"button\"\n                    onClick={() => {\n                      addWithInitialValue({ name: 'test' });\n                    }}>\n                    Add with initialValue\n                  </button>\n\n                  <ArrayField.Items>\n                    {({ remove, name }) => (\n                      <label>\n                        {console.log('RENDER')}\n                        <h5>{name}</h5>\n                        <Input\n                          label=\"First [ keepState ]\"\n                          name=\"first\"\n                          keepState\n                          debug\n                        />\n                        <Input\n                          label=\"Last [ keepState ]\"\n                          name=\"last\"\n                          debug\n                          keepState\n                          initialValue={`bob-${name}`}\n                        />\n                        <Input\n                          label=\"Foo [ ]\"\n                          name=\"foo\"\n                          debug\n                          initialValue={`foo-${name}`}\n                        />\n                        <Checkbox label=\"Show Info?\" name=\"showInfo\" debug />\n                        <Relevant\n                          when={({ formApi, scope }) =>\n                            formApi.getValue(`${scope}.showInfo`)\n                          }>\n                          <Input type=\"number\" label=\"Age\" name=\"age\" debug />\n                          <Input\n                            label=\"Favorite Color\"\n                            name=\"color\"\n                            keepState\n                            debug\n                          />\n                        </Relevant>\n                        <Input\n                          label=\"Favorite Food\"\n                          name=\"food\"\n                          debug\n                          relevanceWhen={['showInfo']}\n                          relevant={({ formApi, scope }) =>\n                            formApi.getValue(`${scope}.showInfo`)\n                          }\n                        />\n                        <FieldState name={name} />\n                        <button type=\"button\" onClick={remove}>\n                          Remove\n                        </button>\n                        {/* <pre>\n                      <code>{JSON.stringify(values, null, 2)}</code>\n                    </pre> */}\n                      </label>\n                    )}\n                  </ArrayField.Items>\n                </>\n              )}\n            </ArrayField>\n          </div>\n          <div style={{ flex: 2, minWidth: '300px', marginLeft: '3rem' }}>\n            <Debug />\n          </div>\n        </div>\n      </Form>\n    </div>\n  );\n};\n\nexport default withDocs(readme, FeatureTester);\n","export default \"# FormProvider\\n\\nSometimes you dont want to render a form, just fields!\\n\\n<!-- STORY -->\\n\\n```jsx\\nimport { FormProvider, Input, Debug, useFormApi } from 'informed';\\n\\nconst onSubmit = ({ values }) => {\\n  window.alert(JSON.stringify(values, null, 2));\\n};\\n\\nconst SubmitButton = () => {\\n  const formApi = useFormApi();\\n\\n  return <button onClick={formApi.submitForm}>Submit</button>;\\n};\\n\\nconst FormProviderExample = () => {\\n  return (\\n    <FormProvider onSubmit={onSubmit}>\\n      <Input field=\\\"name\\\" label=\\\"First name:\\\" />\\n      <SubmitButton />\\n      <Debug values />\\n    </FormProvider>\\n  );\\n};\\n```\\n\";","import React from 'react';\nimport withDocs from '../../utils/withDocs';\nimport readme from './README.md';\n\nimport { FormProvider, Input, Debug, useFormApi } from '../../../src';\n\nconst onSubmit = ({ values }) => {\n  window.alert(JSON.stringify(values, null, 2));\n};\n\nconst SubmitButton = () => {\n  const formApi = useFormApi();\n\n  return <button onClick={formApi.submitForm}>Submit</button>;\n};\n\nconst FormProviderExample = () => {\n  return (\n    <FormProvider onSubmit={onSubmit}>\n      <Input field=\"name\" label=\"First name:\" />\n      <SubmitButton />\n      <Debug values />\n    </FormProvider>\n  );\n};\n\nexport default withDocs(readme, FormProviderExample);\n","export default \"# Dependent Fields\\n\\nSometimes fields values depend on what you input in other parts of the form.\\n\\n<!-- STORY -->\\n\\n```jsx\\nimport {\\n  Form,\\n  RadioGroup,\\n  Radio,\\n  Select,\\n  Debug,\\n  useFieldState,\\n  useFieldApi\\n} from 'informed';\\n\\nconst options = {\\n  car: [\\n    {\\n      value: '',\\n      label: '- Select -',\\n      disabled: true\\n    },\\n    {\\n      value: 'modelS',\\n      label: 'Model S'\\n    },\\n    {\\n      value: 'model3',\\n      label: 'Model 3'\\n    },\\n    {\\n      value: 'modelX',\\n      label: 'Model X'\\n    },\\n    {\\n      value: 'modely',\\n      label: 'Model Y'\\n    }\\n  ],\\n  truck: [\\n    {\\n      value: '',\\n      label: '- Select -',\\n      disabled: true\\n    },\\n    {\\n      value: 'semi',\\n      label: 'Semi Truck'\\n    },\\n    {\\n      value: 'cyber',\\n      label: 'Cyber Truck'\\n    }\\n  ]\\n};\\n\\nconst CarOrTruck = () => {\\n  return (\\n    <>\\n      <label>Would you like a car or truck?</label>\\n      <RadioGroup name=\\\"type\\\" initialValue=\\\"car\\\">\\n        <Radio value=\\\"car\\\" label=\\\"Car\\\" />\\n        <Radio value=\\\"truck\\\" label=\\\"Truck\\\" />\\n      </RadioGroup>\\n    </>\\n  );\\n};\\n\\nconst ProductSelect = () => {\\n  const { value, dirty } = useFieldState('type');\\n  const { clearValue } = useFieldApi('product');\\n\\n  const opts = useMemo(() => options[value] || [], [value]);\\n\\n  useEffect(\\n    () => {\\n      if (dirty) clearValue();\\n    },\\n    [value]\\n  );\\n\\n  return (\\n    <Select field=\\\"product\\\" label=\\\"Product\\\" disabled={!value}>\\n      <option value=\\\"\\\" disabled>\\n        - Select -\\n      </option>\\n      {opts.map(option => (\\n        <option key={option.value} value={option.value}>\\n          {option.label}\\n        </option>\\n      ))}\\n    </Select>\\n  );\\n};\\n\\nconst DependentFields = () => (\\n  <Form>\\n    <CarOrTruck />\\n    <ProductSelect />\\n    <button type=\\\"submit\\\">Submit</button>\\n    <Debug values />\\n    <DebugField name=\\\"type\\\" value dirty />\\n    <DebugField name=\\\"product\\\" value dirty />\\n  </Form>\\n);\\n```\\n\";","import React, { useEffect, useMemo } from 'react';\nimport withDocs from '../../utils/withDocs';\nimport readme from './README.md';\nimport {\n  Form,\n  RadioGroup,\n  Radio,\n  Select,\n  Debug,\n  useFieldState,\n  useFieldApi,\n  DebugField\n} from '../../../src';\n\nconst CarOrTruck = () => {\n  return (\n    <>\n      <label>Would you like a car or truck?</label>\n      <RadioGroup name=\"type\" initialValue=\"car\">\n        <Radio value=\"car\" label=\"Car\" />\n        <Radio value=\"truck\" label=\"Truck\" />\n      </RadioGroup>\n    </>\n  );\n};\n\nconst options = {\n  car: [\n    {\n      value: '',\n      label: '- Select -',\n      disabled: true\n    },\n    {\n      value: 'modelS',\n      label: 'Model S'\n    },\n    {\n      value: 'model3',\n      label: 'Model 3'\n    },\n    {\n      value: 'modelX',\n      label: 'Model X'\n    },\n    {\n      value: 'modely',\n      label: 'Model Y'\n    }\n  ],\n  truck: [\n    {\n      value: '',\n      label: '- Select -',\n      disabled: true\n    },\n    {\n      value: 'semi',\n      label: 'Semi Truck'\n    },\n    {\n      value: 'cyber',\n      label: 'Cyber Truck'\n    }\n  ]\n};\n\nconst ProductSelect = () => {\n  const { value, dirty } = useFieldState('type');\n  const { clearValue } = useFieldApi('product');\n\n  const opts = useMemo(() => options[value] || [], [value]);\n\n  useEffect(\n    () => {\n      if (dirty) clearValue();\n    },\n    [value]\n  );\n\n  return (\n    <Select field=\"product\" label=\"Product\" disabled={!value} options={opts} />\n  );\n};\n\nconst DependentFields = () => (\n  <Form>\n    <CarOrTruck />\n    <ProductSelect />\n    <button type=\"submit\">Submit</button>\n    <div style={{ display: 'flex' }}>\n      <div style={{ flex: 1 }}>\n        <h5>Form State:</h5>\n        <Debug values />\n      </div>\n      <div style={{ flex: 1, marginLeft: '2rem' }}>\n        <h5>Type State:</h5>\n        <DebugField name=\"type\" value dirty />\n      </div>\n      <div style={{ flex: 1, marginLeft: '2rem' }}>\n        <h5>Product State:</h5>\n        <DebugField name=\"product\" value dirty />\n      </div>\n    </div>\n  </Form>\n);\n\nexport default withDocs(readme, DependentFields);\n","export default \"# Modified\\n\\nSometimes you want to know what fields changed. You can easily do this by submitting with `modified`.\\n\\n<!-- STORY -->\\n\\n```jsx\\nimport { Form, Input, Debug } from 'informed';\\n\\nconst onSubmit = ({ modified }) => {\\n  window.alert(JSON.stringify(modified, null, 2));\\n};\\n\\nconst Modified = () => (\\n  <Form\\n    onSubmit={onSubmit}\\n    autocomplete=\\\"off\\\"\\n    initialValues={{\\n      name: 'Joe',\\n      age: 27\\n    }}>\\n    <Input name=\\\"name\\\" label=\\\"Name:\\\" />\\n    <Input name=\\\"age\\\" type=\\\"number\\\" label=\\\"Age:\\\" />\\n    <button type=\\\"submit\\\">Submit</button>\\n    <Debug values modified initialValues />\\n  </Form>\\n);\\n```\\n\";","import React from 'react';\nimport withDocs from '../../utils/withDocs';\nimport readme from './README.md';\n\nimport { Form, Input, Debug } from '../../../src';\n\nconst onSubmit = ({ modified }) => {\n  window.alert(JSON.stringify(modified, null, 2));\n};\n\nconst Modified = () => (\n  <Form\n    onSubmit={onSubmit}\n    autocomplete=\"off\"\n    initialValues={{\n      name: 'Joe',\n      age: 27\n    }}>\n    <Input name=\"name\" label=\"Name:\" />\n    <Input name=\"age\" type=\"number\" label=\"Age:\" />\n    <button type=\"submit\">Submit</button>\n    <Debug values modified initialValues />\n  </Form>\n);\n\nexport default withDocs(readme, Modified);\n","export default \"# Path Syntax\\n\\nEvery input in `informed` needs an associated field name. In its simplest form, field names are just strings. However, sometimes you may have some complex forms that require special ways of organizing your fields, this is where the special syntax comes in.\\n\\nFields can be simple strings, strings that contain \\\".\\\", and strings that contain \\\"[ ]\\\", much like how you access and write to objects and arrays in javascript. Below are some examples of field names and what they resolve to in the forms values object. This syntax is commonly referred to as `Java Script Property Access Notation` or JSPAN.\\n\\n| Field                 | Resolution                 |\\n| --------------------- | -------------------------- |\\n| `\\\"username\\\"`          | `values.username`          |\\n| `\\\"friends[0]\\\"`        | `values.friends[0]`        |\\n| `\\\"siblings.1\\\"`        | `values.siblings[1]`       |\\n| `\\\"parents[0].name\\\"`   | `values.parents[0].name`   |\\n| `\\\"foo.bar[0].baz[1]\\\"` | `values.foo.bar[0].baz[1]` |\\n\\n<!-- STORY -->\\n\\n```jsx\\nimport { Form, Input, Debug } from 'informed';\\n\\nconst Example = () => (\\n  <Form>\\n    <Input name=\\\"username\\\" label=\\\"Username:\\\" />\\n    <Input name=\\\"friends[0]\\\" label=\\\"Friend[0]:\\\" />\\n    <Input name=\\\"siblings.1\\\" label=\\\"Siblings.1:\\\" />\\n    <Input name=\\\"parents[0].name\\\" label=\\\"parents[0].name\\\" />\\n    <Input name=\\\"foo.bar[0].baz[1]\\\" label=\\\"foo.bar[0].baz[1]\\\" />\\n    <button type=\\\"submit\\\">submit</button>\\n    <Debug values />\\n  </Form>\\n);\\n```\\n\";","import React from 'react';\nimport withDocs from '../../utils/withDocs';\nimport readme from './README.md';\nimport { Form, Input, Debug } from '../../../src';\n\nconst Example = () => (\n  <Form>\n    <Input name=\"username\" label=\"username:\" />\n    <Input name=\"friends[0]\" label=\"friend[0]:\" />\n    <Input name=\"siblings.1\" label=\"siblings.1:\" />\n    <Input name=\"parents[0].name\" label=\"parents[0].name\" />\n    <Input name=\"foo.bar[0].baz[1]\" label=\"foo.bar[0].baz[1]\" />\n    <button type=\"submit\">submit</button>\n    <Debug values />\n  </Form>\n);\n\n// const schema = {\n//   properties: {\n//     bio: {\n//       type: 'string',\n//       title: 'Enter bio:',\n//       'ui:control': 'textarea',\n//     },\n//   },\n// };\n\n// const TextAreaExample = () => <Form schema={schema} />;\n\nexport default withDocs(readme, Example);\n","export default \"# Form Props\\n\\n`Informed`s Form element can take many props. Below is table that defines what\\nprops are available and what they do.\\n\\n| Name               | Type         | Description                                                                                                                                                                                                                         |\\n| ------------------ | ------------ | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\\n| children           | node OR func | A function that is given the form api and form state as props parameter FAAC ( Function As A Child ). Or normal JSX children                                                                                                        |\\n| onSubmit           | func         | A function that gets called when form is submitted successfully. The function receives the formState as a parameter                                                                                                                 |\\n| initialValues      | obj          | Use this if you want to populate the form with initial values.                                                                                                                                                                      |\\n| onChange           | func         | Function that gets called when form updates. Function receives the formState as a parameter.                                                                                                                                        |\\n| onValueChange      | func         | Function that gets called when a fields value updates. Function receives the formState as a parameter.                                                                                                                              |\\n| dontPreventDefault | bool         | The default is to always \\\"preventDefault\\\" when a form submits. Pass this to disable \\\"preventingDefault\\\". You would, for example, pass this in when you want to use a good old form submission using action=\\\"/foo.php\\\" on your form. |\\n| onSubmitFailure    | func         | Function that gets called when submission fails due to errors. Function will receive the formState.                                                                                                                                 |\\n| validate           | func         | Function that gets called when form is attempting to submit. Function accepts the values as a parameter and must return either an error or undefined.                                                                               |\\n| validateFields     | func         | Function that gets called when form is attempting to submit. Function accepts the values as a parameter and must return an object where the key is the field and the value is an error or undefined                                 |\\n| validationSchema   | yup schema   | A yup schema to perform validation                                                                                                                                                                                                  |\\n| allowEmptyStrings  | bool         | Enable empty strings in the form values ( by default when you backspace everything in a text field it will remove the value from the values )                                                                                       |\\n| preventEnter       | bool         | Prevents the enter key from submitting the form                                                                                                                                                                                     |\\n| onReset            | func         | Function that gets called when form is reset.                                                                                                                                                                                       |\\n| schema             | object       | A valid JSON Schema used for validation OR Rendering                                                                                                                                                                                |\\n| ajv                | object       | Instance of AJV for informed to use to validate                                                                                                                                                                                     |\\n| focusOnInvalid     | bool         | Will put focus on the first invalid field when form is submitted                                                                                                                                                                    |\\n| disabled           | bool         | Will disable the entire form                                                                                                                                                                                                        |\\n\";","import React from 'react';\nimport readme from './README.md';\nimport { doc } from 'storybook-readme';\n\nexport default doc(readme);\n","export default \"# Form State\\n\\n**`Informed` takes care of state so you don't have to!**\\n\\nBelow is a table that describes each value within a forms state.\\n\\n**Note:** Initial value is the default value for an attribute, and derived describes\\nwhether or not the attribute is derived from other attributes. For example,\\ninvalid is derived from the errors attribute and therefore cannot be set directly.\\n\\n| Attribute     | Example             | Initial Value | Description                                                                                                                                              |\\n| ------------- | ------------------- | ------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------- |\\n| values        | `{name:'Joe'}`      | `{}`          | Key value pair where key is the form field and value is the value entered or selected.                                                                   |\\n| maskedValues  | `{name:'Joe'}`      | `{}`          | Key value pair where key is the form field and value is the value entered or selected after formatting has occurred.                                     |\\n| initialValues | `{name:'Joe'}`      | `{}`          | Key value pair where key is the form field and value is an initial value for that field                                                                  |\\n| touched       | `{name:true}`       | `{}`          | Key value pair where key is the form field and value is true or undefined ( touched or untouched ). Submitting form will cause all fields to be touched. |\\n| errors        | `{name:'Invalid'}`  | `{}`          | Key value pair where key is the form field and value is the error associated with that field.                                                            |\\n| dirt          | `{name:true}`       | `{}`          | Key value pair where key is the form field and value is true or undefined ( dirty or pristine ).                                                         |\\n| focused       | `{name:true}`       | `{}`          | Key value pair where key is the form field and value is true or undefined ( focused or unfocused ). PAST TENSE! ( true if it was focused at one point)   |\\n| modified      | `{name:true}`       | `{}`          | Key value pairs of fields which differ from their initial values where key is the form field and value is the current value of the field                 |\\n| data          | `{address:['foo']}` | `{}`          | Data returned by inputs asynchronous `gatherData`calls (see GoogleApi Input)                                                                             |\\n| invalid       | `true`              | `false`       | Boolean that is true when form is invalid. A form is invalid when any of its inputs fails its validation function ( if there are errors ).               |\\n| valid         | `true`              | `true`        | Opposite of invalid                                                                                                                                      |\\n| pristine      | `true`              | `true`        | Boolean that is true when form is pristine. A form is pristine when no values have changed                                                               |\\n| dirty         | `true`              | `false`       | Boolean that is true when pristine is false                                                                                                              |\\n| submitted     | `true`              | `false`       | Boolean that is true when the form has been successfully submitted                                                                                       |\\n| submitting    | `true`              | `false`       | Boolean that is true when the form is submitting ( may happen during async validation)                                                                   |\\n| validating    | 1                   | 0             | Integer that represents how many fields are currently asynchronously validating                                                                          |\\n| gathering     | 1                   | 0             | Integer that represents how many fields are currently asynchronously gathering data (see GoogleApi Input)                                                |  |\\n\\n**\\\"Ok so informed takes care of state so I dont have to.. but how do i get my hands\\non this state??**\\n\\nThats a great question! There are many ways so lets take a look at a few!\\n\\nBelow is an example that shows you how to access the form state and render out\\nthe values that are changing.\\n\\n<!-- STORY -->\\n\\n```jsx\\nimport { Form, Input, FormStateAccessor } from 'informed';\\n\\nconst validate = value => {\\n  return !value || value.length < 5\\n    ? 'Field must be longer than five characters'\\n    : undefined;\\n};\\n\\nconst validateForm = values => {\\n  return values.name === 'Joseph' ? 'Username is already taken!' : undefined;\\n};\\n\\n<Form validate={validateForm}>\\n  <label>\\n    First name:\\n    <Input name=\\\"name\\\" validate={validate} />\\n  </label>\\n  <button type=\\\"submit\\\">Submit</button>\\n  <label>State:</label>\\n  <FormStateAccessor>\\n    {formState => (\\n      <pre>\\n        <code>{JSON.stringify(formState, null, 2)}</code>\\n      </pre>\\n    )}\\n  </FormStateAccessor>\\n</Form>;\\n```\\n\\n### What is this magic?\\n\\nIts not magic, its a Function As A Child, or otherwise known as [render props](https://reactjs.org/docs/render-props.html)\\n\\nThere are a few ways you can get access to `Informed`s form state.\\n\\n1. By accessing the `formState` as a parameter to a child render function via `FormStateAccess`.\\n\\n```jsx\\n<Form validate={validateForm}>\\n  <label>\\n    First name:\\n    <Input name=\\\"name\\\" validate={validate} />\\n  </label>\\n  <button type=\\\"submit\\\">Submit</button>\\n  <label>State:</label>\\n  <FormStateAccessor>\\n    {formState => (\\n      <pre>\\n        <code>{JSON.stringify(formState, null, 2)}</code>\\n      </pre>\\n    )}\\n  </FormStateAccessor>\\n</Form>\\n```\\n\\n<br/>\\n2) By accessing the `formState` via Hooks!\\n<br/>\\n\\n```jsx\\nconst FormState = () => {\\n  const formState = useFormState();\\n  return (\\n    <label>Values:</label>\\n    <code>{JSON.stringify(formState.values)}</code>\\n    <label>Touched:</label>\\n    <code>{JSON.stringify(formState.touched)}</code>\\n  );\\n};\\n\\n<Form>\\n  <div>\\n    <Input field=\\\"hello\\\" />\\n    <button type=\\\"submit\\\">Submit</button>\\n    <Debug />\\n  </div>\\n</Form>\\n```\\n\\n3. By accessing the `formState` as a parameter to a child render function.\\n\\n```jsx\\n<Form>\\n  {({ formState }) => (\\n    <div>\\n      <Input field=\\\"hello\\\" />\\n      <button type=\\\"submit\\\">Submit</button>\\n      <label>Values:</label>\\n      <code>{JSON.stringify(formState.values)}</code>\\n      <label>Touched:</label>\\n      <code>{JSON.stringify(formState.touched)}</code>\\n    </div>\\n  )}\\n</Form>\\n```\\n\\n<br/>\\nSo if you do need access to the form state, any of these methods will work.\\n\\n### Ok so what if i need the state outside of the `<Form />` ??\\n\\nDon't fret! This is also very simple. You have two options:\\n\\n1. Use the Forms `onChange` prop.\\n\\n  <br/>\\n\\n```jsx\\n<Form onChange={formState => console.log(formState)}>\\n  <Input field=\\\"hello\\\" />\\n  <button type=\\\"submit\\\">Submit</button>\\n</Form>\\n```\\n\\n  <br/>\\n  2. Use the Forms `formApiRef` prop, and then use the apis `getFormState` function.\\n  <br/>\\n\\n```jsx\\nimport React, { useRef } from 'react';\\nimport { Form, Input } from 'informed';\\n\\nconst MyAwesomeForm = () => {\\n  const formApiRef = useRef();\\n\\n  const handleClick = () => {\\n    console.log(formApiRef.current.getFormState());\\n  };\\n\\n  return (\\n    <div>\\n      <Form formApiRef={formApiRef}>\\n        <Input name=\\\"hello\\\" />\\n        <button type=\\\"submit\\\">Submit</button>\\n      </Form>\\n      <button onClick={handleClick}>Print Form State</button>\\n    </div>\\n  );\\n};\\n```\\n\";","import React from 'react';\nimport readme from './README.md';\nimport withDocs from '../../utils/withDocs';\n\nimport { Form, Input, FormStateAccessor } from '../../../src';\n\nconst validate = value => {\n  return !value || value.length < 5\n    ? 'Field must be at least five characters'\n    : undefined;\n};\n\nconst validateForm = values => {\n  return values.name === 'Joseph' ? 'Username is already taken!' : undefined;\n};\n\nconst FormStateExample = () => (\n  <Form validate={validateForm}>\n    <label>\n      First name:\n      <Input name=\"name\" validate={validate} />\n    </label>\n    <button type=\"submit\">Submit</button>\n    <label>State:</label>\n    <FormStateAccessor>\n      {formState => (\n        <pre>\n          <code>{JSON.stringify(formState, null, 2)}</code>\n        </pre>\n      )}\n    </FormStateAccessor>\n  </Form>\n);\n\nexport default withDocs(readme, FormStateExample);\n","export default \"# Clean Functions\\n\\nYou can clean your values via a clean function\\n\\n<!-- STORY -->\\n\\n```jsx\\nimport { Form, Input } from 'informed';\\n\\nconst clean = value => value.replace(/[!@#$%^&*()]/g, '');\\n\\n<Form>\\n  <Input\\n    field=\\\"name\\\"\\n    label=\\\"Name\\\"\\n    initialValue=\\\"Joe!@#$%^*()Puzzo\\\"\\n    clean={clean}\\n  />\\n  <button type=\\\"submit\\\">Submit</button>\\n  <Debug values maskedValues />\\n</Form>;\\n```\\n\";","import React from 'react';\nimport withDocs from '../../utils/withDocs';\nimport readme from './README.md';\n\nimport { Form, Input, Debug } from '../../../src';\n\nconst clean = value => value.replace(/[!@#$%^&*()]/g, '');\n\nconst Uppercase = () => (\n  <Form>\n    <div>\n      <Input\n        field=\"name\"\n        label=\"Name\"\n        initialValue=\"Joe!@#$%^*()Puzzo\"\n        clean={clean}\n      />\n      <button type=\"submit\">Submit</button>\n      <Debug values maskedValues />\n    </div>\n  </Form>\n);\n\nexport default withDocs(readme, Uppercase);\n","export default \"# Formatters\\n\\nYou can provide a pattern for formatting dates, credit cards, etc. To do this you can either provide a `\\\"Formatter String\\\"` or a `\\\"Formatter Array\\\"` where regular expression are used as a placeholder for the user input.\\n\\nAs simple credit card pattern could be:\\n\\n```js\\nconst mask = '####-####-####-####';\\n```\\n\\n<br />\\n\\nOr\\n\\n```js\\nconst formatter = [/\\\\d/, /\\\\d/, /\\\\d/, /\\\\d/, '-', /\\\\d/, /\\\\d/, /\\\\d/, /\\\\d/, '-', /\\\\d/, /\\\\d/, /\\\\d/, /\\\\d/ '-', /\\\\d/, /\\\\d/, /\\\\d/, /\\\\d/];\\n```\\n\\n<br />\\n\\nFormatter strings syntax\\n\\n| Character | RegEx  | Example Formatter String | Derived Formatter Array                               |\\n| --------- | ------ | ------------------------ | ----------------------------------------------------- |\\n| #         | /\\\\d/   | ###-###                  | [/\\\\d/, /\\\\d/, /\\\\d/, '-', /\\\\d/, /\\\\d/, /\\\\d/]             |\\n| \\\\*        | /[\\\\w]/ | \\\\*\\\\*_-_\\\\*\\\\*              | [/[\\\\w]/, /[\\\\w]/, /[\\\\w]/, '-', /[\\\\w]/, /[\\\\w]/, /[\\\\w]/] |\\n\\n#### Below is an example with a formatter and parser using formatter strings\\n\\n<!-- STORY -->\\n\\n```jsx\\nimport { Form, Text } from 'informed';\\n\\nconst formatter = '+1 ###-###-####';\\n\\nconst parser = value => {\\n  return value.replace('+1 ', '').replace(/-/g, '');\\n};\\n\\n<Form>\\n  <label>\\n    <Input\\n      name=\\\"phone\\\"\\n      label=\\\"Phone Number:\\\"\\n      formatter={formatter}\\n      parser={parser}\\n      initialValue=\\\"1231231234\\\"\\n    />\\n    <Input\\n      name=\\\"maskedField\\\"\\n      label=\\\"Word Formatting\\\"\\n      formatter=\\\"$***-**(**)***\\\"\\n      initialValue=\\\"HelloWorld\\\"\\n    />\\n  </label>\\n  <button type=\\\"submit\\\">Submit</button>\\n</Form>;\\n```\\n\";","import React from 'react';\nimport withDocs from '../../utils/withDocs';\nimport readme from './README.md';\n\nimport { Form, Input, Debug } from '../../../src';\n\nconst formatter = '+1 ###-###-####';\n\nconst parser = value => {\n  return value.replace('+1 ', '').replace(/-/g, '');\n};\n\nconst FormatParse = () => (\n  <Form>\n    <div>\n      <Input\n        name=\"phone\"\n        label=\"Phone Number:\"\n        formatter={formatter}\n        parser={parser}\n        initialValue=\"1231231234\"\n      />\n      <Input\n        name=\"maskedField\"\n        label=\"Word Formatting\"\n        formatter=\"$***-**(**)***\"\n        initialValue=\"HelloWorld\"\n      />\n      <button type=\"submit\">Submit</button>\n      <Debug values maskedValues />\n    </div>\n  </Form>\n);\n\nexport default withDocs(readme, FormatParse);\n","export default \"# Formatter Functions\\n\\nYou can achive highly custom fomatting by passing a function to each location in the formatter.\\n\\n<!-- STORY -->\\n\\n```jsx\\nimport { Form, Input } from 'informed';\\n\\nconst mask = value => value.toUpperCase();\\n\\nconst formatter = [mask, mask, '-', mask, mask, '-', mask, mask, mask, mask];\\n\\n<Form>\\n  <Input\\n    field=\\\"uppercase\\\"\\n    label=\\\"Uppercase\\\"\\n    formatter={formatter}\\n    initialValue=\\\"abcdefg\\\"\\n  />\\n  <button type=\\\"submit\\\">Submit</button>\\n  <Debug values maskedValues />\\n</Form>;\\n```\\n\";","import React from 'react';\nimport withDocs from '../../utils/withDocs';\nimport readme from './README.md';\n\nimport { Form, Input, Debug } from '../../../src';\n\nconst mask = value => value.toUpperCase();\n\nconst formatter = [mask, mask, '-', mask, mask, '-', mask, mask, mask, mask];\n\nconst Uppercase = () => (\n  <Form>\n    <div>\n      <Input\n        field=\"uppercase\"\n        label=\"Uppercase\"\n        formatter={formatter}\n        initialValue=\"abcdefg\"\n      />\n      <button type=\"submit\">Submit</button>\n      <Debug values maskedValues />\n    </div>\n  </Form>\n);\n\nexport default withDocs(readme, Uppercase);\n","export default \"# Mask\\n\\nMasking values is made simple with the use of the `mask` function. Please note, in addition to mask you sometimes want to pair it with a parser function see example below:\\n\\n<!-- STORY -->\\n\\n```jsx\\nimport { Form, Text } from 'informed';\\n\\nconst mask = value => value.toUpperCase();\\nconst parser = value => value.toLowerCase();\\n\\n<Form>\\n  <Input name=\\\"field1\\\" label=\\\"Field 1 ( no parser )\\\" mask={mask} />\\n  <Input\\n    name=\\\"field2\\\"\\n    label=\\\"Field 2 ( with parser )\\\"\\n    mask={mask}\\n    parser={parser}\\n  />\\n  <button type=\\\"submit\\\">Submit</button>\\n</Form>;\\n```\\n\";","import React from 'react';\nimport withDocs from '../../utils/withDocs';\nimport readme from './README.md';\n\nimport { Form, Input, Debug } from '../../../src';\n\nconst mask = value => (value != null ? value.toUpperCase() : value);\nconst parser = value => (value != null ? value.toLowerCase() : value);\n\nconst Mask = () => (\n  <Form>\n    <Input\n      name=\"field1\"\n      label=\"Field 1 ( no parser )\"\n      mask={mask}\n      initialValue=\"hello\"\n    />\n    <Input\n      initialValue=\"hello\"\n      name=\"field2\"\n      label=\"Field 2 ( with parser )\"\n      mask={mask}\n      parser={parser}\n    />\n    <button type=\"submit\">Submit</button>\n    <Debug values maskedValues />\n  </Form>\n);\n\nexport default withDocs(readme, Mask);\n","export default \"# Format and Parse\\n\\n<!-- STORY -->\\n\\n```jsx\\nimport { Form, Select, Text, utils, useFieldState } from 'informed';\\n\\nconst localeOptions = [const localeOptions = [\\n  { value: 'af-NA', label: 'Afrikaans (Namibia)' },\\n  { value: 'af-ZA', label: 'Afrikaans (South Africa)' },\\n  { value: 'af', label: 'Afrikaans' },\\n  // ...rest, shortened for readability\\n];\\n\\nconst currencyOptions = [\\n  {\\n    value: 'EUR',\\n    label: 'EUR',\\n  },\\n  {\\n    value: 'AED',\\n    label: 'AED',\\n  },\\n  // ...rest, shortened for readability\\n]\\n\\nconst FormattedField = () => {\\n  const { value: locale } = useFieldState('locale');\\n  const { value: currency } = useFieldState('currency');\\n\\n  // Generate mask from locale and currency\\n  const { formatter, parser } = useMemo(\\n    () => {\\n      if (locale && currency) {\\n        return utils.createIntlNumberFormatter(locale, {\\n          style: 'currency',\\n          currency\\n        });\\n      }\\n      return {};\\n    },\\n    [currency, locale]\\n  );\\n\\n  return (\\n    <Text\\n      field=\\\"localeMask\\\"\\n      label={`Locale Masked Field (${currency} currency)`}\\n      formatter={formatter}\\n      parser={parser}\\n      formatterDependencies={[locale, currency]}\\n      initialValue={3000.25}\\n    />\\n  );\\n};\\n\\nconst FormatParse = () => (\\n  <Form>\\n    <div>\\n      <Select\\n        label=\\\"Locale\\\"\\n        field=\\\"locale\\\"\\n        options={localeOptions}\\n        initialValue=\\\"en-US\\\"\\n      />\\n      <Select\\n        label=\\\"Currency\\\"\\n        field=\\\"currency\\\"\\n        options={currencyOptions}\\n        initialValue=\\\"USD\\\"\\n      />\\n      <FormattedField />\\n      <button type=\\\"submit\\\">Submit</button>\\n      <Debug />\\n    </div>\\n  </Form>\\n);\\n```\\n\";","import React, { useMemo } from 'react';\nimport withDocs from '../../utils/withDocs';\nimport readme from './README.md';\n\nimport { Form, Select, Input, utils, useFieldState, Debug } from '../../../src';\n\nconst localeOptions = [\n  { value: 'af-NA', label: 'Afrikaans (Namibia)' },\n  { value: 'af-ZA', label: 'Afrikaans (South Africa)' },\n  { value: 'af', label: 'Afrikaans' },\n  { value: 'ak-GH', label: 'Akan (Ghana)' },\n  { value: 'ak', label: 'Akan' },\n  { value: 'sq-AL', label: 'Albanian (Albania)' },\n  { value: 'sq', label: 'Albanian' },\n  { value: 'am-ET', label: 'Amharic (Ethiopia)' },\n  { value: 'am', label: 'Amharic' },\n  { value: 'ar-DZ', label: 'Arabic (Algeria)' },\n  { value: 'ar-BH', label: 'Arabic (Bahrain)' },\n  { value: 'ar-EG', label: 'Arabic (Egypt)' },\n  { value: 'ar-IQ', label: 'Arabic (Iraq)' },\n  { value: 'ar-JO', label: 'Arabic (Jordan)' },\n  { value: 'ar-KW', label: 'Arabic (Kuwait)' },\n  { value: 'ar-LB', label: 'Arabic (Lebanon)' },\n  { value: 'ar-LY', label: 'Arabic (Libya)' },\n  { value: 'ar-MA', label: 'Arabic (Morocco)' },\n  { value: 'ar-OM', label: 'Arabic (Oman)' },\n  { value: 'ar-QA', label: 'Arabic (Qatar)' },\n  { value: 'ar-SA', label: 'Arabic (Saudi Arabia)' },\n  { value: 'ar-SD', label: 'Arabic (Sudan)' },\n  { value: 'ar-SY', label: 'Arabic (Syria)' },\n  { value: 'ar-TN', label: 'Arabic (Tunisia)' },\n  { value: 'ar-AE', label: 'Arabic (United Arab Emirates)' },\n  { value: 'ar-YE', label: 'Arabic (Yemen)' },\n  { value: 'ar', label: 'Arabic' },\n  { value: 'hy-AM', label: 'Armenian (Armenia)' },\n  { value: 'hy', label: 'Armenian' },\n  { value: 'as-IN', label: 'Assamese (India)' },\n  { value: 'as', label: 'Assamese' },\n  { value: 'asa-TZ', label: 'Asu (Tanzania)' },\n  { value: 'asa', label: 'Asu' },\n  { value: 'az-Cyrl', label: 'Azerbaijani (Cyrillic)' },\n  { value: 'az-Cyrl-AZ', label: 'Azerbaijani (Cyrillic, Azerbaijan)' },\n  { value: 'az-Latn', label: 'Azerbaijani (Latin)' },\n  { value: 'az-Latn-AZ', label: 'Azerbaijani (Latin, Azerbaijan)' },\n  { value: 'az', label: 'Azerbaijani' },\n  { value: 'bm-ML', label: 'Bambara (Mali)' },\n  { value: 'bm', label: 'Bambara' },\n  { value: 'eu-ES', label: 'Basque (Spain)' },\n  { value: 'eu', label: 'Basque' },\n  { value: 'be-BY', label: 'Belarusian (Belarus)' },\n  { value: 'be', label: 'Belarusian' },\n  { value: 'bem-ZM', label: 'Bemba (Zambia)' },\n  { value: 'bem', label: 'Bemba' },\n  { value: 'bez-TZ', label: 'Bena (Tanzania)' },\n  { value: 'bez', label: 'Bena' },\n  { value: 'bn-BD', label: 'Bengali (Bangladesh)' },\n  { value: 'bn-IN', label: 'Bengali (India)' },\n  { value: 'bn', label: 'Bengali' },\n  { value: 'bs-BA', label: 'Bosnian (Bosnia and Herzegovina)' },\n  { value: 'bs', label: 'Bosnian' },\n  { value: 'bg-BG', label: 'Bulgarian (Bulgaria)' },\n  { value: 'bg', label: 'Bulgarian' },\n  { value: 'my-MM', label: 'Burmese (Myanmar [Burma])' },\n  { value: 'my', label: 'Burmese' },\n  {\n    value: 'yue-Hant-HK',\n    label: 'Cantonese (Traditional, Hong Kong SAR China)'\n  },\n  { value: 'ca-ES', label: 'Catalan (Spain)' },\n  { value: 'ca', label: 'Catalan' },\n  { value: 'tzm-Latn', label: 'Central Morocco Tamazight (Latin)' },\n  { value: 'tzm-Latn-MA', label: 'Central Morocco Tamazight (Latin, Morocco)' },\n  { value: 'tzm', label: 'Central Morocco Tamazight' },\n  { value: 'chr-US', label: 'Cherokee (United States)' },\n  { value: 'chr', label: 'Cherokee' },\n  { value: 'cgg-UG', label: 'Chiga (Uganda)' },\n  { value: 'cgg', label: 'Chiga' },\n  { value: 'zh-Hans', label: 'Chinese (Simplified Han)' },\n  { value: 'zh-Hans-CN', label: 'Chinese (Simplified Han, China)' },\n  {\n    value: 'zh-Hans-HK',\n    label: 'Chinese (Simplified Han, Hong Kong SAR China)'\n  },\n  { value: 'zh-Hans-MO', label: 'Chinese (Simplified Han, Macau SAR China)' },\n  { value: 'zh-Hans-SG', label: 'Chinese (Simplified Han, Singapore)' },\n  { value: 'zh-Hant', label: 'Chinese (Traditional Han)' },\n  {\n    value: 'zh-Hant-HK',\n    label: 'Chinese (Traditional Han, Hong Kong SAR China)'\n  },\n  { value: 'zh-Hant-MO', label: 'Chinese (Traditional Han, Macau SAR China)' },\n  { value: 'zh-Hant-TW', label: 'Chinese (Traditional Han, Taiwan)' },\n  { value: 'zh', label: 'Chinese' },\n  { value: 'kw-GB', label: 'Cornish (United Kingdom)' },\n  { value: 'kw', label: 'Cornish' },\n  { value: 'hr-HR', label: 'Croatian (Croatia)' },\n  { value: 'hr', label: 'Croatian' },\n  { value: 'cs-CZ', label: 'Czech (Czech Republic)' },\n  { value: 'cs', label: 'Czech' },\n  { value: 'da-DK', label: 'Danish (Denmark)' },\n  { value: 'da', label: 'Danish' },\n  { value: 'nl-BE', label: 'Dutch (Belgium)' },\n  { value: 'nl-NL', label: 'Dutch (Netherlands)' },\n  { value: 'nl', label: 'Dutch' },\n  { value: 'ebu-KE', label: 'Embu (Kenya)' },\n  { value: 'ebu', label: 'Embu' },\n  { value: 'en-AS', label: 'English (American Samoa)' },\n  { value: 'en-AU', label: 'English (Australia)' },\n  { value: 'en-BE', label: 'English (Belgium)' },\n  { value: 'en-BZ', label: 'English (Belize)' },\n  { value: 'en-BW', label: 'English (Botswana)' },\n  { value: 'en-CA', label: 'English (Canada)' },\n  { value: 'en-GU', label: 'English (Guam)' },\n  { value: 'en-HK', label: 'English (Hong Kong SAR China)' },\n  { value: 'en-IN', label: 'English (India)' },\n  { value: 'en-IE', label: 'English (Ireland)' },\n  { value: 'en-IL', label: 'English (Israel)' },\n  { value: 'en-JM', label: 'English (Jamaica)' },\n  { value: 'en-MT', label: 'English (Malta)' },\n  { value: 'en-MH', label: 'English (Marshall Islands)' },\n  { value: 'en-MU', label: 'English (Mauritius)' },\n  { value: 'en-NA', label: 'English (Namibia)' },\n  { value: 'en-NZ', label: 'English (New Zealand)' },\n  { value: 'en-MP', label: 'English (Northern Mariana Islands)' },\n  { value: 'en-PK', label: 'English (Pakistan)' },\n  { value: 'en-PH', label: 'English (Philippines)' },\n  { value: 'en-SG', label: 'English (Singapore)' },\n  { value: 'en-ZA', label: 'English (South Africa)' },\n  { value: 'en-TT', label: 'English (Trinidad and Tobago)' },\n  { value: 'en-UM', label: 'English (U.S. Minor Outlying Islands)' },\n  { value: 'en-VI', label: 'English (U.S. Virgin Islands)' },\n  { value: 'en-GB', label: 'English (United Kingdom)' },\n  { value: 'en-US', label: 'English (United States)' },\n  { value: 'en-ZW', label: 'English (Zimbabwe)' },\n  { value: 'en', label: 'English' },\n  { value: 'eo', label: 'Esperanto' },\n  { value: 'et-EE', label: 'Estonian (Estonia)' },\n  { value: 'et', label: 'Estonian' },\n  { value: 'ee-GH', label: 'Ewe (Ghana)' },\n  { value: 'ee-TG', label: 'Ewe (Togo)' },\n  { value: 'ee', label: 'Ewe' },\n  { value: 'fo-FO', label: 'Faroese (Faroe Islands)' },\n  { value: 'fo', label: 'Faroese' },\n  { value: 'fil-PH', label: 'Filipino (Philippines)' },\n  { value: 'fil', label: 'Filipino' },\n  { value: 'fi-FI', label: 'Finnish (Finland)' },\n  { value: 'fi', label: 'Finnish' },\n  { value: 'fr-BE', label: 'French (Belgium)' },\n  { value: 'fr-BJ', label: 'French (Benin)' },\n  { value: 'fr-BF', label: 'French (Burkina Faso)' },\n  { value: 'fr-BI', label: 'French (Burundi)' },\n  { value: 'fr-CM', label: 'French (Cameroon)' },\n  { value: 'fr-CA', label: 'French (Canada)' },\n  { value: 'fr-CF', label: 'French (Central African Republic)' },\n  { value: 'fr-TD', label: 'French (Chad)' },\n  { value: 'fr-KM', label: 'French (Comoros)' },\n  { value: 'fr-CG', label: 'French (Congo - Brazzaville)' },\n  { value: 'fr-CD', label: 'French (Congo - Kinshasa)' },\n  { value: 'fr-CI', label: 'French (Côte d’Ivoire)' },\n  { value: 'fr-DJ', label: 'French (Djibouti)' },\n  { value: 'fr-GQ', label: 'French (Equatorial Guinea)' },\n  { value: 'fr-FR', label: 'French (France)' },\n  { value: 'fr-GA', label: 'French (Gabon)' },\n  { value: 'fr-GP', label: 'French (Guadeloupe)' },\n  { value: 'fr-GN', label: 'French (Guinea)' },\n  { value: 'fr-LU', label: 'French (Luxembourg)' },\n  { value: 'fr-MG', label: 'French (Madagascar)' },\n  { value: 'fr-ML', label: 'French (Mali)' },\n  { value: 'fr-MQ', label: 'French (Martinique)' },\n  { value: 'fr-MC', label: 'French (Monaco)' },\n  { value: 'fr-NE', label: 'French (Niger)' },\n  { value: 'fr-RW', label: 'French (Rwanda)' },\n  { value: 'fr-RE', label: 'French (Réunion)' },\n  { value: 'fr-BL', label: 'French (Saint Barthélemy)' },\n  { value: 'fr-MF', label: 'French (Saint Martin)' },\n  { value: 'fr-SN', label: 'French (Senegal)' },\n  { value: 'fr-CH', label: 'French (Switzerland)' },\n  { value: 'fr-TG', label: 'French (Togo)' },\n  { value: 'fr', label: 'French' },\n  { value: 'ff-SN', label: 'Fulah (Senegal)' },\n  { value: 'ff', label: 'Fulah' },\n  { value: 'gl-ES', label: 'Galician (Spain)' },\n  { value: 'gl', label: 'Galician' },\n  { value: 'lg-UG', label: 'Ganda (Uganda)' },\n  { value: 'lg', label: 'Ganda' },\n  { value: 'ka-GE', label: 'Georgian (Georgia)' },\n  { value: 'ka', label: 'Georgian' },\n  { value: 'de-AT', label: 'German (Austria)' },\n  { value: 'de-BE', label: 'German (Belgium)' },\n  { value: 'de-DE', label: 'German (Germany)' },\n  { value: 'de-LI', label: 'German (Liechtenstein)' },\n  { value: 'de-LU', label: 'German (Luxembourg)' },\n  { value: 'de-CH', label: 'German (Switzerland)' },\n  { value: 'de', label: 'German' },\n  { value: 'el-CY', label: 'Greek (Cyprus)' },\n  { value: 'el-GR', label: 'Greek (Greece)' },\n  { value: 'el', label: 'Greek' },\n  { value: 'gu-IN', label: 'Gujarati (India)' },\n  { value: 'gu', label: 'Gujarati' },\n  { value: 'guz-KE', label: 'Gusii (Kenya)' },\n  { value: 'guz', label: 'Gusii' },\n  { value: 'ha-Latn', label: 'Hausa (Latin)' },\n  { value: 'ha-Latn-GH', label: 'Hausa (Latin, Ghana)' },\n  { value: 'ha-Latn-NE', label: 'Hausa (Latin, Niger)' },\n  { value: 'ha-Latn-NG', label: 'Hausa (Latin, Nigeria)' },\n  { value: 'ha', label: 'Hausa' },\n  { value: 'haw-US', label: 'Hawaiian (United States)' },\n  { value: 'haw', label: 'Hawaiian' },\n  { value: 'he-IL', label: 'Hebrew (Israel)' },\n  { value: 'he', label: 'Hebrew' },\n  { value: 'hi-IN', label: 'Hindi (India)' },\n  { value: 'hi', label: 'Hindi' },\n  { value: 'hu-HU', label: 'Hungarian (Hungary)' },\n  { value: 'hu', label: 'Hungarian' },\n  { value: 'is-IS', label: 'Icelandic (Iceland)' },\n  { value: 'is', label: 'Icelandic' },\n  { value: 'ig-NG', label: 'Igbo (Nigeria)' },\n  { value: 'ig', label: 'Igbo' },\n  { value: 'id-ID', label: 'Indonesian (Indonesia)' },\n  { value: 'id', label: 'Indonesian' },\n  { value: 'ga-IE', label: 'Irish (Ireland)' },\n  { value: 'ga', label: 'Irish' },\n  { value: 'it-IT', label: 'Italian (Italy)' },\n  { value: 'it-CH', label: 'Italian (Switzerland)' },\n  { value: 'it', label: 'Italian' },\n  { value: 'ja-JP', label: 'Japanese (Japan)' },\n  { value: 'ja', label: 'Japanese' },\n  { value: 'kea-CV', label: 'Kabuverdianu (Cape Verde)' },\n  { value: 'kea', label: 'Kabuverdianu' },\n  { value: 'kab-DZ', label: 'Kabyle (Algeria)' },\n  { value: 'kab', label: 'Kabyle' },\n  { value: 'kl-GL', label: 'Kalaallisut (Greenland)' },\n  { value: 'kl', label: 'Kalaallisut' },\n  { value: 'kln-KE', label: 'Kalenjin (Kenya)' },\n  { value: 'kln', label: 'Kalenjin' },\n  { value: 'kam-KE', label: 'Kamba (Kenya)' },\n  { value: 'kam', label: 'Kamba' },\n  { value: 'kn-IN', label: 'Kannada (India)' },\n  { value: 'kn', label: 'Kannada' },\n  { value: 'kk-Cyrl', label: 'Kazakh (Cyrillic)' },\n  { value: 'kk-Cyrl-KZ', label: 'Kazakh (Cyrillic, Kazakhstan)' },\n  { value: 'kk', label: 'Kazakh' },\n  { value: 'km-KH', label: 'Khmer (Cambodia)' },\n  { value: 'km', label: 'Khmer' },\n  { value: 'ki-KE', label: 'Kikuyu (Kenya)' },\n  { value: 'ki', label: 'Kikuyu' },\n  { value: 'rw-RW', label: 'Kinyarwanda (Rwanda)' },\n  { value: 'rw', label: 'Kinyarwanda' },\n  { value: 'kok-IN', label: 'Konkani (India)' },\n  { value: 'kok', label: 'Konkani' },\n  { value: 'ko-KR', label: 'Korean (South Korea)' },\n  { value: 'ko', label: 'Korean' },\n  { value: 'khq-ML', label: 'Koyra Chiini (Mali)' },\n  { value: 'khq', label: 'Koyra Chiini' },\n  { value: 'ses-ML', label: 'Koyraboro Senni (Mali)' },\n  { value: 'ses', label: 'Koyraboro Senni' },\n  { value: 'lag-TZ', label: 'Langi (Tanzania)' },\n  { value: 'lag', label: 'Langi' },\n  { value: 'lv-LV', label: 'Latvian (Latvia)' },\n  { value: 'lv', label: 'Latvian' },\n  { value: 'lt-LT', label: 'Lithuanian (Lithuania)' },\n  { value: 'lt', label: 'Lithuanian' },\n  { value: 'luo-KE', label: 'Luo (Kenya)' },\n  { value: 'luo', label: 'Luo' },\n  { value: 'luy-KE', label: 'Luyia (Kenya)' },\n  { value: 'luy', label: 'Luyia' },\n  { value: 'mk-MK', label: 'Macedonian (Macedonia)' },\n  { value: 'mk', label: 'Macedonian' },\n  { value: 'jmc-TZ', label: 'Machame (Tanzania)' },\n  { value: 'jmc', label: 'Machame' },\n  { value: 'kde-TZ', label: 'Makonde (Tanzania)' },\n  { value: 'kde', label: 'Makonde' },\n  { value: 'mg-MG', label: 'Malagasy (Madagascar)' },\n  { value: 'mg', label: 'Malagasy' },\n  { value: 'ms-BN', label: 'Malay (Brunei)' },\n  { value: 'ms-MY', label: 'Malay (Malaysia)' },\n  { value: 'ms', label: 'Malay' },\n  { value: 'ml-IN', label: 'Malayalam (India)' },\n  { value: 'ml', label: 'Malayalam' },\n  { value: 'mt-MT', label: 'Maltese (Malta)' },\n  { value: 'mt', label: 'Maltese' },\n  { value: 'gv-GB', label: 'Manx (United Kingdom)' },\n  { value: 'gv', label: 'Manx' },\n  { value: 'mr-IN', label: 'Marathi (India)' },\n  { value: 'mr', label: 'Marathi' },\n  { value: 'mas-KE', label: 'Masai (Kenya)' },\n  { value: 'mas-TZ', label: 'Masai (Tanzania)' },\n  { value: 'mas', label: 'Masai' },\n  { value: 'mer-KE', label: 'Meru (Kenya)' },\n  { value: 'mer', label: 'Meru' },\n  { value: 'mfe-MU', label: 'Morisyen (Mauritius)' },\n  { value: 'mfe', label: 'Morisyen' },\n  { value: 'naq-NA', label: 'Nama (Namibia)' },\n  { value: 'naq', label: 'Nama' },\n  { value: 'ne-IN', label: 'Nepali (India)' },\n  { value: 'ne-NP', label: 'Nepali (Nepal)' },\n  { value: 'ne', label: 'Nepali' },\n  { value: 'nd-ZW', label: 'North Ndebele (Zimbabwe)' },\n  { value: 'nd', label: 'North Ndebele' },\n  { value: 'nb-NO', label: 'Norwegian Bokmål (Norway)' },\n  { value: 'nb', label: 'Norwegian Bokmål' },\n  { value: 'nn-NO', label: 'Norwegian Nynorsk (Norway)' },\n  { value: 'nn', label: 'Norwegian Nynorsk' },\n  { value: 'nyn-UG', label: 'Nyankole (Uganda)' },\n  { value: 'nyn', label: 'Nyankole' },\n  { value: 'or-IN', label: 'Oriya (India)' },\n  { value: 'or', label: 'Oriya' },\n  { value: 'om-ET', label: 'Oromo (Ethiopia)' },\n  { value: 'om-KE', label: 'Oromo (Kenya)' },\n  { value: 'om', label: 'Oromo' },\n  { value: 'ps-AF', label: 'Pashto (Afghanistan)' },\n  { value: 'ps', label: 'Pashto' },\n  { value: 'fa-AF', label: 'Persian (Afghanistan)' },\n  { value: 'fa-IR', label: 'Persian (Iran)' },\n  { value: 'fa', label: 'Persian' },\n  { value: 'pl-PL', label: 'Polish (Poland)' },\n  { value: 'pl', label: 'Polish' },\n  { value: 'pt-BR', label: 'Portuguese (Brazil)' },\n  { value: 'pt-GW', label: 'Portuguese (Guinea-Bissau)' },\n  { value: 'pt-MZ', label: 'Portuguese (Mozambique)' },\n  { value: 'pt-PT', label: 'Portuguese (Portugal)' },\n  { value: 'pt', label: 'Portuguese' },\n  { value: 'pa-Arab', label: 'Punjabi (Arabic)' },\n  { value: 'pa-Arab-PK', label: 'Punjabi (Arabic, Pakistan)' },\n  { value: 'pa-Guru', label: 'Punjabi (Gurmukhi)' },\n  { value: 'pa-Guru-IN', label: 'Punjabi (Gurmukhi, India)' },\n  { value: 'pa', label: 'Punjabi' },\n  { value: 'ro-MD', label: 'Romanian (Moldova)' },\n  { value: 'ro-RO', label: 'Romanian (Romania)' },\n  { value: 'ro', label: 'Romanian' },\n  { value: 'rm-CH', label: 'Romansh (Switzerland)' },\n  { value: 'rm', label: 'Romansh' },\n  { value: 'rof-TZ', label: 'Rombo (Tanzania)' },\n  { value: 'rof', label: 'Rombo' },\n  { value: 'ru-MD', label: 'Russian (Moldova)' },\n  { value: 'ru-RU', label: 'Russian (Russia)' },\n  { value: 'ru-UA', label: 'Russian (Ukraine)' },\n  { value: 'ru', label: 'Russian' },\n  { value: 'rwk-TZ', label: 'Rwa (Tanzania)' },\n  { value: 'rwk', label: 'Rwa' },\n  { value: 'saq-KE', label: 'Samburu (Kenya)' },\n  { value: 'saq', label: 'Samburu' },\n  { value: 'sg-CF', label: 'Sango (Central African Republic)' },\n  { value: 'sg', label: 'Sango' },\n  { value: 'seh-MZ', label: 'Sena (Mozambique)' },\n  { value: 'seh', label: 'Sena' },\n  { value: 'sr-Cyrl', label: 'Serbian (Cyrillic)' },\n  { value: 'sr-Cyrl-BA', label: 'Serbian (Cyrillic, Bosnia and Herzegovina)' },\n  { value: 'sr-Cyrl-ME', label: 'Serbian (Cyrillic, Montenegro)' },\n  { value: 'sr-Cyrl-RS', label: 'Serbian (Cyrillic, Serbia)' },\n  { value: 'sr-Latn', label: 'Serbian (Latin)' },\n  { value: 'sr-Latn-BA', label: 'Serbian (Latin, Bosnia and Herzegovina)' },\n  { value: 'sr-Latn-ME', label: 'Serbian (Latin, Montenegro)' },\n  { value: 'sr-Latn-RS', label: 'Serbian (Latin, Serbia)' },\n  { value: 'sr', label: 'Serbian' },\n  { value: 'sn-ZW', label: 'Shona (Zimbabwe)' },\n  { value: 'sn', label: 'Shona' },\n  { value: 'ii-CN', label: 'Sichuan Yi (China)' },\n  { value: 'ii', label: 'Sichuan Yi' },\n  { value: 'si-LK', label: 'Sinhala (Sri Lanka)' },\n  { value: 'si', label: 'Sinhala' },\n  { value: 'sk-SK', label: 'Slovak (Slovakia)' },\n  { value: 'sk', label: 'Slovak' },\n  { value: 'sl-SI', label: 'Slovenian (Slovenia)' },\n  { value: 'sl', label: 'Slovenian' },\n  { value: 'xog-UG', label: 'Soga (Uganda)' },\n  { value: 'xog', label: 'Soga' },\n  { value: 'so-DJ', label: 'Somali (Djibouti)' },\n  { value: 'so-ET', label: 'Somali (Ethiopia)' },\n  { value: 'so-KE', label: 'Somali (Kenya)' },\n  { value: 'so-SO', label: 'Somali (Somalia)' },\n  { value: 'so', label: 'Somali' },\n  { value: 'es-AR', label: 'Spanish (Argentina)' },\n  { value: 'es-BO', label: 'Spanish (Bolivia)' },\n  { value: 'es-CL', label: 'Spanish (Chile)' },\n  { value: 'es-CO', label: 'Spanish (Colombia)' },\n  { value: 'es-CR', label: 'Spanish (Costa Rica)' },\n  { value: 'es-DO', label: 'Spanish (Dominican Republic)' },\n  { value: 'es-EC', label: 'Spanish (Ecuador)' },\n  { value: 'es-SV', label: 'Spanish (El Salvador)' },\n  { value: 'es-GQ', label: 'Spanish (Equatorial Guinea)' },\n  { value: 'es-GT', label: 'Spanish (Guatemala)' },\n  { value: 'es-HN', label: 'Spanish (Honduras)' },\n  { value: 'es-419', label: 'Spanish (Latin America)' },\n  { value: 'es-MX', label: 'Spanish (Mexico)' },\n  { value: 'es-NI', label: 'Spanish (Nicaragua)' },\n  { value: 'es-PA', label: 'Spanish (Panama)' },\n  { value: 'es-PY', label: 'Spanish (Paraguay)' },\n  { value: 'es-PE', label: 'Spanish (Peru)' },\n  { value: 'es-PR', label: 'Spanish (Puerto Rico)' },\n  { value: 'es-ES', label: 'Spanish (Spain)' },\n  { value: 'es-US', label: 'Spanish (United States)' },\n  { value: 'es-UY', label: 'Spanish (Uruguay)' },\n  { value: 'es-VE', label: 'Spanish (Venezuela)' },\n  { value: 'es', label: 'Spanish' },\n  { value: 'sw-KE', label: 'Swahili (Kenya)' },\n  { value: 'sw-TZ', label: 'Swahili (Tanzania)' },\n  { value: 'sw', label: 'Swahili' },\n  { value: 'sv-FI', label: 'Swedish (Finland)' },\n  { value: 'sv-SE', label: 'Swedish (Sweden)' },\n  { value: 'sv', label: 'Swedish' },\n  { value: 'gsw-CH', label: 'Swiss German (Switzerland)' },\n  { value: 'gsw', label: 'Swiss German' },\n  { value: 'shi-Latn', label: 'Tachelhit (Latin)' },\n  { value: 'shi-Latn-MA', label: 'Tachelhit (Latin, Morocco)' },\n  { value: 'shi-Tfng', label: 'Tachelhit (Tifinagh)' },\n  { value: 'shi-Tfng-MA', label: 'Tachelhit (Tifinagh, Morocco)' },\n  { value: 'shi', label: 'Tachelhit' },\n  { value: 'dav-KE', label: 'Taita (Kenya)' },\n  { value: 'dav', label: 'Taita' },\n  { value: 'ta-IN', label: 'Tamil (India)' },\n  { value: 'ta-LK', label: 'Tamil (Sri Lanka)' },\n  { value: 'ta', label: 'Tamil' },\n  { value: 'te-IN', label: 'Telugu (India)' },\n  { value: 'te', label: 'Telugu' },\n  { value: 'teo-KE', label: 'Teso (Kenya)' },\n  { value: 'teo-UG', label: 'Teso (Uganda)' },\n  { value: 'teo', label: 'Teso' },\n  { value: 'th-TH', label: 'Thai (Thailand)' },\n  { value: 'th', label: 'Thai' },\n  { value: 'bo-CN', label: 'Tibetan (China)' },\n  { value: 'bo-IN', label: 'Tibetan (India)' },\n  { value: 'bo', label: 'Tibetan' },\n  { value: 'ti-ER', label: 'Tigrinya (Eritrea)' },\n  { value: 'ti-ET', label: 'Tigrinya (Ethiopia)' },\n  { value: 'ti', label: 'Tigrinya' },\n  { value: 'to-TO', label: 'Tonga (Tonga)' },\n  { value: 'to', label: 'Tonga' },\n  { value: 'tr-TR', label: 'Turkish (Turkey)' },\n  { value: 'tr', label: 'Turkish' },\n  { value: 'uk-UA', label: 'Ukrainian (Ukraine)' },\n  { value: 'uk', label: 'Ukrainian' },\n  { value: 'ur-IN', label: 'Urdu (India)' },\n  { value: 'ur-PK', label: 'Urdu (Pakistan)' },\n  { value: 'ur', label: 'Urdu' },\n  { value: 'uz-Arab', label: 'Uzbek (Arabic)' },\n  { value: 'uz-Arab-AF', label: 'Uzbek (Arabic, Afghanistan)' },\n  { value: 'uz-Cyrl', label: 'Uzbek (Cyrillic)' },\n  { value: 'uz-Cyrl-UZ', label: 'Uzbek (Cyrillic, Uzbekistan)' },\n  { value: 'uz-Latn', label: 'Uzbek (Latin)' },\n  { value: 'uz-Latn-UZ', label: 'Uzbek (Latin, Uzbekistan)' },\n  { value: 'uz', label: 'Uzbek' },\n  { value: 'vi-VN', label: 'Vietnamese (Vietnam)' },\n  { value: 'vi', label: 'Vietnamese' },\n  { value: 'vun-TZ', label: 'Vunjo (Tanzania)' },\n  { value: 'vun', label: 'Vunjo' },\n  { value: 'cy-GB', label: 'Welsh (United Kingdom)' },\n  { value: 'cy', label: 'Welsh' },\n  { value: 'yo-NG', label: 'Yoruba (Nigeria)' },\n  { value: 'yo', label: 'Yoruba' },\n  { value: 'zu-ZA', label: 'Zulu (South Africa)' },\n  { value: 'zu', label: 'Zulu' }\n];\n\nconst currencyOptions = [\n  {\n    value: 'EUR',\n    label: 'EUR'\n  },\n  {\n    value: 'AED',\n    label: 'AED'\n  },\n  {\n    value: 'AFN',\n    label: 'AFN'\n  },\n  {\n    value: 'XCD',\n    label: 'XCD'\n  },\n  {\n    value: 'ALL',\n    label: 'ALL'\n  },\n  {\n    value: 'AMD',\n    label: 'AMD'\n  },\n  {\n    value: 'AOA',\n    label: 'AOA'\n  },\n  {\n    value: 'USD',\n    label: 'USD'\n  },\n  {\n    value: 'ARS',\n    label: 'ARS'\n  },\n  {\n    value: 'AUD',\n    label: 'AUD'\n  },\n  {\n    value: 'AWG',\n    label: 'AWG'\n  },\n  {\n    value: 'AZN',\n    label: 'AZN'\n  },\n  {\n    value: 'BAM',\n    label: 'BAM'\n  },\n  {\n    value: 'BBD',\n    label: 'BBD'\n  },\n  {\n    value: 'BDT',\n    label: 'BDT'\n  },\n  {\n    value: 'XOF',\n    label: 'XOF'\n  },\n  {\n    value: 'BGN',\n    label: 'BGN'\n  },\n  {\n    value: 'BHD',\n    label: 'BHD'\n  },\n  {\n    value: 'BIF',\n    label: 'BIF'\n  },\n  {\n    value: 'BMD',\n    label: 'BMD'\n  },\n  {\n    value: 'BND',\n    label: 'BND'\n  },\n  {\n    value: 'BOB',\n    label: 'BOB'\n  },\n  {\n    value: 'BRL',\n    label: 'BRL'\n  },\n  {\n    value: 'BSD',\n    label: 'BSD'\n  },\n  {\n    value: 'BTN',\n    label: 'BTN'\n  },\n  {\n    value: 'NOK',\n    label: 'NOK'\n  },\n  {\n    value: 'BWP',\n    label: 'BWP'\n  },\n  {\n    value: 'BYN',\n    label: 'BYN'\n  },\n  {\n    value: 'BZD',\n    label: 'BZD'\n  },\n  {\n    value: 'CAD',\n    label: 'CAD'\n  },\n  {\n    value: 'CDF',\n    label: 'CDF'\n  },\n  {\n    value: 'XAF',\n    label: 'XAF'\n  },\n  {\n    value: 'CHF',\n    label: 'CHF'\n  },\n  {\n    value: 'NZD',\n    label: 'NZD'\n  },\n  {\n    value: 'CLF',\n    label: 'CLF'\n  },\n  {\n    value: 'CNY',\n    label: 'CNY'\n  },\n  {\n    value: 'COP',\n    label: 'COP'\n  },\n  {\n    value: 'CRC',\n    label: 'CRC'\n  },\n  {\n    value: 'CUC',\n    label: 'CUC'\n  },\n  {\n    value: 'CVE',\n    label: 'CVE'\n  },\n  {\n    value: 'ANG',\n    label: 'ANG'\n  },\n  {\n    value: 'CZK',\n    label: 'CZK'\n  },\n  {\n    value: 'DJF',\n    label: 'DJF'\n  },\n  {\n    value: 'DKK',\n    label: 'DKK'\n  },\n  {\n    value: 'DOP',\n    label: 'DOP'\n  },\n  {\n    value: 'DZD',\n    label: 'DZD'\n  },\n  {\n    value: 'EGP',\n    label: 'EGP'\n  },\n  {\n    value: 'MAD',\n    label: 'MAD'\n  },\n  {\n    value: 'ERN',\n    label: 'ERN'\n  },\n  {\n    value: 'ETB',\n    label: 'ETB'\n  },\n  {\n    value: 'FJD',\n    label: 'FJD'\n  },\n  {\n    value: 'FKP',\n    label: 'FKP'\n  },\n  {\n    value: 'GBP',\n    label: 'GBP'\n  },\n  {\n    value: 'GEL',\n    label: 'GEL'\n  },\n  {\n    value: 'GHS',\n    label: 'GHS'\n  },\n  {\n    value: 'GIP',\n    label: 'GIP'\n  },\n  {\n    value: 'GMD',\n    label: 'GMD'\n  },\n  {\n    value: 'GNF',\n    label: 'GNF'\n  },\n  {\n    value: 'GTQ',\n    label: 'GTQ'\n  },\n  {\n    value: 'GYD',\n    label: 'GYD'\n  },\n  {\n    value: 'HKD',\n    label: 'HKD'\n  },\n  {\n    value: 'HNL',\n    label: 'HNL'\n  },\n  {\n    value: 'HRK',\n    label: 'HRK'\n  },\n  {\n    value: 'HTG',\n    label: 'HTG'\n  },\n  {\n    value: 'HUF',\n    label: 'HUF'\n  },\n  {\n    value: 'IDR',\n    label: 'IDR'\n  },\n  {\n    value: 'ILS',\n    label: 'ILS'\n  },\n  {\n    value: 'INR',\n    label: 'INR'\n  },\n  {\n    value: 'IQD',\n    label: 'IQD'\n  },\n  {\n    value: 'IRR',\n    label: 'IRR'\n  },\n  {\n    value: 'ISK',\n    label: 'ISK'\n  },\n  {\n    value: 'JMD',\n    label: 'JMD'\n  },\n  {\n    value: 'JOD',\n    label: 'JOD'\n  },\n  {\n    value: 'JPY',\n    label: 'JPY'\n  },\n  {\n    value: 'KES',\n    label: 'KES'\n  },\n  {\n    value: 'KGS',\n    label: 'KGS'\n  },\n  {\n    value: 'KHR',\n    label: 'KHR'\n  },\n  {\n    value: 'KMF',\n    label: 'KMF'\n  },\n  {\n    value: 'KPW',\n    label: 'KPW'\n  },\n  {\n    value: 'KRW',\n    label: 'KRW'\n  },\n  {\n    value: 'KWD',\n    label: 'KWD'\n  },\n  {\n    value: 'KYD',\n    label: 'KYD'\n  },\n  {\n    value: 'KZT',\n    label: 'KZT'\n  },\n  {\n    value: 'LAK',\n    label: 'LAK'\n  },\n  {\n    value: 'LBP',\n    label: 'LBP'\n  },\n  {\n    value: 'LKR',\n    label: 'LKR'\n  },\n  {\n    value: 'LRD',\n    label: 'LRD'\n  },\n  {\n    value: 'LSL',\n    label: 'LSL'\n  },\n  {\n    value: 'LYD',\n    label: 'LYD'\n  },\n  {\n    value: 'MDL',\n    label: 'MDL'\n  },\n  {\n    value: 'MGA',\n    label: 'MGA'\n  },\n  {\n    value: 'MKD',\n    label: 'MKD'\n  },\n  {\n    value: 'MMK',\n    label: 'MMK'\n  },\n  {\n    value: 'MNT',\n    label: 'MNT'\n  },\n  {\n    value: 'MRU',\n    label: 'MRU'\n  },\n  {\n    value: 'MUR',\n    label: 'MUR'\n  },\n  {\n    value: 'MVR',\n    label: 'MVR'\n  },\n  {\n    value: 'MWK',\n    label: 'MWK'\n  },\n  {\n    value: 'MXN',\n    label: 'MXN'\n  },\n  {\n    value: 'MYR',\n    label: 'MYR'\n  },\n  {\n    value: 'MZN',\n    label: 'MZN'\n  },\n  {\n    value: 'NAD',\n    label: 'NAD'\n  },\n  {\n    value: 'XPF',\n    label: 'XPF'\n  },\n  {\n    value: 'NGN',\n    label: 'NGN'\n  },\n  {\n    value: 'NIO',\n    label: 'NIO'\n  },\n  {\n    value: 'NPR',\n    label: 'NPR'\n  },\n  {\n    value: 'OMR',\n    label: 'OMR'\n  },\n  {\n    value: 'PAB',\n    label: 'PAB'\n  },\n  {\n    value: 'PEN',\n    label: 'PEN'\n  },\n  {\n    value: 'PGK',\n    label: 'PGK'\n  },\n  {\n    value: 'PHP',\n    label: 'PHP'\n  },\n  {\n    value: 'PKR',\n    label: 'PKR'\n  },\n  {\n    value: 'PLN',\n    label: 'PLN'\n  },\n  {\n    value: 'PYG',\n    label: 'PYG'\n  },\n  {\n    value: 'QAR',\n    label: 'QAR'\n  },\n  {\n    value: 'RON',\n    label: 'RON'\n  },\n  {\n    value: 'RSD',\n    label: 'RSD'\n  },\n  {\n    value: 'RUB',\n    label: 'RUB'\n  },\n  {\n    value: 'RWF',\n    label: 'RWF'\n  },\n  {\n    value: 'SAR',\n    label: 'SAR'\n  },\n  {\n    value: 'SBD',\n    label: 'SBD'\n  },\n  {\n    value: 'SCR',\n    label: 'SCR'\n  },\n  {\n    value: 'SDG',\n    label: 'SDG'\n  },\n  {\n    value: 'SEK',\n    label: 'SEK'\n  },\n  {\n    value: 'SGD',\n    label: 'SGD'\n  },\n  {\n    value: 'SHP',\n    label: 'SHP'\n  },\n  {\n    value: 'SLL',\n    label: 'SLL'\n  },\n  {\n    value: 'SOS',\n    label: 'SOS'\n  },\n  {\n    value: 'SRD',\n    label: 'SRD'\n  },\n  {\n    value: 'SSP',\n    label: 'SSP'\n  },\n  {\n    value: 'STN',\n    label: 'STN'\n  },\n  {\n    value: 'SVC',\n    label: 'SVC'\n  },\n  {\n    value: 'SYP',\n    label: 'SYP'\n  },\n  {\n    value: 'SZL',\n    label: 'SZL'\n  },\n  {\n    value: 'THB',\n    label: 'THB'\n  },\n  {\n    value: 'TJS',\n    label: 'TJS'\n  },\n  {\n    value: 'TMT',\n    label: 'TMT'\n  },\n  {\n    value: 'TND',\n    label: 'TND'\n  },\n  {\n    value: 'TOP',\n    label: 'TOP'\n  },\n  {\n    value: 'TRY',\n    label: 'TRY'\n  },\n  {\n    value: 'TTD',\n    label: 'TTD'\n  },\n  {\n    value: 'TWD',\n    label: 'TWD'\n  },\n  {\n    value: 'TZS',\n    label: 'TZS'\n  },\n  {\n    value: 'UAH',\n    label: 'UAH'\n  },\n  {\n    value: 'UGX',\n    label: 'UGX'\n  },\n  {\n    value: 'UYI',\n    label: 'UYI'\n  },\n  {\n    value: 'UZS',\n    label: 'UZS'\n  },\n  {\n    value: 'VES',\n    label: 'VES'\n  },\n  {\n    value: 'VND',\n    label: 'VND'\n  },\n  {\n    value: 'VUV',\n    label: 'VUV'\n  },\n  {\n    value: 'YER',\n    label: 'YER'\n  },\n  {\n    value: 'ZAR',\n    label: 'ZAR'\n  },\n  {\n    value: 'ZMW',\n    label: 'ZMW'\n  },\n  {\n    value: 'ZWL',\n    label: 'ZWL'\n  }\n];\n\nconst FormattedField = () => {\n  const { value: locale } = useFieldState('locale');\n  const { value: currency } = useFieldState('currency');\n\n  // Generate mask from locale and currency\n  const { formatter, parser } = useMemo(\n    () => {\n      if (locale && currency) {\n        return utils.createIntlNumberFormatter(locale, {\n          style: 'currency',\n          currency\n        });\n      }\n      return {};\n    },\n    [currency, locale]\n  );\n\n  // const { formatter, parser } = useMemo(() => {\n  //   // return utils.createIntlNumberFormatter('en-US', {});\n\n  //   return utils.createIntlNumberFormatter('en-US', {\n  //     style: 'decimal',\n  //     signDisplay: 'never',\n  //     minimumFractionDigits: 0,\n  //     maximumFractionDigits: 0\n  //   });\n  // }, []);\n\n  // const { formatter, parser } = useMemo(() => {\n  //   // return utils.createIntlNumberFormatter('de-DE', {\n  //   //   style: 'decimal',\n  //   //   currency: 'USD',\n  //   //   minimumFractionDigits: 2\n  //   // });\n\n  //   return utils.createIntlNumberFormatter(locale, {\n  //     style: 'decimal',\n  //     currency: 'USD',\n  //     minimumFractionDigits: 2,\n  //     maximumFractionDigits: 2\n  //   });\n  // }, []);\n\n  return (\n    <Input\n      field=\"localeMask\"\n      label={`Locale Masked Field (${currency} currency)`}\n      formatter={formatter}\n      parser={parser}\n      formatterDependencies={[locale, currency]}\n      initialValue={3000.25}\n    />\n  );\n};\n\nconst FormatParse = () => (\n  <Form>\n    <div>\n      <Select\n        label=\"Locale\"\n        field=\"locale\"\n        options={localeOptions}\n        initialValue=\"en-US\"\n      />\n      <Select\n        label=\"Currency\"\n        field=\"currency\"\n        options={currencyOptions}\n        initialValue=\"USD\"\n      />\n      <FormattedField />\n      <button type=\"submit\">Submit</button>\n      <Debug />\n    </div>\n  </Form>\n);\n\nexport default withDocs(readme, FormatParse);\n","export default \"# Parse\\n\\nSometimes you just want to parse the value that is stored and show what user typed.\\n\\nNote: when doing this you may need to pass an initialization function, see example below.\\n\\n<!-- STORY -->\\n\\n```jsx\\nimport { Form, Text } from 'informed';\\n\\n// Example 5 = 1 ( i.e a user typed the number ) 10  but we want to store a 2 .. 10 / 5 = 2\\nconst parser = value => (value != null ? value / 5 : value);\\nconst initialize = value => (value != null ? value * 5 : value);\\n\\n<Form>\\n  <Input\\n    name=\\\"field\\\"\\n    label=\\\"5 = 1\\\"\\n    parser={parser}\\n    initialValue={2}\\n    initialize={initialize}\\n    type=\\\"number\\\"\\n  />{' '}\\n  <button type=\\\"submit\\\">Submit</button>\\n</Form>;\\n```\\n\";","import React from 'react';\nimport withDocs from '../../utils/withDocs';\nimport readme from './README.md';\n\nimport { Form, Input, Debug } from '../../../src';\n\n// Example 5 = 1 ( i.e a user typed the number ) 10  but we want to store a 2 .. 10 / 5 = 2\nconst parser = value => (value != null ? value / 5 : value);\nconst initialize = value => (value != null ? value * 5 : value);\n\nconst Mask = () => (\n  <Form>\n    <Input\n      name=\"field\"\n      label=\"5 = 1\"\n      parser={parser}\n      initialValue={2}\n      initialize={initialize}\n      type=\"number\"\n    />\n    <button type=\"submit\">Submit</button>\n    <Debug values maskedValues />\n  </Form>\n);\n\nexport default withDocs(readme, Mask);\n\n// Example 1 block = 5 cm\n// const mask = value => value;\n// const parser = value => (value != null ? value / 5 : value);\n","export default \"# Global Forms\\n\\nSometimes you need to share state between forms. Below is an example where you can name your forms and reference them while in the context of Informed.\\n\\n<br/>\\n\\n<!-- STORY -->\\n\\n#### Code:\\n\\n```jsx\\nimport {\\n  Form,\\n  Input,\\n  Select,\\n  Debug,\\n  useInformedState,\\n  useInformedField,\\n  useInformedApi,\\n  Informed\\n} from 'informed';\\n\\nconst PurpleBorder = ({ children }) => {\\n  return (\\n    <div\\n      style={{ border: '2px solid purple', padding: '1rem', margin: '1rem' }}>\\n      {children}\\n    </div>\\n  );\\n};\\n\\nconst Overview = () => {\\n  const renders = useRef(0);\\n  renders.current = renders.current + 1;\\n\\n  const infoState = useInformedState('info');\\n  const questionState = useInformedState('questions');\\n\\n  return (\\n    <PurpleBorder>\\n      <h4>Renders: {renders.current}</h4>\\n      <h3>\\n        {infoState?.values?.name}s favorite color is{' '}\\n        {questionState?.values?.color}\\n      </h3>\\n    </PurpleBorder>\\n  );\\n};\\n\\nconst Color = () => {\\n  const renders = useRef(0);\\n  renders.current = renders.current + 1;\\n\\n  const colorState = useInformedField('questions', 'color');\\n\\n  return (\\n    <PurpleBorder>\\n      <h4>Renders {renders.current} </h4>\\n      <div\\n        style={{\\n          width: '100px',\\n          height: '100px',\\n          backgroundColor: colorState?.value\\n        }}\\n      />\\n      {colorState?.value}\\n    </PurpleBorder>\\n  );\\n};\\n\\nconst IntroControl = () => {\\n  const informedApi = useInformedApi();\\n\\n  const renders = useRef(0);\\n  renders.current = renders.current + 1;\\n\\n  const onClick = useCallback(() => {\\n    informedApi.getFormApi('info').setValue('name', 'Joe Puzzo');\\n  }, []);\\n\\n  return (\\n    <PurpleBorder>\\n      <h4>Renders {renders.current} </h4>\\n      <button type=\\\"button\\\" onClick={onClick}>\\n        Set First Name\\n      </button>\\n    </PurpleBorder>\\n  );\\n};\\n\\nconst Example = () => {\\n  return (\\n    <Informed>\\n      <PurpleBorder>\\n        <Form autocomplete=\\\"off\\\" name=\\\"info\\\">\\n          <h3>Info</h3>\\n          <Input name=\\\"name\\\" label=\\\"First name:\\\" />\\n          <button type=\\\"submit\\\">Submit</button>\\n          <Debug values />\\n        </Form>\\n      </PurpleBorder>\\n      <IntroControl />\\n      <PurpleBorder>\\n        <Form autocomplete=\\\"off\\\" name=\\\"questions\\\">\\n          <h3>Questions</h3>\\n          <Select name=\\\"color\\\" label=\\\"Color\\\" defaultValue=\\\"blue\\\">\\n            <option value=\\\"red\\\">Red</option>\\n            <option value=\\\"green\\\">Green</option>\\n            <option value=\\\"blue\\\">Blue</option>\\n          </Select>\\n          <button type=\\\"submit\\\">Submit</button>\\n          <Debug values />\\n        </Form>\\n      </PurpleBorder>\\n      <Overview />\\n      <Color />\\n    </Informed>\\n  );\\n};\\n```\\n\";","import React, { useCallback, useRef, useState } from 'react';\nimport withDocs from '../../utils/withDocs';\nimport readme from './README.md';\nimport {\n  Form,\n  Input,\n  Select,\n  Debug,\n  Informed,\n  useInformedApi\n} from '../../../src';\nimport { useInformedState, useInformedField } from '../../../src';\n\nconst PurpleBorder = ({ children }) => {\n  return (\n    <div\n      style={{ border: '2px solid purple', padding: '1rem', margin: '1rem' }}>\n      {children}\n    </div>\n  );\n};\n\nconst Overview = () => {\n  const renders = useRef(0);\n  renders.current = renders.current + 1;\n\n  const infoState = useInformedState('info');\n  const questionState = useInformedState('questions');\n\n  return (\n    <PurpleBorder>\n      <h4>Renders: {renders.current}</h4>\n      <h3>\n        {infoState?.values?.name}s favorite color is{' '}\n        {questionState?.values?.color}\n      </h3>\n    </PurpleBorder>\n  );\n};\n\nconst Color = () => {\n  const renders = useRef(0);\n  renders.current = renders.current + 1;\n\n  const colorState = useInformedField('questions', 'color');\n\n  return (\n    <PurpleBorder>\n      <h4>Renders {renders.current} </h4>\n      <div\n        style={{\n          width: '100px',\n          height: '100px',\n          backgroundColor: colorState?.value\n        }}\n      />\n      {colorState?.value}\n    </PurpleBorder>\n  );\n};\n\nconst IntroControl = () => {\n  const informedApi = useInformedApi();\n\n  const renders = useRef(0);\n  renders.current = renders.current + 1;\n\n  const onClick = useCallback(() => {\n    informedApi.getFormApi('info').setValue('name', 'Joe Puzzo');\n  }, []);\n\n  return (\n    <PurpleBorder>\n      <h4>Renders {renders.current} </h4>\n      <button type=\"button\" onClick={onClick}>\n        Set First Name\n      </button>\n    </PurpleBorder>\n  );\n};\n\nconst Example = () => {\n  const [show, setShow] = useState(true);\n  return (\n    <Informed>\n      <PurpleBorder>\n        <Form autocomplete=\"off\" name=\"info\">\n          <h3>Info</h3>\n          <Input name=\"name\" label=\"First name:\" />\n          <button type=\"submit\">Submit</button>\n          <Debug values />\n        </Form>\n      </PurpleBorder>\n      <IntroControl />\n      <button onClick={() => setShow(!show)}>Toggle</button>\n      {show ? (\n        <PurpleBorder>\n          <Form autocomplete=\"off\" name=\"questions\">\n            <h3>Questions</h3>\n            <Select name=\"color\" label=\"Color\" defaultValue=\"blue\">\n              <option value=\"red\">Red</option>\n              <option value=\"green\">Green</option>\n              <option value=\"blue\">Blue</option>\n            </Select>\n            <button type=\"submit\">Submit</button>\n            <Debug values />\n          </Form>\n        </PurpleBorder>\n      ) : null}\n      <Overview />\n      <Color />\n    </Informed>\n  );\n};\n\nexport default withDocs(readme, Example);\n","export default \"# Changing initialValues\\n\\n<br/>\\n\\nCommonly you will have use cases where you want the values to change when the users has made a different selection.\\n\\nBelow we have example where there is a profile editor. Depending on which profile you would like to edit, you want to pre populate the profile form with that users profile information.\\n\\n<!-- STORY -->\\n\\n#### Code:\\n\\n```jsx\\nimport React, { useState, useEffect, useRef } from 'react';\\nimport { Form, Input, Select, Debug } from '../../../src';\\n\\n// Use your imagination and pretend these came from an api call :)\\nconst profiles = [\\n  {\\n    name: 'Joe',\\n    age: 25\\n  },\\n  {\\n    name: 'Kimbal',\\n    age: 47\\n  },\\n  {\\n    name: 'Elon',\\n    age: 48\\n  }\\n];\\n\\nconst ProfileForm = ({ profile: initialValues }) => {\\n  // Ref to the form api\\n  const formApiRef = useRef();\\n\\n  // Reset the form whenever initial values change ( happens when user selects profile )\\n  useEffect(\\n    () => {\\n      formApiRef.current.reset();\\n    },\\n    [initialValues]\\n  );\\n\\n  return (\\n    // Remember to get access to the formApi and pass in the initial values\\n    <Form formApiRef={formApiRef} initialValues={initialValues}>\\n      <Input name=\\\"name\\\" label=\\\"First Name\\\" />\\n      <Input type=\\\"number\\\" name=\\\"age\\\" label=\\\"Age\\\" />\\n      <button type=\\\"submit\\\">submit</button>\\n      <Debug values />\\n    </Form>\\n  );\\n};\\n\\nconst Profiles = () => {\\n  // Select the first profile by default\\n  const [selectedProfile, setSelectedProfile] = useState(profiles[0]);\\n\\n  const selectProfile = ({ value }) => setSelectedProfile(profiles[value]);\\n\\n  return (\\n    <React.Fragment>\\n      <h2>Select Profile</h2>\\n      <Form>\\n        {/* A rare case where we want to track the value instead of rcf ( onChange ) */}\\n        <Select name=\\\"profile\\\" label=\\\"Profile\\\" onChange={selectProfile}>\\n          {profiles.map((profile, i) => (\\n            <option value={i}>{profile.name}</option>\\n          ))}\\n        </Select>\\n      </Form>\\n      <h2>Edit {selectedProfile.name}</h2>\\n      <ProfileForm profile={selectedProfile} />\\n    </React.Fragment>\\n  );\\n};\\n```\\n\";","import React, { useState, useEffect, useRef } from 'react';\nimport withDocs from '../../utils/withDocs';\nimport readme from './README.md';\nimport { Form, Input, Select, Debug } from '../../../src';\n\n// Use your imagination and pretend these came from an api call :)\nconst profiles = [\n  {\n    name: 'Joe',\n    age: 25\n  },\n  {\n    name: 'Kimbal',\n    age: 47\n  },\n  {\n    name: 'Elon',\n    age: 48\n  }\n];\n\nconst ProfileForm = ({ profile: initialValues }) => {\n  // Ref to the form api\n  const formApiRef = useRef();\n\n  // Reset the form whenever initial values change ( happens when user selects profile )\n  useEffect(\n    () => {\n      formApiRef.current.reset();\n    },\n    [initialValues]\n  );\n\n  return (\n    // Remember to get access to the formApi and pass in the initial values\n    <Form formApiRef={formApiRef} initialValues={initialValues}>\n      <Input name=\"name\" label=\"First Name\" />\n      <Input type=\"number\" name=\"age\" label=\"Age\" />\n      <button type=\"submit\">submit</button>\n      <Debug values initialValues />\n    </Form>\n  );\n};\n\nconst Profiles = () => {\n  // Select the first profile by default\n  const [selectedProfile, setSelectedProfile] = useState(profiles[0]);\n\n  const selectProfile = ({ value }) => setSelectedProfile(profiles[value]);\n\n  return (\n    <React.Fragment>\n      <h2>Select Profile</h2>\n      <Form>\n        {/* A rare case where we want to track the value instead of rcf ( onChange ) */}\n        <Select name=\"profile\" label=\"Profile\" onChange={selectProfile}>\n          {profiles.map((profile, i) => (\n            <option value={i}>{profile.name}</option>\n          ))}\n        </Select>\n      </Form>\n      <h2>Edit {selectedProfile.name}</h2>\n      <ProfileForm profile={selectedProfile} />\n    </React.Fragment>\n  );\n};\n\nexport default withDocs(readme, Profiles);\n","export default \"# Initialize Value If Pristine\\n\\nSometimes you need to conditionally show or hide things based on the values in your form. This can easily be achieved with `<Relevant />`. However you may have initial values that you only want to use when the form fields were rendered on form load ( i.e ) `$pristine` state.\\n\\nTo achieve this you can optionally pass `initializeValueIfPristine` to a field.\\n\\n#### Code:\\n\\n```jsx\\nimport { Button } from '@tesla/design-system-react';\\nimport { Form, Input, RadioGroup, Radio, Relevant, Debug } from 'informed';\\n\\nconst RelevantExample = () => (\\n  <Form\\n    initialValues={{\\n      married: 'yes',\\n      spouseFirst: 'Hope',\\n      spouseLast: 'Foobar'\\n    }}>\\n    <Input name=\\\"name\\\" label=\\\"First Name\\\" />\\n    <RadioGroup name=\\\"married\\\" label=\\\"Are You Married?\\\">\\n      <Radio value=\\\"yes\\\" label=\\\"Yes\\\" />\\n      <Radio value=\\\"no\\\" label=\\\"No\\\" />\\n    </RadioGroup>\\n    <Relevant when={({ formState }) => formState.values.married === 'yes'}>\\n      <Input name=\\\"spouseFirst\\\" label=\\\"Spouse First Name\\\" />\\n      <Input\\n        name=\\\"spouseLast\\\"\\n        label=\\\"Spouse Last Name\\\"\\n        initializeValueIfPristine\\n      />\\n    </Relevant>\\n    <Button type=\\\"submit\\\" variant=\\\"primary\\\">\\n      submit\\n    </Button>\\n    <Debug values />\\n  </Form>\\n);\\n```\\n\\n<!-- STORY -->\\n\";","import React, { useRef } from 'react';\nimport withDocs from '../../utils/withDocs';\nimport readme from './README.md';\nimport { Form, Input, RadioGroup, Radio, Relevant, Debug } from '../../../src';\n\nconst RelevantExample = () => {\n  const formApiRef = useRef();\n\n  return (\n    <Form\n      formApiRef={formApiRef}\n      initialValues={{\n        married: 'yes',\n        spouseFirst: 'Hope',\n        spouseLast: 'Foobar'\n      }}>\n      <Input name=\"name\" label=\"First Name\" />\n      <RadioGroup name=\"married\" label=\"Are You Married?\">\n        <Radio value=\"yes\" label=\"Yes\" />\n        <Radio value=\"no\" label=\"No\" />\n      </RadioGroup>\n      <Relevant when={({ formState }) => formState.values.married === 'yes'}>\n        <Input name=\"spouseFirst\" label=\"Spouse First Name\" />\n        <Input\n          name=\"spouseLast\"\n          label=\"Spouse Last Name\"\n          initializeValueIfPristine\n        />\n      </Relevant>\n      <button type=\"submit\" variant=\"primary\">\n        submit\n      </button>\n      {/* <Button type=\"button\" onClick={() => formApiRef.current.setValue('spouseFirst', 'Foo')}>\n        Set Name to \"Foo\"\n      </Button> */}\n      <Debug values />\n    </Form>\n  );\n};\nexport default withDocs(readme, RelevantExample);\n","export default \"# Initial Vs Default\\n\\n<br/>\\n\\nSometimes you may want to have a default value for an input that is NOT affected by initial values.\\n\\nBelow is an example where we have some inputs. One of the inputs asks if we love Tesla!\\n\\nOf course, we want that field to default to `true`!\\n\\nHowever, if we decide to achieve this by passing `initialValue` at the fieldLevel we screw ourselves!\\n\\nWhy? Because if the user for some stupid reason, had selected \\\"no\\\" and then we wanted to pre populate the form ( during an edit ). It would never get set.\\n\\n<!-- STORY -->\\n\\n#### Code:\\n\\n```jsx\\nimport React from 'react';\\nimport { Form, Input, RadioGroup, Radio, Debug } from 'informed';\\n\\nconst Example = () => {\\n  const initialValues = {\\n    name: 'Joe',\\n    age: 26,\\n    love: 'no' // << GOAL the form should read NO\\n  };\\n\\n  return (\\n    <React.Fragment>\\n      <Form initialValues={initialValues}>\\n        <Input name=\\\"name\\\" label=\\\"First Name\\\" />\\n        <Input type=\\\"number\\\" name=\\\"age\\\" label=\\\"Age\\\" />\\n        {/* Note we passed defaultValue here ( GOOD ) */}\\n        <RadioGroup name=\\\"love\\\" label=\\\"Do You Love Tesla?\\\" defaultValue=\\\"yes\\\">\\n          <Radio value=\\\"yes\\\" label=\\\"Yes\\\" />\\n          <Radio value=\\\"no\\\" label=\\\"No\\\" />\\n        </RadioGroup>\\n        <button type=\\\"submit\\\" variant=\\\"primary\\\">\\n          submit\\n        </button>\\n        <Debug values initialValues defaultValues />\\n      </Form>\\n      <Form initialValues={initialValues}>\\n        <Input name=\\\"name\\\" label=\\\"First Name\\\" />\\n        <Input type=\\\"number\\\" name=\\\"age\\\" label=\\\"Age\\\" />\\n        {/* Note we passed initialValue here ( BAD ) */}\\n        <RadioGroup name=\\\"love\\\" label=\\\"Do You Love Tesla?\\\" initialValue=\\\"yes\\\">\\n          <Radio value=\\\"yes\\\" label=\\\"Yes\\\" />\\n          <Radio value=\\\"no\\\" label=\\\"No\\\" />\\n        </RadioGroup>\\n        <button type=\\\"submit\\\" variant=\\\"primary\\\">\\n          submit\\n        </button>\\n        <Debug values initialValues defaultValues />\\n      </Form>\\n    </React.Fragment>\\n  );\\n};\\n```\\n\";","import React from 'react';\nimport withDocs from '../../utils/withDocs';\nimport readme from './README.md';\nimport { Form, Input, RadioGroup, Radio, Debug } from '../../../src';\n\nconst Example = () => {\n  const initialValues = {\n    name: 'Joe',\n    age: 26,\n    love: 'no' // << GOAL the form should read NO\n  };\n\n  return (\n    <React.Fragment>\n      {/* <a\n        href=\"https://teslamotorsinc-my.sharepoint.com/:v:/g/personal/jpuzzo_tesla_com/EQJkU2trILFEqSrZFZcOa5sBJTYjydAkuo9RwiFydVf4tA?e=DL5PPO\"\n        target=\"_blank\">\n        Example Video\n      </a> */}\n      <Form initialValues={initialValues}>\n        <Input name=\"name\" label=\"First Name\" />\n        <Input type=\"number\" name=\"age\" label=\"Age\" />\n        {/* Note we passed defaultValue here ( GOOD ) */}\n        <RadioGroup name=\"love\" label=\"Do You Love Tesla?\" defaultValue=\"yes\">\n          <Radio value=\"yes\" label=\"Yes\" />\n          <Radio value=\"no\" label=\"No\" />\n        </RadioGroup>\n        <button type=\"submit\" variant=\"primary\">\n          submit\n        </button>\n        <Debug values initialValues defaultValues />\n      </Form>\n      <Form initialValues={initialValues}>\n        <Input name=\"name\" label=\"First Name\" />\n        <Input type=\"number\" name=\"age\" label=\"Age\" />\n        {/* Note we passed initialValue here ( BAD ) */}\n        <RadioGroup name=\"love\" label=\"Do You Love Tesla?\" initialValue=\"yes\">\n          <Radio value=\"yes\" label=\"Yes\" />\n          <Radio value=\"no\" label=\"No\" />\n        </RadioGroup>\n        <button type=\"submit\" variant=\"primary\">\n          submit\n        </button>\n        <Debug values initialValues defaultValues />\n      </Form>\n    </React.Fragment>\n  );\n};\n\nexport default withDocs(readme, Example);\n","import React from 'react';\nimport Code from '../../utils/Code';\nimport withDocs from '../../utils/withDocs';\nimport readme from './WithField.md';\n\nimport { Form, Input, Scope, Debug, useFieldState } from '../../../src';\n\nconst ScopedFieldState = ({ name }) => {\n  const { value } = useFieldState(name);\n  return (\n    <pre>\n      <code>{JSON.stringify(value, null, 2)}</code>\n    </pre>\n  );\n};\n\nconst UnScopedFieldState = ({ name }) => {\n  const { value } = useFieldState(name, false); // << Note the false here\n  return (\n    <pre>\n      <code>{JSON.stringify(value, null, 2)}</code>\n    </pre>\n  );\n};\n\nconst ScopeGotcha = () => (\n  <div>\n    <Form>\n      <Scope scope=\"favorite\">\n        <Input field=\"color\" />\n        <h5>favorite.color: ( scoped )</h5>\n        <ScopedFieldState name=\"favorite.color\" />\n        <h5>color: ( scoped )</h5>\n        <ScopedFieldState name=\"color\" />\n        <h5>favorite.color: ( un-scoped )</h5>\n        <UnScopedFieldState name=\"favorite.color\" />\n      </Scope>\n      <h5>Form State</h5>\n      <Debug values />\n    </Form>\n  </div>\n);\n\nexport default withDocs(readme, ScopeGotcha);\n","export default \"# Scope\\n\\nScope is a very useful tool for simplifying your code but you can easily make\\nmistakes when using it.\\n\\n## useFieldState:\\n\\nBelow is an example where you could misuse the `useFieldState`.\\n\\nType into the field and Note how the text below to `color:` gets updated while nothing changes next to `favorite.color:`\\n\\n<!-- STORY -->\\n\\nWhy? Lets take a look at the code below:\\n\\n<!-- IDFK Strange issue where i need this commnet or code formatting is messed up -->\\n\\n```jsx\\nimport { Form, Input, Scope, useFieldState } from 'informed';\\n\\nconst ScopedFieldState = ({ name }) => {\\n  const { value } = useFieldState(name);\\n  return (\\n    <pre>\\n      <code>{JSON.stringify(value, null, 2)}</code>\\n    </pre>\\n  );\\n};\\n\\nconst UnScopedFieldState = ({ name }) => {\\n  const { value } = useFieldState(name, false); // << Note the false here\\n  return (\\n    <pre>\\n      <code>{JSON.stringify(value, null, 2)}</code>\\n    </pre>\\n  );\\n};\\n\\nconst ScopeGotcha = () => (\\n  <div>\\n    <Form>\\n      <Scope scope=\\\"favorite\\\">\\n        <Input field=\\\"color\\\" />\\n        <h5>favorite.color: ( scoped )</h5>\\n        <ScopedFieldState name=\\\"favorite.color\\\" />\\n        <h5>color: ( scoped )</h5>\\n        <ScopedFieldState name=\\\"color\\\" />\\n        <h5>favorite.color: ( un-scoped )</h5>\\n        <UnScopedFieldState name=\\\"favorite.color\\\" />\\n      </Scope>\\n      <h5>Form State</h5>\\n      <Debug values />\\n    </Form>\\n  </div>\\n);\\n```\\n\\n<br/>\\n\\nRemember that the result of the `useField` hooks is affected just like `Input` fields. In other words when you write:\\n\\n```jsx\\n<Input name=\\\"color\\\" />\\n```\\n\\n<br/>\\n\\nWithin A:\\n\\n```jsx\\n<Scope scope=\\\"favorite\\\" />\\n```\\n\\n<br/>\\n\\nThe result in the values is `favorite.color`. Putting a component that uses `useFieldState` or `useFieldApi` is affected in the exact same way!\\n\\nTo opt out of this. Pass `false` as a second parameter.\\n\";","import React from 'react';\nimport WithField from './WithField';\n\nexport default () => <WithField />;\n","import UseFormApi from './useFormApi';\nimport UseFormState from './useFormState';\nimport UseFieldApi from './useFieldApi';\nimport UseFieldState from './useFieldState';\nimport UseForm from './useForm';\nimport UseField from './useField';\nimport UseFormStateSelector from './useFormStateSelector';\n\nexport {\n  UseFormApi,\n  UseFormState,\n  UseFieldApi,\n  UseFieldState,\n  UseForm,\n  UseField,\n  UseFormStateSelector\n};\n","import React from 'react';\nimport UseFieldDirect from './useFieldDirect';\nimport UseFieldCustom from './useFieldCustom';\n\nconst UseField = () => (\n  <div>\n    <UseFieldCustom />\n    {/* <br />\n    <UseFieldDirect /> */}\n  </div>\n);\n\nexport default UseField;\n","export default \"# Use Field\\n\\nHere we use the hook `useField` to create a custom text input. The idea is that you do this once\\nfor a specific input type, then you simply start using your `<CustomTextInput />` throughout your code.\\n\\n<!-- STORY -->\\n\\n<!-- IDFK Strange issue where i need this commnet or code formatting is messed up -->\\n\\n```jsx\\nimport { Form, useField, Debug } from 'informed';\\n\\nconst CustomTextInput = props => {\\n  const { fieldState, fieldApi, render, ref, userProps } = useField({\\n    ...props\\n  });\\n\\n  const { value } = fieldState;\\n  const { setValue, setTouched } = fieldApi;\\n  const { onChange, onBlur, ...rest } = userProps;\\n\\n  /* --- DONT FORGET TO CALL THE RENDER METHOD FROM THE HOOK! --- */\\n  return render(\\n    <input\\n      {...rest}\\n      ref={ref}\\n      value={!value && value !== 0 ? '' : value}\\n      onChange={e => {\\n        setValue(e.target.value);\\n        if (onChange) {\\n          onChange(e);\\n        }\\n      }}\\n      onBlur={e => {\\n        setTouched(true);\\n        if (onBlur) {\\n          onBlur(e);\\n        }\\n      }}\\n    />\\n  );\\n};\\n\\nconst FromScratch = () => (\\n  <div>\\n    <Form>\\n      <label>\\n        First name:\\n        <CustomTextInput field=\\\"name\\\" />\\n      </label>\\n      <button type=\\\"submit\\\">Submit</button>\\n      <Debug values errors />\\n    </Form>\\n  </div>\\n);\\n```\\n\";","import React from 'react';\nimport Code from '../../../utils/Code';\nimport withDocs from '../../../utils/withDocs';\nimport readme from './README.md';\nimport { Form, useField, Debug } from '../../../../src';\n\nconst CustomTextInput = props => {\n  const { fieldState, fieldApi, render, ref, userProps } = useField({\n    ...props\n  });\n\n  const { value } = fieldState;\n  const { setValue, setTouched } = fieldApi;\n  const { onChange, onBlur, ...rest } = userProps;\n\n  return render(\n    <input\n      {...rest}\n      ref={ref}\n      value={!value && value !== 0 ? '' : value}\n      onChange={e => {\n        setValue(e.target.value);\n        if (onChange) {\n          onChange(e);\n        }\n      }}\n      onBlur={e => {\n        setTouched(true);\n        if (onBlur) {\n          onBlur(e);\n        }\n      }}\n    />\n  );\n};\n\nconst FromScratch = () => (\n  <div>\n    <Form>\n      <label>\n        First name:\n        <CustomTextInput field=\"name\" />\n      </label>\n      <button type=\"submit\">Submit</button>\n      <Debug values errors />\n    </Form>\n  </div>\n);\n\nexport default withDocs(readme, FromScratch);\n","export default \"# Use Field Without Custom Input\\n\\nIts NOT recomended to write forms this way but its totally doable. Below we hook up each field\\nvia a call to useField.\\n\\nThe reason I say \\\"NOT\\\" is due to the fact that this hook is best used in a custom input. See the [custom inputs](/?path=/story/custominputs--creating-custom-inputs) section of the docs.\\n\\nAlso there is a great optimization that is made when using the render function that the `useField` hook returns.\\n\\n<!-- STORY -->\\n\\n<!-- IDFK Strange issue where i need this commnet or code formatting is messed up -->\\n\\n```jsx\\nimport { useForm, useField } from 'informed';\\n\\nconst onSubmit = ({ values }) =>\\n  window.alert(`Form successfully submitted with ${JSON.stringify(values)}`);\\n\\nconst MyForm = () => {\\n  const { formController, render } = useForm({\\n    onSubmit\\n  });\\n\\n  const { informed: informName } = useField({\\n    formController,\\n    field: 'name',\\n    fieldType: 'text'\\n  });\\n  const { informed: informAge } = useField({\\n    formController,\\n    field: 'age',\\n    fieldType: 'number'\\n  });\\n  const { informed: informStatus } = useField({\\n    formController,\\n    field: 'status',\\n    fieldType: 'select'\\n  });\\n  const { informed: informColors } = useField({\\n    formController,\\n    field: 'colors',\\n    fieldType: 'select',\\n    multiple: true\\n  });\\n  const { informed: informAuthorize } = useField({\\n    formController,\\n    field: 'authorize',\\n    fieldType: 'checkbox'\\n  });\\n\\n  return render(\\n    <form\\n      onReset={formController.reset}\\n      onSubmit={formController.submitForm}\\n      onKeyDown={formController.keyDown}>\\n      <>\\n        <label>\\n          First name: <input {...informName} />\\n        </label>\\n        <label>\\n          Age: <input {...informAge} type=\\\"number\\\" />\\n        </label>\\n        <label>\\n          Relationship status:\\n          <select {...informStatus}>\\n            <option value=\\\"\\\" disabled>\\n              Select One...\\n            </option>\\n            <option value=\\\"single\\\">Single</option>\\n            <option value=\\\"relationship\\\">Relationship</option>\\n            <option value=\\\"complicated\\\">Complicated</option>\\n          </select>\\n        </label>\\n        <label>\\n          Colors:\\n          <select {...informColors} style={{ height: '100px', width: '200px' }}>\\n            <option value=\\\"red\\\">Red</option>\\n            <option value=\\\"green\\\">Green</option>\\n            <option value=\\\"blue\\\">Blue</option>\\n            <option value=\\\"yellow\\\">Yellow</option>\\n            <option value=\\\"orange\\\">Orange</option>\\n            <option value=\\\"purple\\\">Purple</option>\\n          </select>\\n        </label>\\n        <label>\\n          Authorize <input type=\\\"checkbox\\\" {...informAuthorize} />\\n        </label>\\n      </>\\n      <button type=\\\"submit\\\">Submit</button>\\n    </form>\\n  );\\n};\\n```\\n\";","import React from 'react';\nimport Code from '../../../utils/Code';\nimport withDocs from '../../../utils/withDocs';\nimport readme from './README.md';\nimport { useField, useForm } from '../../../../src';\n\nconst onSubmit = ({ values }) =>\n  window.alert(`Form successfully submitted with ${JSON.stringify(values)}`);\n\nconst UseFieldDirect = () => {\n  const { formController, render, formState } = useForm({\n    onSubmit\n  });\n\n  const { informed: informName } = useField({\n    formController,\n    field: 'name',\n    fieldType: 'text'\n  });\n  const { informed: informAge } = useField({\n    formController,\n    field: 'age',\n    fieldType: 'number'\n  });\n  const { informed: informStatus } = useField({\n    formController,\n    field: 'status',\n    fieldType: 'select'\n  });\n  const { informed: informColors } = useField({\n    formController,\n    field: 'colors',\n    fieldType: 'select',\n    multiple: true\n  });\n  const { informed: informAuthorize } = useField({\n    formController,\n    field: 'authorize',\n    fieldType: 'checkbox'\n  });\n\n  return render(\n    <form\n      onReset={formController.reset}\n      onSubmit={formController.submitForm}\n      onKeyDown={formController.keyDown}>\n      <>\n        <label>\n          First name: <input {...informName} />\n        </label>\n        <label>\n          Age: <input {...informAge} type=\"number\" />\n        </label>\n        <label>\n          Relationship status:\n          <select {...informStatus}>\n            <option value=\"\" disabled>\n              Select One...\n            </option>\n            <option value=\"single\">Single</option>\n            <option value=\"relationship\">Relationship</option>\n            <option value=\"complicated\">Complicated</option>\n          </select>\n        </label>\n        <label>\n          Colors:\n          <select {...informColors} style={{ height: '100px', width: '200px' }}>\n            <option value=\"red\">Red</option>\n            <option value=\"green\">Green</option>\n            <option value=\"blue\">Blue</option>\n            <option value=\"yellow\">Yellow</option>\n            <option value=\"orange\">Orange</option>\n            <option value=\"purple\">Purple</option>\n          </select>\n        </label>\n        <label>\n          Authorize <input type=\"checkbox\" {...informAuthorize} />\n        </label>\n      </>\n      <button type=\"submit\">Submit</button>\n      <label>Values:</label>\n      <Code language=\"language-js\">\n        {JSON.stringify(formState.values, null, 2)}\n      </Code>\n      <label>Touched:</label>\n      <Code language=\"language-js\">\n        {JSON.stringify(formState.touched, null, 2)}\n      </Code>\n    </form>\n  );\n};\n\nexport default withDocs(readme, UseFieldDirect);\n","export default \"# Use Field Api\\n\\nThe `useFieldApi` hook will allow you to gain access to a fields api.\\n\\n<!-- STORY -->\\n\\n```jsx\\nimport { Form, Input, useFieldApi } from 'informed';\\n\\nconst ComponentUsingFieldApi = () => {\\n  const fieldApi = useFieldApi('name');\\n  return (\\n    <button\\n      type=\\\"button\\\"\\n      onClick={() =>\\n        fieldApi.setValue(\\n          Math.floor(Math.random() * Math.floor(Number.MAX_SAFE_INTEGER))\\n        )\\n      }>\\n      Random\\n    </button>\\n  );\\n};\\n\\n<Form>\\n  <Input name=\\\"name\\\" label=\\\"Name:\\\" initialValue=\\\"Joe\\\" />\\n  <button type=\\\"submit\\\">Submit</button>\\n  <h5>Component using fieldApi:</h5>\\n  <ComponentUsingFieldApi />\\n</Form>;\\n```\\n\";","import React from 'react';\nimport withDocs from '../../utils/withDocs';\nimport readme from './README.md';\n\nimport { Form, Input, useFieldApi } from '../../../src';\n\nconst ComponentUsingFieldApi = () => {\n  const fieldApi = useFieldApi('name');\n  return (\n    <>\n      <button\n        type=\"button\"\n        onClick={() =>\n          fieldApi.setValue(\n            Math.floor(Math.random() * Math.floor(Number.MAX_SAFE_INTEGER))\n          )\n        }>\n        Random\n      </button>\n      <button type=\"button\" onClick={() => fieldApi.reset()}>\n        Reset\n      </button>\n    </>\n  );\n};\n\nconst UseFieldApi = () => (\n  <Form>\n    <Input name=\"name\" label=\"Name:\" initialValue=\"Joe\" />\n    <button type=\"submit\">Submit</button>\n    <h5>Component using fieldApi:</h5>\n    <ComponentUsingFieldApi />\n  </Form>\n);\n\nexport default withDocs(readme, UseFieldApi);\n","export default \"# Use Field State\\n\\nThe `useFieldState` hook will allow you to gain access to a fields state. Note how one does not affect the others render!\\n\\n<!-- STORY -->\\n\\n```jsx\\nimport { Form, Input, useFieldState } from 'informed';\\n\\nconst ComponentUsingFieldState = ({ name }) => {\\n  const fieldState = useFieldState(name);\\n  return (\\n    <>\\n      <h5>Component using fieldState: {name}</h5>\\n      Render: {Math.random()}\\n      <pre>\\n        <code>{JSON.stringify(fieldState, null, 2)}</code>\\n      </pre>\\n    </>\\n  );\\n};\\n\\n<Form>\\n  <Input name=\\\"name\\\" label=\\\"Name:\\\" initialValue=\\\"Joe\\\" />\\n  <Input field=\\\"age\\\" label=\\\"Age:\\\" type=\\\"number\\\" />\\n  <button type=\\\"submit\\\">Submit</button>\\n  <ComponentUsingFieldState name=\\\"name\\\" />\\n  <ComponentUsingFieldState name=\\\"age\\\" />\\n</Form>;\\n```\\n\";","import React from 'react';\nimport withDocs from '../../utils/withDocs';\nimport readme from './README.md';\n\nimport { Form, Input, useFieldState } from '../../../src';\n\nconst ComponentUsingFieldState = ({ name }) => {\n  const fieldState = useFieldState(name);\n  return (\n    <>\n      <h5>Component using fieldState: {name}</h5>\n      Render: {Math.random()}\n      <pre>\n        <code>{JSON.stringify(fieldState, null, 2)}</code>\n      </pre>\n    </>\n  );\n};\n\nconst UseFieldState = () => (\n  <Form>\n    <Input name=\"name\" label=\"Name:\" initialValue=\"Joe\" />\n    <Input field=\"age\" label=\"Age:\" type=\"number\" />\n    <button type=\"submit\">Submit</button>\n    <ComponentUsingFieldState name=\"name\" />\n    <ComponentUsingFieldState name=\"age\" />\n  </Form>\n);\n\nexport default withDocs(readme, UseFieldState);\n","export default \"# Use Form\\n\\nThe `useForm` hook will allow you create your own form components.\\n\\n<!-- STORY -->\\n\\n```jsx\\nimport { Input, useForm } from 'informed';\\n\\nconst CustomForm = ({ children, ...rest }) => {\\n  const { formController, render, userProps } = useForm(rest);\\n\\n  /* --- DONT FORGET TO CALL THE RENDER METHOD FROM THE HOOK! --- */\\n  return render(\\n    <form\\n      {...userProps}\\n      onReset={formController.reset}\\n      onSubmit={formController.submitForm}\\n      onKeyDown={formController.keyDown}>\\n      {children}\\n    </form>\\n  );\\n};\\n\\nconst UseFormExample = () => (\\n  <CustomForm>\\n    <Input field=\\\"name\\\" name=\\\"First name:\\\" />\\n    <button type=\\\"submit\\\">Submit</button>\\n    <Debug />\\n  </CustomForm>\\n);\\n```\\n\";","import React from 'react';\nimport withDocs from '../../utils/withDocs';\nimport readme from './README.md';\n\nimport { Input, useForm, Debug } from '../../../src';\n\nconst CustomForm = ({ children, ...rest }) => {\n  const { formController, render, userProps } = useForm(rest);\n\n  /* --- Render Content --- */\n  return render(\n    <form\n      {...userProps}\n      onReset={formController.reset}\n      onSubmit={formController.submitForm}\n      onKeyDown={formController.keyDown}>\n      {children}\n    </form>\n  );\n};\n\nconst UseFormExample = () => (\n  <CustomForm>\n    <Input field=\"name\" name=\"First name:\" />\n    <button type=\"submit\">Submit</button>\n    <Debug />\n  </CustomForm>\n);\n\nexport default withDocs(readme, UseFormExample);\n","export default \"# Use Form Api\\n\\nThe `useFormApi` hook will allow you to gain access to the formApi.\\n\\n<!-- STORY -->\\n\\n```jsx\\nimport { Form, Input, useFormApi } from 'informed';\\n\\nconst ComponentUsingFormApi = () => {\\n  const formApi = useFormApi();\\n  return (\\n    <button\\n      type=\\\"button\\\"\\n      onClick={() =>\\n        formApi.setValue(\\n          'name',\\n          Math.floor(Math.random() * Math.floor(Number.MAX_SAFE_INTEGER))\\n        )\\n      }>\\n      Random\\n    </button>\\n  );\\n};\\n\\nconst UseFormApi = () => (\\n  <Form>\\n    <div>\\n      <Input name=\\\"name\\\" label=\\\"Name:\\\" />\\n      <button type=\\\"submit\\\">Submit</button>\\n      <h5>Component using formApi:</h5>\\n      <ComponentUsingFormApi />\\n    </div>\\n  </Form>\\n);\\n```\\n\";","import React from 'react';\nimport withDocs from '../../utils/withDocs';\nimport readme from './README.md';\n\nimport { Form, Input, useFormApi } from '../../../src';\n\nconst ComponentUsingFormApi = () => {\n  const formApi = useFormApi();\n  return (\n    <button\n      type=\"button\"\n      onClick={() =>\n        formApi.setValue(\n          'name',\n          Math.floor(Math.random() * Math.floor(Number.MAX_SAFE_INTEGER))\n        )\n      }>\n      Random\n    </button>\n  );\n};\n\nconst UseFormApi = () => (\n  <Form>\n    <div>\n      <Input name=\"name\" label=\"Name:\" />\n      <button type=\"submit\">Submit</button>\n      <h5>Component using formApi:</h5>\n      <ComponentUsingFormApi />\n    </div>\n  </Form>\n);\n\nexport default withDocs(readme, UseFormApi);\n","export default \"# Use Form State\\n\\nThe `useFormState` hook will allow you to gain access to the formState.\\n\\n<!-- STORY -->\\n\\n```jsx\\nimport { Form, Input, useFormState } from 'informed';\\n\\nconst ComponentUsingFormState = () => {\\n  const formState = useFormState();\\n  return (\\n    <pre>\\n      <code>{JSON.stringify(formState, null, 2)}</code>\\n    </pre>\\n  );\\n};\\n\\n<Form>\\n  <Input name=\\\"name\\\" label=\\\"Name:\\\" />\\n  <button type=\\\"submit\\\">Submit</button>\\n  <h5>Component using formState:</h5>\\n  <ComponentUsingFormState />\\n</Form>;\\n```\\n\";","import React from 'react';\nimport withDocs from '../../utils/withDocs';\nimport readme from './README.md';\n\nimport { Form, Input, useFormState } from '../../../src';\n\nconst ComponentUsingFormState = () => {\n  const formState = useFormState();\n  return (\n    <pre>\n      <code>{JSON.stringify(formState, null, 2)}</code>\n    </pre>\n  );\n};\n\nconst UseFormState = () => (\n  <Form>\n    <Input name=\"name\" label=\"Name:\" />\n    <button type=\"submit\">Submit</button>\n    <h5>Component using formState:</h5>\n    <ComponentUsingFormState />\n  </Form>\n);\n\nexport default withDocs(readme, UseFormState);\n","export default \"# useFormStateSelector\\n\\n** Note: This feature is experimental and can still cause unnecessary re-renders on edge cases. **\\n\\nThis hook is all about preventing unnecessary re-renders in your React components.\\n\\n```jsx\\nconst someField = useFormStateSelector(formState => formState.values.someField);\\n\\nreturn someField; // re-renders when formState.values.someField is changed\\n```\\n\\nObserve in the following example that input1's state is only being rendered when it changes. If you change any of the other inputs it will not trigger a new render.\\n\\nThis is different than using `useFormState` which will ALWAYS trigger a re-render if any of the state changes.\\n\\n<!-- STORY -->\\n\\n```jsx\\nimport React, { useRef } from 'react';\\nimport { useFormStateSelector, get } from '@tesla/react-context-form';\\nimport { Form, Input } from '@tesla/react-context-form-tds';\\n\\nconst RenderFormState = () => {\\n  const input1 = useFormStateSelector(formState => formState.values.input1);\\n  const renderedRef = useRef([]);\\n\\n  renderedRef.current = [...renderedRef.current, input1];\\n\\n  return (\\n    <pre>\\n      {renderedRef.current.map(val => `input1 state is now: ${val}`).join('\\\\n')}\\n    </pre>\\n  );\\n};\\n\\nconst UseFormStateProxyExample = () => {\\n  return (\\n    <Form>\\n      <Input name=\\\"input1\\\" />\\n      <Input name=\\\"input2\\\" />\\n      <Input name=\\\"input3\\\" />\\n      <Input name=\\\"input4\\\" />\\n      <RenderFormState />\\n    </Form>\\n  );\\n};\\n```\\n\";","import React, { useRef, useState } from 'react';\nimport withDocs from '../../utils/withDocs';\nimport readme from './README.md';\n\nimport { Form, Input, useFormStateSelector } from '../../../src';\n\nconst RenderFormState = ({ selector }) => {\n  const input1 = useFormStateSelector(selector);\n  const renderedRef = useRef([]);\n\n  renderedRef.current = [...renderedRef.current, input1];\n\n  return (\n    <pre>\n      {renderedRef.current.map(val => `input1 state is now: ${val}`).join('\\n')}\n    </pre>\n  );\n};\n\nconst UseFormStateProxyExample = () => {\n  const [selector, setSelector] = useState(() => formState =>\n    formState.values.input1\n  );\n\n  const setDifferentSelector = () => {\n    setSelector(() => formState => formState.values.input2);\n  };\n\n  return (\n    <Form>\n      <Input name=\"input1\" />\n      <Input name=\"input2\" />\n      <Input name=\"input3\" />\n      <Input name=\"input4\" />\n      {/* <button type='button' onClick={setDifferentSelector}>set different selector</button> */}\n      <RenderFormState selector={selector} />\n    </Form>\n  );\n};\n\nexport default withDocs(readme, UseFormStateProxyExample);\n","export default \"# Checkbox Input\\n\\n<!-- STORY -->\\n\\n```jsx\\nimport { Form, Checkbox, Debug } from 'informed';\\n\\nconst CheckboxInput = () => (\\n  <Form>\\n    <Checkbox name=\\\"authorize\\\" label=\\\"Authorize\\\" />\\n    <button type=\\\"submit\\\">Submit</button>\\n    <Debug values />\\n  </Form>\\n);\\n```\\n\";","import React from 'react';\nimport withDocs from '../../utils/withDocs';\nimport readme from './README.md';\n\nimport { Form, Checkbox, Debug } from '../../../src';\n\nconst CheckboxInput = () => (\n  <Form>\n    <Checkbox name=\"authorize\" label=\"Authorize\" />\n    <button type=\"submit\">Submit</button>\n    <Debug values />\n  </Form>\n);\n\nexport default withDocs(readme, CheckboxInput);\n","export default \"# GoogleApi\\n\\nThis example shows how you can use informed's `gatherData` to make api calls via google api.\\n\\n<!-- STORY -->\\n\\n<!-- <details>\\n\\n<summary><strong>See CSS Used for above example ;)</strong></summary>\\n\\n```css\\n.address-option {\\n  width: 100%;\\n  background-color: #f4f4f4;\\n  padding: 10px 20px;\\n}\\n\\n.address-option:hover {\\n  background-color: #9d9c9c;\\n  cursor: pointer;\\n}\\n```\\n\\n</details> -->\\n\\n```jsx\\nimport { Form, Input, Debug, useFieldState } from 'informed';\\n\\n// First add this script tag to your app\\n// <script\\n//   type=\\\"text/javascript\\\"\\n//   src=\\\"https://maps.googleapis.com/maps/api/js?key=YOUR_KEY&language=en&libraries=places\\\"\\n// ></script>\\n\\nconst googleAutocomplete = async text =>\\n  new Promise((resolve, reject) => {\\n    if (!text) {\\n      return reject('Need valid text input');\\n    }\\n\\n    // for use in things like GatsbyJS where the html is generated first\\n    if (typeof window === 'undefined') {\\n      return reject('Need valid window object');\\n    }\\n\\n    try {\\n      new window.google.maps.places.AutocompleteService().getPlacePredictions(\\n        { input: text, componentRestrictions: { country: 'us' } },\\n        places => {\\n          if (places) {\\n            resolve(places.map(p => p.description));\\n          } else {\\n            resolve();\\n          }\\n        }\\n      );\\n    } catch (e) {\\n      reject(e);\\n    }\\n  });\\n\\nconst AddressSearch = () => {\\n  const { data } = useFieldState('address');\\n\\n  return (\\n    <>\\n      <Input\\n        list=\\\"addresses\\\"\\n        name=\\\"address\\\"\\n        label=\\\"Address:\\\"\\n        gatherData={googleAutocomplete}\\n      />\\n      {data && (\\n        <datalist id=\\\"addresses\\\">\\n          {data.map(p => {\\n            return <option key={p} value={p} />;\\n          })}\\n        </datalist>\\n      )}\\n    </>\\n  );\\n};\\n\\nconst InputExample = () => (\\n  <Form>\\n    <AddressSearch />\\n    <button type=\\\"submit\\\">Submit</button>\\n    <Debug values data gathering />\\n    <DebugField name=\\\"address\\\" gathering data value />\\n  </Form>\\n);\\n```\\n\";","import React, { useState } from 'react';\nimport withDocs from '../../utils/withDocs';\nimport readme from './README.md';\n\nimport { Form, Input, Debug, DebugField, useFieldState } from '../../../src';\n\nconst googleAutocomplete = async text =>\n  new Promise((resolve, reject) => {\n    // console.log('GATHER', text);\n\n    if (!text) {\n      return reject('Need valid text input');\n    }\n\n    // for use in things like GatsbyJS where the html is generated first\n    if (typeof window === 'undefined') {\n      return reject('Need valid window object');\n    }\n\n    try {\n      new window.google.maps.places.AutocompleteService().getPlacePredictions(\n        { input: text, componentRestrictions: { country: 'us' } },\n        places => {\n          if (places) {\n            resolve(places.map(p => p.description));\n          } else {\n            resolve();\n          }\n        }\n      );\n    } catch (e) {\n      reject(e);\n    }\n  });\n\nconst AddressSearch = () => {\n  const { data } = useFieldState('address');\n\n  return (\n    <>\n      <Input\n        list=\"addresses\"\n        name=\"address\"\n        label=\"Address:\"\n        // gatherOnMount\n        gatherData={googleAutocomplete}\n      />\n      {data && (\n        <datalist id=\"addresses\">\n          {data.map(p => {\n            return <option key={p} value={p} />;\n          })}\n        </datalist>\n      )}\n    </>\n  );\n};\n\nconst InputExample = () => {\n  // const [initialValues, setInitialValues] = useState();\n\n  return (\n    <Form autoComplete=\"off\">\n      <AddressSearch />\n      {/* <button\n        type=\"button\"\n        onClick={() =>\n          setInitialValues({\n            address: '111'\n          })\n        }>\n        Change\n      </button> */}\n      <button type=\"submit\">Submit</button>\n      <h3>Form State:</h3>\n      <Debug values data gathering />\n      <h3>Field State:</h3>\n      <DebugField name=\"address\" gathering data value />\n    </Form>\n  );\n};\n\nexport default withDocs(readme, InputExample);\n","export default \"# Intro\\n\\nInformed comes with some basic default inputs. All inputs are built utilizing the `useField` hook, and therefore have access to all the properties of an informed's field. This design allows you to define your very own Input types if the defaults don't suite your needs! For additional information on custom Inputs, see the custom input section. If you are just getting started, or don't care to create your own custom inputs, simply take a look at the included input types.\\n\\n## Input Props\\n\\nBelow are all the input props that `informed`'s inputs accept.\\n\\n| Name                | Type   | Required | Description                                                                                                                                                                                                                              |\\n| ------------------- | ------ | -------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\\n| name                | string | YES      | Every input must have a name. This is how the form manages the state of this input. See the field syntax section below for additional details on what you can pass in for field.                                                         |\\n| initialValue        | any    | NO       | An initial value for that field.                                                                                                                                                                                                         |\\n| defaultValue        | any    | NO       | A default value for that field.                                                                                                                                                                                                          |\\n| validate            | func   | NO       | Function that gets called when form performs validation. Function accepts the value as a parameter and must return either an error or undefined. By default it only gets called onSubmit. See Validation section for additional details. |\\n| validateOn          | bool   | NO       | Tells field when to perform validation. By default it only validates onBlur.                                                                                                                                                             |\\n| validateOnMount     | bool   | NO       | Tells field to perform validation onMount.                                                                                                                                                                                               |  |\\n| keep                | object | NO       | Keeps specified field state around even when the input itself is unmounted keep={{ value: true }}                                                                                                                                        |\\n| keepState           | bool   | NO       | Keeps the field state around even when the input itself is unmounted ( see dynamic form docs for example )                                                                                                                               |\\n| keepStateIfRelevant | bool   | NO       | Keeps the field state around even when the input itself is not mounted ( only if its also relevant )                                                                                                                                     |\\n| maintainCursor      | bool   | NO       | formatter and parser functions will sometimes cause the cursor position to get lost. By default we informed will maintain cursor position. You can toggle that off here.                                                                 |\\n| allowEmptyString    | bool   | NO       | Enable empty strings in the input value ( by default when you backspace everything in a text field it will remove the value )                                                                                                            |\\n| `<input>` props     | html-5 | NO       | All inputs can accept any props that a native html input, select, textarea, etc. can accept. For example, if you want to disable a text input, you would simply pass `disabled`.                                                         |\\n\\n## Field Syntax\\n\\nEvery input in `informed` needs an associated field name. In its simplest form, field names are just strings. However, sometimes you may have some complex forms that require special ways of organizing your fields, this is where the special syntax comes in.\\n\\nFields can be simple strings, strings that contain \\\".\\\", and strings that contain \\\"[ ]\\\", much like how you access and write to objects and arrays in javascript. Below are some examples of field names and what they resolve to in the forms values object.\\n\\n| Field                  | Resolution               |\\n| ---------------------- | ------------------------ |\\n| `\\\"username\\\"`           | `values.username`        |\\n| `\\\"friends[0]\\\"`         | `values.friends[0]`      |\\n| `\\\"siblings.1\\\"`         | `values.siblings[1]`     |\\n| `\\\"siblings['2']\\\"`      | `values.siblings[2]`     |\\n| `\\\"parents[0].name\\\"`    | `values.parents[0].name` |\\n| `\\\"parents[1]['name']\\\"` | `values.parents[1].name` |\\n\\n<!-- STORY -->\\n\\n```jsx\\nimport { Form, Input, Debug } from 'informed';\\n\\nconst Example = () => (\\n  <Form>\\n    <Input name=\\\"username\\\" label=\\\"Username:\\\" />\\n    <Input name=\\\"friends[0]\\\" label=\\\"Friend[0]\\\" />\\n    <Input name=\\\"siblings.1\\\" label=\\\"Siblings.1\\\" />\\n    <Input name=\\\"siblings['2']\\\" label=\\\"Siblings['2']\\\" />\\n    <Input name=\\\"parents[0].name\\\" label=\\\"Parents[0].name:\\\" />\\n    <button type=\\\"submit\\\">Submit</button>\\n    Values:\\n    <Debug values />\\n  </Form>\\n);\\n```\\n\";","import React from 'react';\nimport readme from './README.md';\nimport withDocs from '../../utils/withDocs';\n\nimport { Form, Input, Debug } from '../../../src';\n\nconst Intro = () => (\n  <Form>\n    <div>\n      <Input name=\"username\" label=\"Username:\" />\n      <Input name=\"friends[0]\" label=\"Friend[0]\" />\n      <Input name=\"siblings.1\" label=\"Siblings.1\" />\n      <Input name=\"siblings['2']\" label=\"Siblings['2']\" />\n      <Input name=\"parents[0].name\" label=\"Parents[0].name:\" />\n      <button type=\"submit\">Submit</button>\n      Values:\n      <Debug values />\n    </div>\n  </Form>\n);\n\nexport default withDocs(readme, Intro);\n","export default \"# MultiSelect Input\\n\\n<!-- STORY -->\\n\\n```jsx\\nimport { Form, Select, Option, Debug } from 'informed';\\n\\n<Form>\\n  <Select\\n    name=\\\"colors\\\"\\n    label=\\\"Colors:\\\"\\n    multiple\\n    style={{ height: '100px', width: '200px' }}>\\n    <Option value=\\\"red\\\">Red</Option>\\n    <Option value=\\\"green\\\">Green</Option>\\n    <Option value=\\\"blue\\\">Blue</Option>\\n    <Option value=\\\"yellow\\\">Yellow</Option>\\n    <Option value=\\\"orange\\\">Orange</Option>\\n    <Option value=\\\"purple\\\">Purple</Option>\\n  </Select>\\n  <button type=\\\"submit\\\">Submit</button>\\n  <Debug values />\\n</Form>;\\n```\\n\";","import React from 'react';\nimport withDocs from '../../utils/withDocs';\nimport readme from './README.md';\nimport Code from '../../utils/Code';\n\nimport { Form, Select, Option, useFormState, Debug } from '../../../src';\n\nconst FormState = () => {\n  const formState = useFormState();\n  return (\n    <Code language=\"language-js\">\n      {JSON.stringify(formState.values, null, 2)}\n    </Code>\n  );\n};\n\n// const options = ['red', 'green', 'blue', 'orange', 'purple'];\n\nconst MultiSelectInput = () => {\n  // const [ initialValue, setInitialValue ] = useState( ['green', 'yellow'] );\n\n  // const toggle = () => {\n  //   const color1 = options[ Math.floor(Math.random() * 5) ];\n  //   let color2 = options[ Math.floor(Math.random() * 5) ];\n  //   while( color1 === color2 ){\n  //     color2 = options[ Math.floor(Math.random() * 5) ];\n  //   }\n  //   setInitialValue( [ color1, color2 ] );\n  // };\n\n  return (\n    <Form>\n      <Select\n        // initialValue={initialValue}\n        name=\"colors\"\n        label=\"Colors:\"\n        multiple\n        style={{ height: '100px', width: '200px' }}>\n        <Option value=\"red\">Red</Option>\n        <Option value=\"green\">Green</Option>\n        <Option value=\"blue\">Blue</Option>\n        <Option value=\"yellow\">Yellow</Option>\n        <Option value=\"orange\">Orange</Option>\n        <Option value=\"purple\">Purple</Option>\n      </Select>\n\n      <button type=\"submit\">Submit</button>\n      {/* <button type=\"reset\">Reset</button>\n        <button type=\"toggle\" type=\"button\" onClick={toggle}>Toggle</button> */}\n      <Debug values />\n      {/* {JSON.stringify(initialValue)} */}\n    </Form>\n  );\n};\n\nconst MultiSelectInputWrapper = () => {\n  return <MultiSelectInput />;\n};\n\nexport default withDocs(readme, MultiSelectInputWrapper);\n","export default \"# Number Input\\n\\n<!-- STORY -->\\n\\n```jsx\\nimport { Form, Input, Debug } from 'informed';\\n\\nconst Number = () => (\\n  <Form>\\n    <Input name=\\\"age\\\" type=\\\"number\\\" label=\\\"Age:\\\" />\\n    <button type=\\\"submit\\\">Submit</button>\\n    <Debug values />\\n  </Form>\\n);\\n```\\n\";","import React from 'react';\nimport withDocs from '../../utils/withDocs';\nimport readme from './README.md';\n\nimport { Form, Input, Debug } from '../../../src';\n\nconst Number = () => (\n  <Form>\n    <Input name=\"age\" type=\"number\" label=\"Age:\" />\n    <button type=\"submit\">Submit</button>\n    <Debug values />\n  </Form>\n);\n\nexport default withDocs(readme, Number);\n","export default \"# Radio Input\\n\\n<!-- STORY -->\\n\\n```jsx\\nimport { Form, RadioGroup, Radio, Debug } from 'informed';\\n\\nconst RadioInput = () => (\\n  <Form>\\n    <RadioGroup name=\\\"gender\\\">\\n      <Radio value=\\\"male\\\" label=\\\"Male\\\" />\\n      <Radio value=\\\"female\\\" label=\\\"Female\\\" />\\n    </RadioGroup>\\n    <button type=\\\"submit\\\">Submit</button>\\n    <Debug values />\\n  </Form>\\n);\\n```\\n\";","import React from 'react';\nimport withDocs from '../../utils/withDocs';\nimport readme from './README.md';\n\nimport { Form, RadioGroup, Radio, Debug } from '../../../src';\n\nconst RadioInput = () => (\n  <Form>\n    <RadioGroup name=\"gender\">\n      <Radio value=\"male\" label=\"Male\" />\n      <Radio value=\"female\" label=\"Female\" />\n    </RadioGroup>\n    <button type=\"submit\">Submit</button>\n    <Debug values />\n  </Form>\n);\n\nexport default withDocs(readme, RadioInput);\n","export default \"# Select Input\\n\\n<!-- STORY -->\\n\\n```jsx\\nimport { Form, Select, Option, Debug } from 'informed';\\n\\nconst SelectInput = () => (\\n  <Form>\\n    <Select name=\\\"status\\\" label=\\\"Relationship status:\\\">\\n      <Option value=\\\"\\\" disabled>\\n        Select One...\\n      </Option>\\n      <Option value=\\\"single\\\">Single</Option>\\n      <Option value=\\\"relationship\\\">Relationship</Option>\\n      <Option value=\\\"complicated\\\">Complicated</Option>\\n    </Select>\\n    <button type=\\\"submit\\\">Submit</button>\\n    <Debug values />\\n  </Form>\\n);\\n```\\n\";","import React from 'react';\nimport withDocs from '../../utils/withDocs';\nimport readme from './README.md';\nimport Code from '../../utils/Code';\n\nimport { Form, Select, Option, Debug } from '../../../src';\n\nconst SelectInput = () => (\n  <Form>\n    <Select name=\"status\" label=\"Relationship status:\">\n      <Option value=\"\" disabled>\n        Select One...\n      </Option>\n      <Option value=\"single\">Single</Option>\n      <Option value=\"relationship\">Relationship</Option>\n      <Option value=\"complicated\">Complicated</Option>\n    </Select>\n    <button type=\"submit\">Submit</button>\n    <Debug values />\n  </Form>\n);\n\nexport default withDocs(readme, SelectInput);\n","export default \"# TextArea Input\\n\\n<!-- STORY -->\\n\\n```jsx\\nimport { Form, TextArea, Debug } from 'informed';\\n\\nconst TextAreaInput = () => (\\n  <Form>\\n    <TextArea name=\\\"bio\\\" label=\\\"Bio:\\\" />\\n    <button type=\\\"submit\\\">Submit</button>\\n    <Debug values />\\n  </Form>\\n);\\n```\\n\";","import React from 'react';\nimport withDocs from '../../utils/withDocs';\nimport readme from './README.md';\nimport Code from '../../utils/Code';\n\nimport { Form, TextArea, Debug } from '../../../src';\n\nconst TextAreaInput = () => (\n  <Form>\n    <TextArea name=\"bio\" label=\"Bio:\" />\n    <button type=\"submit\">Submit</button>\n    <Debug values />\n  </Form>\n);\n\nexport default withDocs(readme, TextAreaInput);\n","export default \"# Input\\n\\n<!-- STORY -->\\n\\n```jsx\\nimport { Form, Input, Debug } from 'informed';\\n\\nconst InputExample = () => (\\n  <Form>\\n    <Input name=\\\"name\\\" label=\\\"First name:\\\" />\\n    <button type=\\\"submit\\\">Submit</button>\\n    <Debug values />\\n  </Form>\\n);\\n```\\n\";","import React from 'react';\nimport withDocs from '../../utils/withDocs';\nimport readme from './README.md';\n\nimport { Form, Input, Debug } from '../../../src';\n\nconst InputExample = () => (\n  <Form>\n    <Input name=\"name\" label=\"First name:\" />\n    <button type=\"submit\">Submit</button>\n    <Debug values />\n  </Form>\n);\n\nexport default withDocs(readme, InputExample);\n","import TextInput from './TextInput';\nimport NumberInput from './NumberInput';\nimport TextAreaInput from './TextAreaInput';\nimport RadioInput from './RadioInput';\nimport CheckboxInput from './CheckboxInput';\nimport SelectInput from './SelectInput';\nimport MultiSelectInput from './MultiSelectInput';\nimport Intro from './Intro';\nimport GoogleApi from './GoogleApi';\n\nexport {\n  TextInput,\n  TextAreaInput,\n  RadioInput,\n  CheckboxInput,\n  SelectInput,\n  MultiSelectInput,\n  Intro,\n  NumberInput,\n  GoogleApi\n};\n","import withDocs from '../utils/withDocs';\nimport changelog from '../../CHANGELOG.md';\n\nexport default withDocs(changelog, () => null);\n","export default \"# Creating Your Own Fields\\n\\nBut what if you dont want the out of the box stuff??\\n\\nNo problem, see example below!\\n\\n```jsx\\nimport { useForm, useField, Relevant, FormState } from 'informed';\\n\\n// Step 1. Build your form component ---------------------\\n\\nconst Form = ({ children, ...rest }) => {\\n  const { formController, render, userProps } = useForm(rest);\\n\\n  return render(\\n    <form noValidate {...userProps} onSubmit={formController.submitForm}>\\n      {children}\\n    </form>\\n  );\\n};\\n\\n// Step 2. Build your input components --------------------\\n\\nconst Input = props => {\\n  const { render, informed, userProps, ref } = useField({\\n    type: 'text',\\n    ...props\\n  });\\n  const { label, id, ...rest } = userProps;\\n  return render(\\n    <>\\n      <label htmlFor={id}>{label}</label>\\n      <input id={id} ref={ref} {...informed} {...rest} />\\n    </>\\n  );\\n};\\n\\nconst Checkbox = props => {\\n  const { render, informed, userProps, ref } = useField({\\n    type: 'checkbox',\\n    ...props\\n  });\\n  const { label, id, ...rest } = userProps;\\n  return render(\\n    <>\\n      <label htmlFor={id}>{label}</label>\\n      <input id={id} ref={ref} {...informed} {...rest} />\\n    </>\\n  );\\n};\\n\\nconst ErrorInput = props => {\\n  const { render, informed, userProps, fieldState, ref } = useField({\\n    type: 'text',\\n    ...props\\n  });\\n  const { label, id, ...rest } = userProps;\\n  const { showError } = fieldState;\\n  const style = showError ? { border: 'solid 1px red' } : null;\\n  return render(\\n    <>\\n      <label htmlFor={id}>{label}</label>\\n      <input id={id} ref={ref} {...informed} {...rest} style={style} />\\n      {showError && <small style={{ color: 'red' }}>{fieldState.error}</small>}\\n    </>\\n  );\\n};\\n\\nconst Select = props => {\\n  const { render, informed, userProps, ref } = useField({\\n    type: 'select',\\n    ...props\\n  });\\n  const { label, id, children, ...rest } = userProps;\\n  return render(\\n    <>\\n      <label htmlFor={id}>{label}</label>\\n      <select id={id} ref={ref} {...informed} {...rest}>\\n        {children}\\n      </select>\\n    </>\\n  );\\n};\\n\\n// Step 3. Build your forms! ---------------------------\\n\\nconst onSubmit = ({ values }) => console.log(values);\\n\\nconst ExampleForm = () => (\\n  <Form onSubmit={onSubmit}>\\n    <Input name=\\\"name\\\" label=\\\"Name\\\" placeholder=\\\"Elon\\\" />\\n    <ErrorInput name=\\\"age\\\" type=\\\"number\\\" label=\\\"Age\\\" required=\\\"Age Required\\\" />\\n    <Input name=\\\"phone\\\" label=\\\"Phone\\\" formatter=\\\"+1 (###)-###-####\\\" />\\n    <Select name=\\\"car\\\" label=\\\"Car\\\" initialValue=\\\"ms\\\">\\n      <option value=\\\"ms\\\">Model S</option>\\n      <option value=\\\"m3\\\">Model 3</option>\\n      <option value=\\\"mx\\\">Model X</option>\\n      <option value=\\\"my\\\">Model Y</option>\\n    </Select>\\n    <Checkbox name=\\\"married\\\" label=\\\"Married?\\\" />\\n    <Relevant when={({ formState }) => formState.values.married}>\\n      <Input name=\\\"spouse\\\" label=\\\"Spouse\\\" />\\n    </Relevant>\\n    <button type=\\\"submit\\\">Submit</button>\\n    <Debug />\\n  </Form>\\n);\\n```\\n\\n<!-- STORY -->\\n\";","import React from 'react';\nimport Code from '../../utils/Code';\nimport withDocs from '../../utils/withDocs';\nimport readme from './README.md';\nimport { useField, useForm, Relevant, Debug } from '../../../src';\n\n// Step 1. Build your form component ---------------------\n\nconst Form = ({ children, ...rest }) => {\n  const { formController, render, userProps } = useForm(rest);\n\n  return render(\n    <form noValidate {...userProps} onSubmit={formController.submitForm}>\n      {children}\n    </form>\n  );\n};\n\n// Step 2. Build your input components --------------------\n\nconst Input = props => {\n  const { render, informed, userProps, ref } = useField({\n    type: 'text',\n    ...props\n  });\n  const { label, id, ...rest } = userProps;\n  return render(\n    <>\n      <label htmlFor={id}>{label}</label>\n      <input id={id} ref={ref} {...informed} {...rest} />\n    </>\n  );\n};\n\nconst Checkbox = props => {\n  const { render, informed, userProps, ref } = useField({\n    type: 'checkbox',\n    ...props\n  });\n  const { label, id, ...rest } = userProps;\n  return render(\n    <>\n      <label htmlFor={id}>{label}</label>\n      <input id={id} ref={ref} {...informed} {...rest} />\n    </>\n  );\n};\n\nconst ErrorInput = props => {\n  const { render, informed, userProps, fieldState, ref } = useField({\n    type: 'text',\n    ...props\n  });\n  const { label, id, ...rest } = userProps;\n  const { showError } = fieldState;\n  const style = showError ? { border: 'solid 1px red' } : null;\n  return render(\n    <>\n      <label htmlFor={id}>{label}</label>\n      <input id={id} ref={ref} {...informed} {...rest} style={style} />\n      {showError && <small style={{ color: 'red' }}>{fieldState.error}</small>}\n    </>\n  );\n};\n\nconst Select = props => {\n  const { render, informed, userProps, ref } = useField({\n    type: 'select',\n    ...props\n  });\n  const { label, id, children, ...rest } = userProps;\n  return render(\n    <>\n      <label htmlFor={id}>{label}</label>\n      <select id={id} ref={ref} {...informed} {...rest}>\n        {children}\n      </select>\n    </>\n  );\n};\n\nconst onSubmit = ({ values }) => console.log(values);\n\nconst GettingStarted = () => (\n  <Form onSubmit={onSubmit} autocomplete=\"off\">\n    <div style={{ display: 'flex' }}>\n      <div style={{ flex: '1' }}>\n        <Input field=\"name\" label=\"Name\" placeholder=\"Elon\" />\n        <ErrorInput\n          field=\"age\"\n          type=\"number\"\n          label=\"Age\"\n          required=\"Age Required\"\n        />\n        <Input field=\"phone\" label=\"Phone\" formatter=\"+1 (###)-###-####\" />\n        <Select field=\"car\" label=\"Car\" initialValue=\"ms\">\n          <option value=\"ms\">Model S</option>\n          <option value=\"m3\">Model 3</option>\n          <option value=\"mx\">Model X</option>\n          <option value=\"my\">Model Y</option>\n        </Select>\n        <Checkbox field=\"married\" label=\"Married: \" />\n        <Relevant when={({ formState }) => formState.values.married}>\n          <Input field=\"spouse\" label=\"Spouse\" />\n        </Relevant>\n        <button type=\"submit\">Submit</button>\n      </div>\n      <div style={{ flex: '1' }}>\n        <Debug />\n      </div>\n    </div>\n  </Form>\n);\n\nexport default withDocs(readme, GettingStarted);\n","export default \"You can also get access to `Informed`s form api via a ref as stated before:\\n\\n<!-- STORY -->\\n\\n```jsx\\nimport React, { useRef } from 'react';\\nimport { Form, Input } from 'informed';\\n\\nconst MyAwesomeForm = () => {\\n  const formApiRef = useRef();\\n\\n  const handleClick = () => {\\n    formApiRef.current.setValue(\\n      'name',\\n      Math.floor(Math.random() * Math.floor(Number.MAX_SAFE_INTEGER))\\n    );\\n  };\\n\\n  return (\\n    <div>\\n      <Form formApiRef={formApiRef}>\\n        <Input name=\\\"name\\\" label=\\\"First Name:\\\" />\\n        <button type=\\\"submit\\\">Submit</button>\\n      </Form>\\n      <button onClick={handleClick}>Random</button>\\n    </div>\\n  );\\n};\\n```\\n\\n<br />\\n\";","import React, { useRef } from 'react';\nimport withDocs from '../../../utils/withDocs';\nimport readme from './README.md';\nimport { Form, Input } from '../../../../src';\n\nconst MyAwesomeForm = () => {\n  const formApiRef = useRef();\n\n  const handleClick = () => {\n    formApiRef.current.setValue(\n      'name',\n      Math.floor(Math.random() * Math.floor(Number.MAX_SAFE_INTEGER))\n    );\n  };\n\n  return (\n    <div>\n      <Form formApiRef={formApiRef}>\n        <Input name=\"name\" label=\"First Name:\" />\n        <button type=\"submit\">Submit</button>\n      </Form>\n      <button onClick={handleClick}>Random</button>\n    </div>\n  );\n};\n\nexport default withDocs(readme, MyAwesomeForm);\n","export default \"You can also get access to `Informed`s form api via render a function as a child:\\n\\n<!-- STORY -->\\n\\n```jsx\\n<Form>\\n  {({ formApi }) => (\\n    <div>\\n      <Input name=\\\"name\\\" label=\\\"First Name:\\\" />\\n      <button\\n        type=\\\"button\\\"\\n        onClick={() =>\\n          formApi.setValue(\\n            'name',\\n            Math.floor(Math.random() * Math.floor(Number.MAX_SAFE_INTEGER))\\n          )\\n        }>\\n        Random\\n      </button>\\n      <button type=\\\"submit\\\">Submit</button>\\n    </div>\\n  )}\\n</Form>\\n```\\n\\n<br />\\n\";","import React from 'react';\nimport withDocs from '../../../utils/withDocs';\nimport readme from './README.md';\nimport { Form, Input } from '../../../../src';\n\nconst FormApi = () => (\n  <Form>\n    {({ formApi }) => (\n      <div>\n        <Input name=\"name\" label=\"First Name:\" />\n        <button\n          type=\"button\"\n          onClick={() =>\n            formApi.setValue(\n              'name',\n              Math.floor(Math.random() * Math.floor(Number.MAX_SAFE_INTEGER))\n            )\n          }>\n          Random\n        </button>\n        <button type=\"submit\">Submit</button>\n      </div>\n    )}\n  </Form>\n);\n\nexport default withDocs(readme, FormApi);\n","export default \"### Form Api ??\\n\\n**Yes what a beautiful segue into the formApi!**\\n\\nInformed also gives you access to a `formApi`. This api allows you to grab\\nand manipulate values using getters and setters. In the previous example, we\\nactually used a prop called `formApiRef` in order to getAccess to informed's api\\nexternally. Then we used the `getFormState` function to log out the state when\\nour external button was clicked.\\n\\nBelow is an example where you can access the formApi via hooks. Then use it\\nto change the value of the field when the random button is clicked!\\n\\n**Note: for a full list of the available functions within formApi go to the\\nformApi section of these docs**\\n\\n<!-- STORY -->\\n\\n```jsx\\nimport { Form, Input, useFormApi } from 'informed';\\n\\nconst RandomSetterButton = () => {\\n  const formApi = useFormApi();\\n  return (\\n    <button\\n      type=\\\"button\\\"\\n      onClick={() =>\\n        formApi.setValue(\\n          'name',\\n          Math.floor(Math.random() * Math.floor(Number.MAX_SAFE_INTEGER))\\n        )\\n      }>\\n      Random\\n    </button>\\n  );\\n};\\n\\n<Form>\\n  <Input name=\\\"name\\\" label=\\\"First Name:\\\" />\\n  <button type=\\\"submit\\\">Submit</button>\\n  <RandomSetterButton />\\n</Form>;\\n```\\n\\n<br />\\n\";","import React from 'react';\nimport withDocs from '../../../utils/withDocs';\nimport readme from './README.md';\nimport { Form, Input, useFormApi } from '../../../../src';\n\nconst RandomSetterButton = () => {\n  const formApi = useFormApi();\n  return (\n    <button\n      type=\"button\"\n      onClick={() =>\n        formApi.setValue(\n          'name',\n          Math.floor(Math.random() * Math.floor(Number.MAX_SAFE_INTEGER))\n        )\n      }>\n      Random\n    </button>\n  );\n};\n\nconst FormApi = () => (\n  <Form id=\"state-form\">\n    <div>\n      <Input name=\"name\" label=\"First Name:\" />\n      <RandomSetterButton />\n      <button type=\"submit\">Submit</button>\n    </div>\n  </Form>\n);\n\nexport default withDocs(readme, FormApi);\n","import React from 'react';\nimport ApiRef from './ApiRef';\nimport RenderProp from './RenderProp';\nimport UseFormApi from './UseFormApi';\n\nconst Intro = () => (\n  <div>\n    <UseFormApi />\n    <RenderProp />\n    <ApiRef />\n  </div>\n);\n\nexport default Intro;\n","export default \"## Form State\\n\\n**\\\"Ok so informed takes care of state so I dont have to.. but how do i get my hands\\non this 'awesome stuff'??\\\"**\\n\\nThats a great question! There are many ways so lets take a look at a few!\\n\\nBelow is a similar example, except this time, we show you how to access\\nthe form state and render out the values that are changing.\\n\\n**Note: for a full list of the available values within formState go to the\\nformState section of these docs**\\n\\n<!-- STORY -->\\n\\n```jsx\\nimport { Form, Input, useFormState, Debug } from 'informed';\\n\\nconst FormState = () => {\\n  const formState = useFormState();\\n\\n  return (\\n    <pre>\\n      <code>{JSON.stringify(formState, null, 2)}</code>\\n    </pre>\\n  );\\n};\\n\\nconst Example = () => {\\n  return (\\n    <Form>\\n      <Input name=\\\"name\\\" label=\\\"First Name\\\" />\\n      <button type=\\\"submit\\\">Submit</button>\\n      <Debug />\\n    </Form>\\n  );\\n};\\n```\\n\\n### Ok so what if i need the state outside of the `<Form />` ??\\n\\nDon't fret! This is also very simple. You have two options:\\n\\n1. Use the Forms `onChange` prop.\\n\\n```jsx\\n<Form onChange={formState => console.log(formState)}>\\n  <Input name=\\\"hello\\\" />\\n  <button type=\\\"submit\\\">Submit</button>\\n</Form>\\n```\\n\\n<br/>\\n2) Use the Forms `formApiRef` prop, and then use the apis `getFormState` function.\\n\\n```jsx\\nimport React, { useRef } from 'react';\\nimport { Form, Input } from 'informed';\\n\\nconst MyAwesomeForm = () => {\\n  const formApiRef = useRef();\\n\\n  const handleClick = () => {\\n    console.log(apiRef.current.getFormState());\\n  };\\n\\n  return (\\n    <div>\\n      <Form formApiRef={formApiRef}>\\n        <Input name=\\\"hello\\\" />\\n        <button type=\\\"submit\\\">Submit</button>\\n      </Form>\\n      <button onClick={handleClick}>Print Form State</button>\\n    </div>\\n  );\\n};\\n```\\n\\n<br />\\n\";","import React from 'react';\nimport withDocs from '../../utils/withDocs';\nimport readme from './README.md';\nimport { Form, Input, useFormState, Debug } from '../../../src';\n\nconst FormState = () => {\n  const formState = useFormState();\n\n  return (\n    <pre>\n      <code>{JSON.stringify(formState, null, 2)}</code>\n    </pre>\n  );\n};\n\nconst Example = () => {\n  return (\n    <Form>\n      <Input name=\"name\" label=\"First Name\" />\n      <button type=\"submit\">Submit</button>\n      <Debug />\n    </Form>\n  );\n};\n\nexport default withDocs(readme, Example);\n","export default \"## Having Fun\\n\\nAlright its time to have some fun! The code below is all you need to get\\nstarted. Go ahead and play around with the form below, check out the code\\nsnippet, and then you can read about what the heck is going on.\\n\\n**Hint:** type 2 or three characters and click submit and take a look at the state represented on the right.\\n\\n<!-- STORY -->\\n\\n```jsx\\nimport { Form, Input } from 'informed';\\n\\nconst validate = value => {\\n  if (!value || value.length < 5)\\n    return 'Field must be at least five characters';\\n};\\n\\nconst submit = ({ values }) =>\\n  window.alert(`Form successfully submitted with ${JSON.stringify(values)}`);\\n\\n<Form onSubmit={submit}>\\n  <Input name=\\\"name\\\" label=\\\"First name\\\" validate={validate} />\\n  <button type=\\\"submit\\\">Submit</button>\\n</Form>;\\n```\\n\\n### Explanation\\n\\n**Ok so what the Foo is going on?**\\n\\nIts actually pretty simple!\\n\\nInformed takes care of managing form state so you don't have to! Basically\\nit hooks up the native `onChange`, `onBlur`, and `onSubmit` functions and keeps track of\\nall sorts of stuff based on those changes. This example uses the `<Text>` and `<Form>` components\\nfrom informed, but under the hood they are literally just `<input>` and `<form>` dom elements.\\nSo you can pass anything down to them as usual! **For example:** `<Input field=\\\"name\\\" style={{color: 'green'}}>`\\n\\n<br/>\\n\";","import React from 'react';\nimport Code from '../../utils/Code';\nimport withDocs from '../../utils/withDocs';\nimport readme from './README.md';\nimport { Form, Input, Debug } from '../../../src';\n\nconst validate = value => {\n  if (!value || value.length < 5)\n    return 'Field must be at least five characters';\n};\n\nconst submit = ({ values }) =>\n  window.alert(`Form successfully submitted with ${JSON.stringify(values)}`);\n\nconst GettingStarted = () => (\n  <div>\n    <Form id=\"intro-form\" onSubmit={submit} autocomplete=\"off\">\n      <div style={{ display: 'flex', flexWrap: 'wrap' }}>\n        <div style={{ flex: 1, marginRight: '2rem' }}>\n          <Input name=\"name\" label=\"First name\" validate={validate} />\n          <button type=\"submit\">Submit</button>\n        </div>\n        <div\n          style={{\n            flex: 2,\n            flexDirection: 'column',\n            display: 'flex',\n            minWidth: '300px',\n            marginLeft: '3rem'\n          }}>\n          <Debug errors values />\n        </div>\n      </div>\n    </Form>\n  </div>\n);\n\nexport default withDocs(readme, GettingStarted);\n","export default \"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"554.349\\\" height=\\\"231.889\\\" viewBox=\\\"0 0 554.349 231.889\\\">\\n  <g id=\\\"Group_2\\\" data-name=\\\"Group 2\\\" transform=\\\"translate(-205.632 -671.078)\\\">\\n    <g id=\\\"Group_5\\\" data-name=\\\"Group 5\\\" transform=\\\"translate(206.591 672.034)\\\">\\n      <g id=\\\"Group_2-2\\\" data-name=\\\"Group 2\\\" transform=\\\"translate(215.224 0.047)\\\">\\n        <path id=\\\"Fill-1\\\" class=\\\"cls-1\\\" d=\\\"M27.812,43.49l50.737,4.193,11.512.455L83.646,57.2l-53.9,3.6S4.7,57.4,9.233,44.982c0,0,3-7.147,18.58-1.492\\\"/>\\n        <path id=\\\"Fill-3\\\" class=\\\"cls-2\\\" d=\\\"M26.418,50.459l50.737,4.193,11.512.455-6.415,9.057-53.9,3.608s-25.044-3.4-20.513-15.82c0,0,3-7.147,18.58-1.492\\\"/>\\n        <path id=\\\"Fill-5\\\" class=\\\"cls-1\\\" d=\\\"M41.38,16.641A20.477,20.477,0,1,1,31.839,3.393,20.477,20.477,0,0,1,41.38,16.641\\\"/>\\n        <path id=\\\"Fill-7\\\" class=\\\"cls-2\\\" d=\\\"M30.368,31.519A20.475,20.475,0,0,1,5.916,7.624,20.466,20.466,0,1,0,41.661,24.691a20.359,20.359,0,0,1-11.293,6.828\\\"/>\\n        <path id=\\\"Stroke-9\\\" class=\\\"cls-3\\\" d=\\\"M41.38,16.641A20.477,20.477,0,1,1,31.839,3.393,20.477,20.477,0,0,1,41.38,16.641Z\\\"/>\\n        <path id=\\\"Stroke-11\\\" class=\\\"cls-3\\\" d=\\\"M26.418,43.49l50.737,4.193,11.512.455L82.252,57.2l-53.9,3.6S3.308,57.4,7.839,44.982C7.839,44.982,10.839,37.835,26.418,43.49Z\\\"/>\\n        <path id=\\\"Fill-13\\\" class=\\\"cls-1\\\" d=\\\"M97.961,57.447a11.3,11.3,0,1,0-22.606.418Z\\\"/>\\n        <path id=\\\"Stroke-15\\\" class=\\\"cls-3\\\" d=\\\"M97.961,57.447a11.3,11.3,0,1,0-22.606.418Z\\\"/>\\n        <path id=\\\"Fill-17\\\" class=\\\"cls-4\\\" d=\\\"M35.847,6.319,15.959,15.612s-.855,3.486.558,3.16c2.417-.558,20.667,11.986,20.63,14.868,0,0,11.338-14.311-1.3-27.321\\\"/>\\n        <path id=\\\"Stroke-19\\\" class=\\\"cls-3\\\" d=\\\"M5.763,32.671l10.545-2.555L34.34,35.928\\\"/>\\n        <path id=\\\"Stroke-21\\\" class=\\\"cls-5\\\" d=\\\"M1.438,24.66l10.07-2.189\\\"/>\\n        <path id=\\\"Fill-23\\\" class=\\\"cls-4\\\" d=\\\"M30.456,45.442s-1.7,5.042-.836,6.412c1.38,2.206,8.056,2.684,10.315,1.394C41.645,52.274,43,46,43,46Z\\\"/>\\n        <path id=\\\"Fill-25\\\" class=\\\"cls-4\\\" d=\\\"M60.565,47.673l2.788,3.067,12.545.836-.836,3.067L61.68,53.806l-5.3-6.133Z\\\"/>\\n      </g>\\n      <g id=\\\"Group_3\\\" data-name=\\\"Group 3\\\" transform=\\\"translate(0 10.083)\\\">\\n        <path id=\\\"Fill-28\\\" class=\\\"cls-6\\\" d=\\\"M344.371,48.509s-27.879-26.764-35.127-33.455,0-14.5,0-14.5L406.262,44.6l-61.891,3.717\\\"/>\\n        <path id=\\\"Fill-30\\\" class=\\\"cls-7\\\" d=\\\"M361.891,32.711S338.287,21,328.437,15.24C319.922,10.26,307.758.929,307.758.929l97.018,44.048-35.264-9.665Z\\\"/>\\n        <path id=\\\"Fill-32\\\" class=\\\"cls-8\\\" d=\\\"M77.665,30.481,19.3,28.994S2.02,30.11,13.171,42.934c0,0-11.152,1.673-6.691,17.285,0,0-17.236,1.858,4.51,63.191,0,0,1.879,2.81,3.211,3.145,5.377,1.354,19.24,4.786,22.389,5.034,7.111.558,106.5,5.576,106.5,5.576l244.776-3.345,107.1-.558s32.86-.177,40.1-5.576c7.547-5.63,16.17-34.012,16.17-34.012s5.576-26.764-85.309-45.164c0,0-51.855-8.921-78.061-11.709l16.727,7.806L347.141,48.23l-4.443.28H247.911s-25.648-1.673-45.164-40.145L41.236,36.986\\\"/>\\n        <path id=\\\"Fill-34\\\" class=\\\"cls-9\\\" d=\\\"M144.045,137.043a56.91,56.91,0,1,0-111.33-6.99Z\\\"/>\\n        <path id=\\\"Fill-36\\\" class=\\\"cls-9\\\" d=\\\"M508.571,132.267a56.894,56.894,0,1,0-110.681,2.078Z\\\"/>\\n        <path id=\\\"Fill-38\\\" class=\\\"cls-10\\\" d=\\\"M69.292,42.664,197.055,20.073c19.932,39.3,46.13,41.005,46.13,41.005H340l4.539-.287,58.678-3.7s46-.278,63.123,2.012c55.016,7.352,78.629,27.308,84.537,36.807.226-.713.352-1.122.352-1.122S556.8,68.024,465.92,49.624c0,0-51.855-8.921-78.061-11.709l16.727,7.806-57.449,3.623-4.442.28H247.912s-25.648-1.673-45.164-40.145L41.237,38.1l36.429-6.5-58.36-1.491s-12.77-.084-6.457,10.036Z\\\"/>\\n        <path id=\\\"Stroke-40\\\" class=\\\"cls-3\\\" d=\\\"M78.223,30.481,19.863,29S2.577,30.11,13.729,42.934c0,0-11.152,1.673-6.691,17.285,0,0-17.236,1.858,4.51,63.191,0,0,1.879,2.81,3.211,3.145,5.377,1.354,19.24,4.786,22.389,5.034,7.111.558,106.5,5.576,106.5,5.576l244.776-3.345,107.1-.558s32.86-.177,40.1-5.576c7.547-5.63,16.17-34.012,16.17-34.012S557.365,66.91,466.48,48.51c0,0-51.855-8.921-78.061-11.709l16.727,7.806L347.7,48.23l-4.443.28H248.468S222.82,46.837,203.3,8.364L41.794,36.986\\\"/>\\n        <path id=\\\"Stroke-42\\\" class=\\\"cls-3\\\" d=\\\"M343.256,48.509s-27.879-26.764-35.127-33.455,0-14.5,0-14.5L405.147,44.6l-61.891,3.717\\\"/>\\n        <path id=\\\"Fill-44\\\" class=\\\"cls-4\\\" d=\\\"M308.129.558,309.8,9.9l43.909,37.636-10.455.79L308.129,15.055s-6.318-5.947,0-14.5\\\"/>\\n        <path id=\\\"Fill-46\\\" class=\\\"cls-8\\\" d=\\\"M320.3,33.594s-2.927,12.267,5.855,17.145,13.8-8.921,13.8-8.921-.418-8.5-19.655-8.224\\\"/>\\n        <path id=\\\"Fill-48\\\" class=\\\"cls-9\\\" d=\\\"M319.655,35.731s3.8-2.6,9.432,5.715c6.226,9.2,11.43,2.88,11.43,2.88s-1.952-14.4-20.862-8.6\\\"/>\\n        <path id=\\\"Stroke-50\\\" class=\\\"cls-11\\\" d=\\\"M320.953,33.733S318.026,46,326.808,50.879s13.8-8.921,13.8-8.921S340.19,33.455,320.953,33.733Z\\\"/>\\n        <g id=\\\"Group-55\\\" transform=\\\"translate(133.818 113.745)\\\">\\n          <path id=\\\"Fill-52\\\" class=\\\"cls-1\\\" d=\\\"M274.953,1.673.162.558\\\"/>\\n          <path id=\\\"Stroke-54\\\" class=\\\"cls-3\\\" d=\\\"M274.953,1.673.162.558\\\"/>\\n        </g>\\n        <path id=\\\"Stroke-56\\\" class=\\\"cls-5\\\" d=\\\"M361.656,47.394s17.842,26.224-5.018,67.838\\\"/>\\n        <path id=\\\"Stroke-58\\\" class=\\\"cls-12\\\" d=\\\"M27.668,55.758s35.87,25.277,43.863,25.277\\\"/>\\n        <path id=\\\"Stroke-60\\\" class=\\\"cls-5\\\" d=\\\"M157.584,15.612,147.171,38.2l-19.089-.664s-26.609,27.9-24.873,40.525\\\"/>\\n        <path id=\\\"Fill-62\\\" class=\\\"cls-4\\\" d=\\\"M7.038,60.218l3.9,4.461L27.111,55.2s1.673-7.806-13.382-12.267c0,0-11.337,3.159-6.691,17.285\\\"/>\\n        <path id=\\\"Stroke-64\\\" class=\\\"cls-3\\\" d=\\\"M7.038,60.218l3.9,4.461L27.111,55.2s1.673-7.806-13.382-12.267C13.729,42.933,2.392,46.093,7.038,60.218Z\\\"/>\\n        <path id=\\\"Stroke-66\\\" class=\\\"cls-5\\\" d=\\\"M188.25,11.709s9.479,34.012,2.23,36.8,26.764,66.352,26.764,66.352\\\"/>\\n        <path id=\\\"Stroke-68\\\" class=\\\"cls-5\\\" d=\\\"M482.65,88.1l34.942-23.79\\\"/>\\n        <path id=\\\"Stroke-70\\\" class=\\\"cls-5\\\" d=\\\"M179.318,34.75a7.429,7.429,0,1,1-7.429-7.429,7.429,7.429,0,0,1,7.429,7.429Z\\\"/>\\n      </g>\\n      <!------------------------------------------------- Wheel1 ------------------------------------------------->\\n      <g transform=\\\"translate(39.03 80.338)\\\">\\n        <g transform=\\\"translate(50.00 54.0)\\\">\\n          <g id=\\\"Circleelement\\\">\\n            <g transform=\\\"translate(-50.00 -54.0)\\\">\\n              <path id=\\\"Fill-73\\\" class=\\\"cls-13\\\" d=\\\"M93.775,54.234A44.065,44.065,0,1,1,49.71,10.168,44.065,44.065,0,0,1,93.775,54.234\\\"/>\\n              <path id=\\\"Fill-75\\\" class=\\\"cls-4\\\" d=\\\"M50.469,89.714H49.414a34.789,34.789,0,0,1-10.033-1.4,2.454,2.454,0,0,1-1.915-3.484c.761-2.6,1.693-5.373,2.944-8.685a53.247,53.247,0,0,1,3.116-6.918,13.824,13.824,0,0,1,1.717-2.453,2.919,2.919,0,0,1,2.674-.981,11.237,11.237,0,0,0,2.208,0,2.77,2.77,0,0,1,2.7,1.374,11.554,11.554,0,0,1,1.473,3.9,57.514,57.514,0,0,1,.98,6.451c.245,2.209.418,4.613.589,7.361V85.2a15.139,15.139,0,0,1,0,2.11A2.231,2.231,0,0,1,54,89.346a19.957,19.957,0,0,1-2.6.27Z\\\"/>\\n              <path id=\\\"Fill-77\\\" class=\\\"cls-4\\\" d=\\\"M62.957,86.869a2.136,2.136,0,0,1-2.012-1.449c-.393-.956-.711-1.937-1.032-2.943l-.318-.932c-.957-2.895-1.963-5.742-2.969-8.588l-1.2-3.386c-.343-1-.613-1.937-.834-2.845a2.563,2.563,0,0,1,4-2.454,12.045,12.045,0,0,1,1.693,1.619c1.865,2.037,3.533,4.221,5.152,6.33,2.11,2.748,3.7,4.908,5.177,6.993a5.7,5.7,0,0,1,.515.808,2.515,2.515,0,0,1,.368.492l.123.49a2.256,2.256,0,0,1-.883,1.938A20.153,20.153,0,0,1,68.6,84.39a31.353,31.353,0,0,1-3.95,2.11,4.253,4.253,0,0,1-.662.245,2.63,2.63,0,0,1-1.007.123Z\\\"/>\\n              <path id=\\\"Fill-79\\\" class=\\\"cls-4\\\" d=\\\"M29.321,83.115a3.164,3.164,0,0,1-1.815-.762A33.386,33.386,0,0,1,22.6,77.914a2.7,2.7,0,0,1-.908-2.111,2.623,2.623,0,0,1,1.3-1.912c1.129-.859,2.257-1.718,3.41-2.454,2.012-1.471,3.8-2.845,5.618-4.219l3.827-2.9A22.483,22.483,0,0,1,38.5,62.555a2.862,2.862,0,0,1,1.1-.44,2.626,2.626,0,0,1,2.183,1.153,2.452,2.452,0,0,1,.27,2.527,22.325,22.325,0,0,1-1.84,3.337c-2.085,3.287-4.244,6.33-6.845,9.985l-.221.294q-.907,1.325-1.914,2.575a2.648,2.648,0,0,1-1.914,1.13\\\"/>\\n              <path id=\\\"Fill-81\\\" class=\\\"cls-4\\\" d=\\\"M77.431,75.215a3.113,3.113,0,0,1-1.693-.638c-2.453-1.668-4.907-3.484-6.82-5.054a65.292,65.292,0,0,1-5.592-4.907A16.409,16.409,0,0,1,60.871,61.6a2.87,2.87,0,0,1-.146-2.87,13.888,13.888,0,0,0,.785-2.16,2.747,2.747,0,0,1,2.06-2.06,9.842,9.842,0,0,1,3.018-.222,37.675,37.675,0,0,1,5.765.737c3.386.661,6.895,1.472,10.4,2.453a5.314,5.314,0,0,1,.81.293,2.259,2.259,0,0,1,1.547,2.773c-.2,1.006-.443,1.987-.713,2.943a36.357,36.357,0,0,1-4.906,10.354,2.456,2.456,0,0,1-2.062,1.374\\\"/>\\n              <path id=\\\"Fill-83\\\" class=\\\"cls-14\\\" d=\\\"M83.221,60.2l-1.791-.417,1.791.368-1.791-.368Z\\\"/>\\n              <path id=\\\"Fill-85\\\" class=\\\"cls-4\\\" d=\\\"M18.576,70.014a2.134,2.134,0,0,1-1.987-1.251c-.417-.811-.736-1.644-1.079-2.453a37.066,37.066,0,0,1-1.938-7.36,34.345,34.345,0,0,1-.393-4.662,2.257,2.257,0,0,1,2.052-2.444c.051,0,.1-.008.156-.008a33.14,33.14,0,0,1,3.459,0H21.03c2.035,0,4.342.123,6.6.318a32.538,32.538,0,0,1,5.985.86,11.907,11.907,0,0,1,1.915.687,2.845,2.845,0,0,1,1.717,2.11,12.388,12.388,0,0,0,.686,2.453,2.67,2.67,0,0,1-.514,2.624A10.723,10.723,0,0,1,34.7,63.342a58.8,58.8,0,0,1-6.452,3.238c-3.362,1.349-5.814,2.38-8.268,3.263l-.492.147a3.229,3.229,0,0,1-.883.123Z\\\"/>\\n              <path id=\\\"Fill-87\\\" class=\\\"cls-14\\\" d=\\\"M18.576,66.358,19.337,68l-.59-1.645Z\\\"/>\\n              <path id=\\\"Fill-89\\\" class=\\\"cls-14\\\" d=\\\"M19.95,67.094Z\\\"/>\\n              <path id=\\\"Fill-91\\\" class=\\\"cls-4\\\" d=\\\"M65.336,52.791H63.668a2.453,2.453,0,0,1-1.178-4.71,20.867,20.867,0,0,1,3.337-1.644c4.146-1.667,8.637-3.238,14.72-5.1a7.143,7.143,0,0,1,.785-.222,2.26,2.26,0,0,1,2.8,1.5c.318.981.588,1.963.808,2.969a35.016,35.016,0,0,1,.687,4.146,2.282,2.282,0,0,1-2.428,2.8h-6.65l-10.525.27Z\\\"/>\\n              <path id=\\\"Fill-93\\\" class=\\\"cls-4\\\" d=\\\"M35.823,50.387a18.963,18.963,0,0,1-3.067-.588c-5.446-1.375-10.8-3.067-15.407-4.589a8.25,8.25,0,0,1-.981-.391,2.111,2.111,0,0,1-1.338-2.667.952.952,0,0,1,.038-.1A22.1,22.1,0,0,1,16,39.592,39.216,39.216,0,0,1,18.11,35.4a2.233,2.233,0,0,1,3.389-.86c.859.54,1.668,1.13,2.453,1.717l.736.54c2.012,1.424,4.023,2.846,6.06,4.244l4.465,3.092a19.58,19.58,0,0,1,2.453,1.962,2.575,2.575,0,0,1-1.84,4.367Z\\\"/>\\n              <path id=\\\"Fill-95\\\" class=\\\"cls-14\\\" d=\\\"M16.81,42.61l1.742.589Z\\\"/>\\n              <path id=\\\"Fill-97\\\" class=\\\"cls-4\\\" d=\\\"M59.841,45.383a2.6,2.6,0,0,1-1.791-.736A13.717,13.717,0,0,0,56.063,43.1a2.823,2.823,0,0,1-1.251-2.6,12.234,12.234,0,0,1,.981-3.754A58.68,58.68,0,0,1,59.4,29.828c1.4-2.453,2.7-4.491,4.023-6.452a8.079,8.079,0,0,1,.54-.761,2.281,2.281,0,0,1,3.067-.762,38.019,38.019,0,0,1,5.4,3.657,36.428,36.428,0,0,1,5.913,6.084,2.182,2.182,0,0,1-.188,3.081,1.653,1.653,0,0,1-.13.108,22.453,22.453,0,0,1-2.282,1.742l-.417.319A110.811,110.811,0,0,1,65.7,43.125a22.811,22.811,0,0,1-4.391,2.011l-.761.173h-.515Z\\\"/>\\n              <path id=\\\"Fill-99\\\" class=\\\"cls-4\\\" d=\\\"M39.847,44.67a3.244,3.244,0,0,1-1.179-.245,11.676,11.676,0,0,1-2.453-1.57,42.669,42.669,0,0,1-3.973-3.631c-2.331-2.453-4.686-5.175-7.213-8.317a5.8,5.8,0,0,1-.466-.638l-.172-.245a2.181,2.181,0,0,1,.49-2.992,36.746,36.746,0,0,1,8.071-5.667,37.562,37.562,0,0,1,4.761-2.037,2.159,2.159,0,0,1,2.821,1.166l.025.06a16.047,16.047,0,0,1,.785,2.134,111.417,111.417,0,0,1,3.165,11.581,24,24,0,0,1,.638,4.906v1.277a2.724,2.724,0,0,1-1.423,2.109,15.33,15.33,0,0,0-2.11,1.447,2.721,2.721,0,0,1-1.766.662\\\"/>\\n              <path id=\\\"Fill-101\\\" class=\\\"cls-4\\\" d=\\\"M50.714,41.384h-.269a2.452,2.452,0,0,1-2.282-1.889,22.659,22.659,0,0,1-.467-3.509c-.2-2.65-.269-5.274-.318-8.07v-7.8a5.882,5.882,0,0,1,0-.687,2.11,2.11,0,0,1,2.158-2.037,34.888,34.888,0,0,1,3.95.246,35.9,35.9,0,0,1,3.608.588,2.451,2.451,0,0,1,1.643.958,2.258,2.258,0,0,1,.222,1.79c-.2.811-.466,1.619-.711,2.454l-.2.563c-1.129,3.509-2.183,7.042-3.237,10.6L54.149,36.8a27.178,27.178,0,0,1-1.1,3.165,2.454,2.454,0,0,1-2.258,1.423Z\\\"/>\\n              <path id=\\\"Fill-103\\\" class=\\\"cls-15\\\" d=\\\"M49.414,86.034h2.8v-.86c-.148-2.673-.345-4.906-.564-7.163a57.925,57.925,0,0,0-.909-6.035,11.049,11.049,0,0,0-.785-2.454,15.835,15.835,0,0,1-2.158,0,8.592,8.592,0,0,0-1.007,1.522,47.992,47.992,0,0,0-2.845,6.427c-1.105,2.872-1.939,5.3-2.626,7.581a30.368,30.368,0,0,0,8.1.982\\\"/>\\n              <path id=\\\"Fill-105\\\" class=\\\"cls-15\\\" d=\\\"M59.767,70.7l.319.907c1.03,2.895,2.036,5.765,3.018,8.661l.319.981c.147.49.294.956.466,1.447.859-.443,1.766-.932,2.7-1.521l.761-.466c-1.374-1.914-2.869-3.925-4.907-6.477-.761-1.081-1.717-2.332-2.674-3.533\\\"/>\\n              <path id=\\\"Fill-107\\\" class=\\\"cls-15\\\" d=\\\"M26.083,76.2A33.615,33.615,0,0,0,29,78.869l1.251-1.717.221-.318c2.159-2.993,4-5.594,5.716-8.219L34.3,70.038c-1.815,1.4-3.654,2.772-5.5,4.146Z\\\"/>\\n              <path id=\\\"Fill-109\\\" class=\\\"cls-15\\\" d=\\\"M64.134,60.053a12.148,12.148,0,0,0,1.742,2.036,63.623,63.623,0,0,0,5.275,4.539c1.815,1.424,3.754,2.921,5.814,4.342a32.223,32.223,0,0,0,3.8-8.487,15.062,15.062,0,0,0,.417-1.6C77.945,60,74.73,59.239,71.589,58.65a35.667,35.667,0,0,0-5.2-.686,5.885,5.885,0,0,0-1.521,0,18.336,18.336,0,0,1-.736,2.084\\\"/>\\n              <path id=\\\"Fill-111\\\" class=\\\"cls-15\\\" d=\\\"M16.932,55.466a25.5,25.5,0,0,0,.319,2.969,33.543,33.543,0,0,0,1.717,6.6l.443,1.054c2.134-.808,4.439-1.741,7.359-2.992a55.023,55.023,0,0,0,6.011-3.018,9.871,9.871,0,0,0,1.6-1.178,16.161,16.161,0,0,1-.59-2.062l-1.03-.342a32.165,32.165,0,0,0-5.422-.736c-2.183-.173-4.416-.245-6.353-.294Z\\\"/>\\n              <path id=\\\"Fill-113\\\" class=\\\"cls-15\\\" d=\\\"M80.915,44.989c-4.636,1.472-8.366,2.748-11.751,4.048l7.237-.2h5.348c-.147-.858-.294-1.668-.466-2.453s-.245-.957-.368-1.4\\\"/>\\n              <path id=\\\"Fill-115\\\" class=\\\"cls-15\\\" d=\\\"M19.017,41.923c3.631,1.179,7.729,2.453,11.923,3.631l-2.257-1.569c-2.061-1.424-4.1-2.822-6.133-4.269l-.761-.564-1.127-.811a25.38,25.38,0,0,0-1.251,2.626c-.147.293-.271.637-.394.956\\\"/>\\n              <path id=\\\"Fill-117\\\" class=\\\"cls-15\\\" d=\\\"M58.541,40.328a14.1,14.1,0,0,1,1.644,1.3,18.1,18.1,0,0,0,3.63-1.668,108.514,108.514,0,0,0,9.373-6.06l.417-.319,1.006-.711A33.888,33.888,0,0,0,70.1,28.405a34.279,34.279,0,0,0-3.8-2.674c-1.2,1.84-2.453,3.8-3.73,6.011a53.391,53.391,0,0,0-3.335,6.427,8.338,8.338,0,0,0-.687,2.16\\\"/>\\n              <path id=\\\"Fill-119\\\" class=\\\"cls-15\\\" d=\\\"M28.168,28.994c2.453,2.919,4.588,5.471,6.771,7.777A41.162,41.162,0,0,0,38.4,40.058a9.817,9.817,0,0,0,1.276.859,19.779,19.779,0,0,1,1.742-1.178.912.912,0,0,1,0-.27,19.346,19.346,0,0,0-.564-4.367,103.606,103.606,0,0,0-3.067-11.015,5.18,5.18,0,0,0-.245-.736A30.145,30.145,0,0,0,34.5,24.725a32.244,32.244,0,0,0-6.33,4.269\\\"/>\\n              <path id=\\\"Fill-121\\\" class=\\\"cls-15\\\" d=\\\"M51.009,21.069v6.673c0,1.963,0,3.827.171,5.644,1.056-3.558,2.111-7.116,3.264-10.649l.171-.588a2.861,2.861,0,0,1,.246-.736l-1.791-.245a19.769,19.769,0,0,0-1.988-.1Z\\\"/>\\n              <path id=\\\"Fill-123\\\" class=\\\"cls-4\\\" d=\\\"M49.414,4.461A49.067,49.067,0,1,0,98.48,53.527,49.067,49.067,0,0,0,49.414,4.461m0,7.36A41.707,41.707,0,1,1,7.708,53.527,41.707,41.707,0,0,1,49.414,11.821\\\"/>\\n              <path id=\\\"Fill-125\\\" class=\\\"cls-14\\\" d=\\\"M49.414,49.847a3.68,3.68,0,1,1-3.68,3.68,3.68,3.68,0,0,1,3.68-3.68\\\"/>\\n            </g>\\n          </g>\\n        </g>\\n      </g>\\n      <!------------------------------------------------- Wheel2 ------------------------------------------------->\\n      <g transform=\\\"translate(404.03 80.338)\\\">\\n        <g transform=\\\"translate(50.00 54.0)\\\">\\n          <g id=\\\"Circleelement\\\">\\n            <g transform=\\\"translate(-50.00 -54.0)\\\">\\n              <path id=\\\"Fill-73\\\" class=\\\"cls-13\\\" d=\\\"M93.775,54.234A44.065,44.065,0,1,1,49.71,10.168,44.065,44.065,0,0,1,93.775,54.234\\\"/>\\n              <path id=\\\"Fill-75\\\" class=\\\"cls-4\\\" d=\\\"M50.469,89.714H49.414a34.789,34.789,0,0,1-10.033-1.4,2.454,2.454,0,0,1-1.915-3.484c.761-2.6,1.693-5.373,2.944-8.685a53.247,53.247,0,0,1,3.116-6.918,13.824,13.824,0,0,1,1.717-2.453,2.919,2.919,0,0,1,2.674-.981,11.237,11.237,0,0,0,2.208,0,2.77,2.77,0,0,1,2.7,1.374,11.554,11.554,0,0,1,1.473,3.9,57.514,57.514,0,0,1,.98,6.451c.245,2.209.418,4.613.589,7.361V85.2a15.139,15.139,0,0,1,0,2.11A2.231,2.231,0,0,1,54,89.346a19.957,19.957,0,0,1-2.6.27Z\\\"/>\\n              <path id=\\\"Fill-77\\\" class=\\\"cls-4\\\" d=\\\"M62.957,86.869a2.136,2.136,0,0,1-2.012-1.449c-.393-.956-.711-1.937-1.032-2.943l-.318-.932c-.957-2.895-1.963-5.742-2.969-8.588l-1.2-3.386c-.343-1-.613-1.937-.834-2.845a2.563,2.563,0,0,1,4-2.454,12.045,12.045,0,0,1,1.693,1.619c1.865,2.037,3.533,4.221,5.152,6.33,2.11,2.748,3.7,4.908,5.177,6.993a5.7,5.7,0,0,1,.515.808,2.515,2.515,0,0,1,.368.492l.123.49a2.256,2.256,0,0,1-.883,1.938A20.153,20.153,0,0,1,68.6,84.39a31.353,31.353,0,0,1-3.95,2.11,4.253,4.253,0,0,1-.662.245,2.63,2.63,0,0,1-1.007.123Z\\\"/>\\n              <path id=\\\"Fill-79\\\" class=\\\"cls-4\\\" d=\\\"M29.321,83.115a3.164,3.164,0,0,1-1.815-.762A33.386,33.386,0,0,1,22.6,77.914a2.7,2.7,0,0,1-.908-2.111,2.623,2.623,0,0,1,1.3-1.912c1.129-.859,2.257-1.718,3.41-2.454,2.012-1.471,3.8-2.845,5.618-4.219l3.827-2.9A22.483,22.483,0,0,1,38.5,62.555a2.862,2.862,0,0,1,1.1-.44,2.626,2.626,0,0,1,2.183,1.153,2.452,2.452,0,0,1,.27,2.527,22.325,22.325,0,0,1-1.84,3.337c-2.085,3.287-4.244,6.33-6.845,9.985l-.221.294q-.907,1.325-1.914,2.575a2.648,2.648,0,0,1-1.914,1.13\\\"/>\\n              <path id=\\\"Fill-81\\\" class=\\\"cls-4\\\" d=\\\"M77.431,75.215a3.113,3.113,0,0,1-1.693-.638c-2.453-1.668-4.907-3.484-6.82-5.054a65.292,65.292,0,0,1-5.592-4.907A16.409,16.409,0,0,1,60.871,61.6a2.87,2.87,0,0,1-.146-2.87,13.888,13.888,0,0,0,.785-2.16,2.747,2.747,0,0,1,2.06-2.06,9.842,9.842,0,0,1,3.018-.222,37.675,37.675,0,0,1,5.765.737c3.386.661,6.895,1.472,10.4,2.453a5.314,5.314,0,0,1,.81.293,2.259,2.259,0,0,1,1.547,2.773c-.2,1.006-.443,1.987-.713,2.943a36.357,36.357,0,0,1-4.906,10.354,2.456,2.456,0,0,1-2.062,1.374\\\"/>\\n              <path id=\\\"Fill-83\\\" class=\\\"cls-14\\\" d=\\\"M83.221,60.2l-1.791-.417,1.791.368-1.791-.368Z\\\"/>\\n              <path id=\\\"Fill-85\\\" class=\\\"cls-4\\\" d=\\\"M18.576,70.014a2.134,2.134,0,0,1-1.987-1.251c-.417-.811-.736-1.644-1.079-2.453a37.066,37.066,0,0,1-1.938-7.36,34.345,34.345,0,0,1-.393-4.662,2.257,2.257,0,0,1,2.052-2.444c.051,0,.1-.008.156-.008a33.14,33.14,0,0,1,3.459,0H21.03c2.035,0,4.342.123,6.6.318a32.538,32.538,0,0,1,5.985.86,11.907,11.907,0,0,1,1.915.687,2.845,2.845,0,0,1,1.717,2.11,12.388,12.388,0,0,0,.686,2.453,2.67,2.67,0,0,1-.514,2.624A10.723,10.723,0,0,1,34.7,63.342a58.8,58.8,0,0,1-6.452,3.238c-3.362,1.349-5.814,2.38-8.268,3.263l-.492.147a3.229,3.229,0,0,1-.883.123Z\\\"/>\\n              <path id=\\\"Fill-87\\\" class=\\\"cls-14\\\" d=\\\"M18.576,66.358,19.337,68l-.59-1.645Z\\\"/>\\n              <path id=\\\"Fill-89\\\" class=\\\"cls-14\\\" d=\\\"M19.95,67.094Z\\\"/>\\n              <path id=\\\"Fill-91\\\" class=\\\"cls-4\\\" d=\\\"M65.336,52.791H63.668a2.453,2.453,0,0,1-1.178-4.71,20.867,20.867,0,0,1,3.337-1.644c4.146-1.667,8.637-3.238,14.72-5.1a7.143,7.143,0,0,1,.785-.222,2.26,2.26,0,0,1,2.8,1.5c.318.981.588,1.963.808,2.969a35.016,35.016,0,0,1,.687,4.146,2.282,2.282,0,0,1-2.428,2.8h-6.65l-10.525.27Z\\\"/>\\n              <path id=\\\"Fill-93\\\" class=\\\"cls-4\\\" d=\\\"M35.823,50.387a18.963,18.963,0,0,1-3.067-.588c-5.446-1.375-10.8-3.067-15.407-4.589a8.25,8.25,0,0,1-.981-.391,2.111,2.111,0,0,1-1.338-2.667.952.952,0,0,1,.038-.1A22.1,22.1,0,0,1,16,39.592,39.216,39.216,0,0,1,18.11,35.4a2.233,2.233,0,0,1,3.389-.86c.859.54,1.668,1.13,2.453,1.717l.736.54c2.012,1.424,4.023,2.846,6.06,4.244l4.465,3.092a19.58,19.58,0,0,1,2.453,1.962,2.575,2.575,0,0,1-1.84,4.367Z\\\"/>\\n              <path id=\\\"Fill-95\\\" class=\\\"cls-14\\\" d=\\\"M16.81,42.61l1.742.589Z\\\"/>\\n              <path id=\\\"Fill-97\\\" class=\\\"cls-4\\\" d=\\\"M59.841,45.383a2.6,2.6,0,0,1-1.791-.736A13.717,13.717,0,0,0,56.063,43.1a2.823,2.823,0,0,1-1.251-2.6,12.234,12.234,0,0,1,.981-3.754A58.68,58.68,0,0,1,59.4,29.828c1.4-2.453,2.7-4.491,4.023-6.452a8.079,8.079,0,0,1,.54-.761,2.281,2.281,0,0,1,3.067-.762,38.019,38.019,0,0,1,5.4,3.657,36.428,36.428,0,0,1,5.913,6.084,2.182,2.182,0,0,1-.188,3.081,1.653,1.653,0,0,1-.13.108,22.453,22.453,0,0,1-2.282,1.742l-.417.319A110.811,110.811,0,0,1,65.7,43.125a22.811,22.811,0,0,1-4.391,2.011l-.761.173h-.515Z\\\"/>\\n              <path id=\\\"Fill-99\\\" class=\\\"cls-4\\\" d=\\\"M39.847,44.67a3.244,3.244,0,0,1-1.179-.245,11.676,11.676,0,0,1-2.453-1.57,42.669,42.669,0,0,1-3.973-3.631c-2.331-2.453-4.686-5.175-7.213-8.317a5.8,5.8,0,0,1-.466-.638l-.172-.245a2.181,2.181,0,0,1,.49-2.992,36.746,36.746,0,0,1,8.071-5.667,37.562,37.562,0,0,1,4.761-2.037,2.159,2.159,0,0,1,2.821,1.166l.025.06a16.047,16.047,0,0,1,.785,2.134,111.417,111.417,0,0,1,3.165,11.581,24,24,0,0,1,.638,4.906v1.277a2.724,2.724,0,0,1-1.423,2.109,15.33,15.33,0,0,0-2.11,1.447,2.721,2.721,0,0,1-1.766.662\\\"/>\\n              <path id=\\\"Fill-101\\\" class=\\\"cls-4\\\" d=\\\"M50.714,41.384h-.269a2.452,2.452,0,0,1-2.282-1.889,22.659,22.659,0,0,1-.467-3.509c-.2-2.65-.269-5.274-.318-8.07v-7.8a5.882,5.882,0,0,1,0-.687,2.11,2.11,0,0,1,2.158-2.037,34.888,34.888,0,0,1,3.95.246,35.9,35.9,0,0,1,3.608.588,2.451,2.451,0,0,1,1.643.958,2.258,2.258,0,0,1,.222,1.79c-.2.811-.466,1.619-.711,2.454l-.2.563c-1.129,3.509-2.183,7.042-3.237,10.6L54.149,36.8a27.178,27.178,0,0,1-1.1,3.165,2.454,2.454,0,0,1-2.258,1.423Z\\\"/>\\n              <path id=\\\"Fill-103\\\" class=\\\"cls-15\\\" d=\\\"M49.414,86.034h2.8v-.86c-.148-2.673-.345-4.906-.564-7.163a57.925,57.925,0,0,0-.909-6.035,11.049,11.049,0,0,0-.785-2.454,15.835,15.835,0,0,1-2.158,0,8.592,8.592,0,0,0-1.007,1.522,47.992,47.992,0,0,0-2.845,6.427c-1.105,2.872-1.939,5.3-2.626,7.581a30.368,30.368,0,0,0,8.1.982\\\"/>\\n              <path id=\\\"Fill-105\\\" class=\\\"cls-15\\\" d=\\\"M59.767,70.7l.319.907c1.03,2.895,2.036,5.765,3.018,8.661l.319.981c.147.49.294.956.466,1.447.859-.443,1.766-.932,2.7-1.521l.761-.466c-1.374-1.914-2.869-3.925-4.907-6.477-.761-1.081-1.717-2.332-2.674-3.533\\\"/>\\n              <path id=\\\"Fill-107\\\" class=\\\"cls-15\\\" d=\\\"M26.083,76.2A33.615,33.615,0,0,0,29,78.869l1.251-1.717.221-.318c2.159-2.993,4-5.594,5.716-8.219L34.3,70.038c-1.815,1.4-3.654,2.772-5.5,4.146Z\\\"/>\\n              <path id=\\\"Fill-109\\\" class=\\\"cls-15\\\" d=\\\"M64.134,60.053a12.148,12.148,0,0,0,1.742,2.036,63.623,63.623,0,0,0,5.275,4.539c1.815,1.424,3.754,2.921,5.814,4.342a32.223,32.223,0,0,0,3.8-8.487,15.062,15.062,0,0,0,.417-1.6C77.945,60,74.73,59.239,71.589,58.65a35.667,35.667,0,0,0-5.2-.686,5.885,5.885,0,0,0-1.521,0,18.336,18.336,0,0,1-.736,2.084\\\"/>\\n              <path id=\\\"Fill-111\\\" class=\\\"cls-15\\\" d=\\\"M16.932,55.466a25.5,25.5,0,0,0,.319,2.969,33.543,33.543,0,0,0,1.717,6.6l.443,1.054c2.134-.808,4.439-1.741,7.359-2.992a55.023,55.023,0,0,0,6.011-3.018,9.871,9.871,0,0,0,1.6-1.178,16.161,16.161,0,0,1-.59-2.062l-1.03-.342a32.165,32.165,0,0,0-5.422-.736c-2.183-.173-4.416-.245-6.353-.294Z\\\"/>\\n              <path id=\\\"Fill-113\\\" class=\\\"cls-15\\\" d=\\\"M80.915,44.989c-4.636,1.472-8.366,2.748-11.751,4.048l7.237-.2h5.348c-.147-.858-.294-1.668-.466-2.453s-.245-.957-.368-1.4\\\"/>\\n              <path id=\\\"Fill-115\\\" class=\\\"cls-15\\\" d=\\\"M19.017,41.923c3.631,1.179,7.729,2.453,11.923,3.631l-2.257-1.569c-2.061-1.424-4.1-2.822-6.133-4.269l-.761-.564-1.127-.811a25.38,25.38,0,0,0-1.251,2.626c-.147.293-.271.637-.394.956\\\"/>\\n              <path id=\\\"Fill-117\\\" class=\\\"cls-15\\\" d=\\\"M58.541,40.328a14.1,14.1,0,0,1,1.644,1.3,18.1,18.1,0,0,0,3.63-1.668,108.514,108.514,0,0,0,9.373-6.06l.417-.319,1.006-.711A33.888,33.888,0,0,0,70.1,28.405a34.279,34.279,0,0,0-3.8-2.674c-1.2,1.84-2.453,3.8-3.73,6.011a53.391,53.391,0,0,0-3.335,6.427,8.338,8.338,0,0,0-.687,2.16\\\"/>\\n              <path id=\\\"Fill-119\\\" class=\\\"cls-15\\\" d=\\\"M28.168,28.994c2.453,2.919,4.588,5.471,6.771,7.777A41.162,41.162,0,0,0,38.4,40.058a9.817,9.817,0,0,0,1.276.859,19.779,19.779,0,0,1,1.742-1.178.912.912,0,0,1,0-.27,19.346,19.346,0,0,0-.564-4.367,103.606,103.606,0,0,0-3.067-11.015,5.18,5.18,0,0,0-.245-.736A30.145,30.145,0,0,0,34.5,24.725a32.244,32.244,0,0,0-6.33,4.269\\\"/>\\n              <path id=\\\"Fill-121\\\" class=\\\"cls-15\\\" d=\\\"M51.009,21.069v6.673c0,1.963,0,3.827.171,5.644,1.056-3.558,2.111-7.116,3.264-10.649l.171-.588a2.861,2.861,0,0,1,.246-.736l-1.791-.245a19.769,19.769,0,0,0-1.988-.1Z\\\"/>\\n              <path id=\\\"Fill-123\\\" class=\\\"cls-4\\\" d=\\\"M49.414,4.461A49.067,49.067,0,1,0,98.48,53.527,49.067,49.067,0,0,0,49.414,4.461m0,7.36A41.707,41.707,0,1,1,7.708,53.527,41.707,41.707,0,0,1,49.414,11.821\\\"/>\\n              <path id=\\\"Fill-125\\\" class=\\\"cls-14\\\" d=\\\"M49.414,49.847a3.68,3.68,0,1,1-3.68,3.68,3.68,3.68,0,0,1,3.68-3.68\\\"/>\\n            </g>\\n          </g>\\n        </g>\\n      </g>\\n  </g>\\n      <text id=\\\"I_N_F_O_R_M_E_D\\\" data-name=\\\"I   N   F   O   R   M   E   D\\\" class=\\\"cls-16\\\" transform=\\\"translate(257.021 893.967)\\\"><tspan x=\\\"0\\\" y=\\\"0\\\" xml:space=\\\"preserve\\\">I   N   F   O   R   M   E   D</tspan></text>\\n\\n</svg>\\n\\n# Intro\\n\\nSay hello to the best react form library you have ever used! Informed is an extensive, simple, and efficient solution for creating basic to complex forms in react. Out of the box you get the ability to grab and manipulate values, validate fields, create custom inputs, and much much more!\\n\\nOh and YES WE USE HOOKS!\\n\\n[![Docs](https://badgen.net/badge/V4/Docs/purple)](https://teslamotors.github.io/informed)\\n[![npmversion](https://img.shields.io/npm/v/informed.svg)](https://www.npmjs.com/package/informed)\\n[![github](https://badgen.net/badge/gihub/main/green?icon=github)](https://github.com/teslamotors/informed)\\n[![Docs](https://badgen.net/badge/V3/Docs/red)](https://61af80ffc6bc460007bf9ec7--joepuzzo-informed.netlify.app/)\\n\\n<!--  -->\\n\\n<!-- [![Build Status](https://travis-ci.org/joepuzzo/informed.svg?branch=master)](https://travis-ci.org/joepuzzo/informed)\\n[![Coverage Status](https://coveralls.io/repos/github/joepuzzo/informed/badge.svg?branch=master)](https://coveralls.io/github/joepuzzo/informed?branch=master)\\n[![Minzipped-Size](https://badgen.net/bundlephobia/minzip/informed)](https://bundlephobia.com/result?p=informed) -->\\n\\n<iframe width=\\\"560\\\" height=\\\"315\\\" src=\\\"https://www.youtube.com/embed/DtUo40Jxeyc\\\" frameborder=\\\"0\\\" allow=\\\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\\\" allowfullscreen></iframe>\\n\\n## Getting Started\\n\\n##### Install with npm\\n\\n```\\nnpm install --save informed\\n```\\n\\n#### What Can it do ?\\n\\nSee for yourself.\\n\\nBy default it comes with native dom inputs that are controlled by informed.\\n\\n```jsx\\nimport { Form, Input, Select, Checkbox, Relevant, Debug } from 'informed';\\n\\nconst onSubmit = ({ values }) => console.log(values);\\n\\nconst ExampleForm = () => (\\n  <Form onSubmit={onSubmit}>\\n    <Input name=\\\"name\\\" label=\\\"Name\\\" placeholder=\\\"Elon\\\" />\\n    <Input name=\\\"age\\\" type=\\\"number\\\" label=\\\"Age\\\" required=\\\"Age Required\\\" />\\n    <Input name=\\\"phone\\\" label=\\\"Phone\\\" formatter=\\\"+1 (###)-###-####\\\" />\\n    <Select name=\\\"car\\\" label=\\\"Car\\\" initialValue=\\\"ms\\\">\\n      <option value=\\\"ms\\\">Model S</option>\\n      <option value=\\\"m3\\\">Model 3</option>\\n      <option value=\\\"mx\\\">Model X</option>\\n      <option value=\\\"my\\\">Model Y</option>\\n    </Select>\\n    <Checkbox name=\\\"married\\\" label=\\\"Married?\\\" />\\n    <Relevant when={({ formState }) => formState.values.married}>\\n      <Input name=\\\"spouse\\\" label=\\\"Spouse\\\" />\\n    </Relevant>\\n    <button type=\\\"submit\\\">Submit</button>\\n    <Debug />\\n  </Form>\\n);\\n```\\n\\n<!-- STORY -->\\n\";","import React from 'react';\nimport Code from '../../utils/Code';\nimport withDocs from '../../utils/withDocs';\nimport readme from './README.md';\nimport { Form, Input, Select, Checkbox, Relevant, Debug } from '../../../src';\nimport { CodeBlock } from '../../utils/CodeBlock';\n\nconst code = `\nimport { Form, Input, Select, Checkbox, Relevant } from 'informed';\nimport style from './style.css';\n\nconst onSubmit = ({values}) => console.log(values);\n\nexport default function App() {\n  return (\n    <Form onSubmit={onSubmit} autocomplete=\"off\">\n      <Input field=\"name\" label=\"Name\" placeholder=\"Elon\" />\n      <Input field=\"age\" type=\"number\" label=\"Age\" required=\"Age Required\" />\n      <Input field=\"phone\" label=\"Phone\" formatter=\"+1 (###)-###-####\" />\n      <Select field=\"car\" label=\"Car\" initialValue=\"ms\">\n        <option value=\"ms\">Model S</option>\n        <option value=\"m3\">Model 3</option>\n        <option value=\"mx\">Model X</option>\n        <option value=\"my\">Model Y</option>\n      </Select>\n      <label>\n        Married: <Checkbox field=\"married\" />\n      </label>\n      <Relevant when={({ formState }) => formState.values.married}>\n        <Input field=\"spouse\" label=\"Spouse\" />\n      </Relevant>\n      <button type=\"submit\">Submit</button>\n    </Form>\n  )\n}`;\n\nconst onSubmit = ({ values }) => console.log(values);\n\nconst GettingStarted = () => (\n  <>\n    <Form onSubmit={onSubmit} autocomplete=\"off\">\n      <div style={{ display: 'flex' }}>\n        <div style={{ flex: '1' }}>\n          <Input name=\"name\" label=\"Name\" placeholder=\"Elon\" />\n          <Input name=\"age\" type=\"number\" label=\"Age\" required=\"Age Required\" />\n          <Input name=\"phone\" label=\"Phone\" formatter=\"+1 (###)-###-####\" />\n          <Select name=\"car\" label=\"Car\" initialValue=\"ms\">\n            <option value=\"ms\">Model S</option>\n            <option value=\"m3\">Model 3</option>\n            <option value=\"mx\">Model X</option>\n            <option value=\"my\">Model Y</option>\n          </Select>\n          <label>\n            Married: <Checkbox name=\"married\" />\n          </label>\n          <Relevant when={({ formState }) => formState.values.married}>\n            <Input name=\"spouse\" label=\"Spouse\" />\n          </Relevant>\n          <button type=\"submit\">Submit</button>\n        </div>\n        <div style={{ flex: '1' }}>\n          <Debug />\n        </div>\n      </div>\n    </Form>\n    <br />\n    <CodeBlock code={code} />\n  </>\n);\n\nexport default withDocs(readme, GettingStarted);\n","export default \"## Schema Vs Format\\n\\nHere is the same form with Format Based ( JSX ), and with JSON Schema.\\n\\n<!-- STORY -->\\n\";","import React from 'react';\nimport withDocs from '../../utils/withDocs';\nimport readme from './README.md';\nimport { SchemaFields, Form, Input, Select } from '../../../src';\n\nconst codeHeight = '1250px';\n\nconst onSubmit = ({ values }) => console.log(data);\n\nconst schema = {\n  type: 'object',\n  required: ['age'],\n  properties: {\n    name: {\n      type: 'string',\n      title: 'Name',\n      'ui:props': {\n        placeholder: 'Elon'\n      }\n    },\n    age: {\n      type: 'number',\n      title: 'Age',\n      errorMessage: {\n        required: 'Age Required'\n      }\n    },\n    phone: {\n      type: 'string',\n      title: 'Phone',\n      'ui:props': {\n        formatter: '+1 (###)-###-####'\n      }\n    },\n    color: {\n      type: 'string',\n      title: 'Color',\n      'ui:control': 'select',\n      oneOf: [\n        { const: 'md', title: 'Model S' },\n        { const: 'm3', title: 'Model 3' },\n        { const: 'mx', title: 'Model X' },\n        { const: 'my', title: 'Model Y' }\n      ],\n      'ui:props': {\n        initialValue: 'ms'\n      }\n    }\n  }\n};\n\nconst GettingStarted = () => (\n  <div style={{ display: 'flex' }}>\n    <div style={{ flex: '1', marginRight: '1rem', maxWidth: '500px' }}>\n      <h4>Format Based (JSX)</h4>\n      <Form onSubmit={onSubmit} autocomplete=\"off\">\n        <Input name=\"name\" label=\"Name\" placeholder=\"Elon\" />\n        <Input name=\"age\" type=\"number\" label=\"Age\" required=\"Age Required\" />\n        <Input name=\"phone\" label=\"Phone\" formatter=\"+1 (###)-###-####\" />\n        <Select name=\"car\" label=\"Car\" initialValue=\"ms\">\n          <option value=\"ms\">Model S</option>\n          <option value=\"m3\">Model 3</option>\n          <option value=\"mx\">Model X</option>\n          <option value=\"my\">Model Y</option>\n        </Select>\n        <button type=\"submit\">Submit</button>\n      </Form>\n      <pre style={{ height: codeHeight }}>\n        <code className=\"language-jsx\">\n          {`\nimport { SchemaFields, Form, Input, Select } from 'informed';\n\nconst onSubmit = ({values}) => console.log(values);\n\nconst ExampleForm = () => (\n  <Form onSubmit={onSubmit}>\n    <Input name=\"name\" label=\"Name\" placeholder=\"Elon\" />\n    <Input name=\"age\" type=\"number\" label=\"Age\" required=\"Age Required\" />\n    <Input name=\"phone\" label=\"Phone\" formatter=\"+1 (###)-###-####\" />\n    <Select name=\"car\" label=\"Car\" initialValue=\"ms\">\n      <option value=\"ms\">Model S</option>\n      <option value=\"m3\">Model 3</option>\n      <option value=\"mx\">Model X</option>\n      <option value=\"my\">Model Y</option>\n    </Select>\n    <button type=\"submit\">Submit</button>\n    <Debug />\n  </Form>\n);\n`}\n        </code>\n      </pre>\n    </div>\n    <div style={{ flex: '1', maxWidth: '500px' }}>\n      <h4>Schema Based</h4>\n      <Form schema={schema} onSubmit={onSubmit}>\n        <SchemaFields />\n        <button type=\"submit\">Submit</button>\n      </Form>\n      <pre style={{ height: codeHeight }}>\n        <code className=\"language-jsx\">\n          {`\nimport { Form } from 'informed';\n\nconst onSubmit = ({values}) => console.log(values);\n\nconst schema = {\n  type: 'object',\n  required: ['age'],\n  properties: {\n    name: {\n      type: 'string',\n      title: 'Name',\n      'ui:props': {\n        placeholder: 'Elon'\n      },\n    },\n    age: {\n      type: 'number',\n      title: 'Age',\n      errorMessage: {\n        required: 'Age Required'\n      }\n    },\n    phone: {\n      type: 'string',\n      title: 'Phone',\n      'ui:props': {\n        formatter: \"+1 (###)-###-####\"\n      },\n    },\n    color: {\n      type: 'string',\n      title: 'Color',\n      'ui:control': 'select',\n      oneOf: [\n        { const: 'md', title: 'Model S' },\n        { const: 'm3', title: 'Model 3' },\n        { const: 'mx', title: 'Model X' },\n        { const: 'my', title: 'Model Y' },\n      ],\n      'ui:props': {\n        initialValue: \"ms\"\n      },\n    },\n  }\n};\n\nconst ExampleForm = () => {\n  return (\n    <Form schema={schema} onSubmit={onSubmit}>\n      <SchemaFields />\n      <button type=\"submit\">Submit</button>\n    </Form>\n  )\n}\n`}\n        </code>\n      </pre>\n    </div>\n  </div>\n);\n\nexport default withDocs(readme, GettingStarted);\n","export default \"### useForm Hook\\n\\nHooks are all the rage these days, and some people want to \\\"hook things up themselves\\\" :)\\nHere is an example where you can use the `useFormHook`.\\n\\n<!-- STORY -->\\n\\n```jsx\\nimport { Form, Input } from 'informed';\\n\\nconst validate = value => {\\n  if (!value || value.length < 5)\\n    return 'Field must be at least five characters';\\n};\\n\\nconst onSubmit = ({ values }) =>\\n  window.alert(`Form successfully submitted with ${JSON.stringify(values)}`);\\n\\nconst UseFormExample = () => {\\n  const { formController, formState, render } = useForm({\\n    onSubmit\\n  });\\n\\n  return render(\\n    <form\\n      onReset={formController.reset}\\n      onSubmit={formController.submitForm}\\n      onKeyDown={formController.keyDown}>\\n      <label>\\n        First name:\\n        <Input field=\\\"name\\\" validate={validate} />\\n        <small style={{ color: 'red' }}>{formState.errors.name}</small>\\n      </label>\\n      <button type=\\\"submit\\\">Submit</button>\\n      <pre>\\n        <code>{JSON.stringify(formState, null, 2)}</code>\\n      </pre>\\n    </form>\\n  );\\n};\\n```\\n\\n<br/>\\n\";","import React from 'react';\nimport Code from '../../utils/Code';\nimport withDocs from '../../utils/withDocs';\nimport readme from './README.md';\nimport { Input, useForm } from '../../../src';\n\nconst validate = value => {\n  if (!value || value.length < 5)\n    return 'Field must be at least five characters';\n};\n\nconst onSubmit = ({ values }) =>\n  window.alert(`Form successfully submitted with ${JSON.stringify(values)}`);\n\nconst UseForm = () => {\n  const { formController, formState, render } = useForm({\n    onSubmit\n  });\n\n  return render(\n    <div>\n      <form\n        onReset={formController.reset}\n        onSubmit={formController.submitForm}\n        onKeyDown={formController.keyDown}>\n        <div style={{ display: 'flex', flexWrap: 'wrap' }}>\n          <div style={{ flex: 1, marginRight: '2rem' }}>\n            <label>\n              First name:\n              <Input name=\"name\" validate={validate} />\n              <small style={{ color: 'red' }}>{formState.errors.name}</small>\n            </label>\n            <button type=\"submit\">Submit</button>\n          </div>\n          <div\n            style={{\n              flex: 2,\n              flexDirection: 'column',\n              display: 'flex',\n              minWidth: '300px',\n              marginLeft: '2rem'\n            }}>\n            <pre>\n              <code>{JSON.stringify(formState, null, 2)}</code>\n            </pre>\n          </div>\n        </div>\n      </form>\n    </div>\n  );\n};\n\nexport default withDocs(readme, UseForm);\n","export default \"### Whate Else?\\n\\n**This is sick! What else can I do???**\\n\\nSoo much!!!\\n\\n<!-- STORY -->\\n\\n# Where should I go next?\\n\\nTo see all of the available stuff in informed. I would recoomend you check out the `Form > Props`, `Form > State`, `Form > Api`, and `Inputs > Intro` sections of the docs.\";","import React from 'react';\nimport withDocs from '../../utils/withDocs';\nimport readme from './README.md';\nimport { Form, Text } from '../../../src';\nimport ComplexForm from '../../Form/Complex';\nimport DynamicArrays from '../../Arrays/DynamicArrays';\n// import CustomInputs from './CustomInputs';\n\nconst WhatElse = () => (\n  <>\n    <ComplexForm />\n    <br />\n    <DynamicArrays />\n    <br />\n    {/* <CustomInputs /> */}\n  </>\n);\n\nexport default withDocs(readme, WhatElse);\n","import React from 'react';\nimport GettingStarted from './GettingStarted';\nimport FormState from './FormState';\nimport FormApi from './FormApi';\nimport WhatElse from './WhatElse';\nimport UseForm from './UseForm';\nimport IntroComp from './Intro';\nimport CustomIntro from './CustomIntro';\nimport SchemaVsFormat from './SchemaVsFormat';\n\nconst Intro = () => (\n  <div>\n    <IntroComp />\n    <hr />\n    <CustomIntro />\n    <hr />\n    <GettingStarted />\n    <hr />\n    <FormState />\n    <hr />\n    <FormApi />\n    <hr />\n    <SchemaVsFormat />\n    {/* <UseForm /> */}\n    {/* <WhatElse /> */}\n  </div>\n);\n\nexport default Intro;\n","export default \"# Keep\\n\\nSometimes you need to keep the state of a field even when it gets unmounted ( no longer rendered on screen ). In the below example we have a field that gets hidden when the hide button is clicked, when it gets unmounted its state would normally get removed, by passing `keep={{ value: true }}` we can control what state ( if any ) should be kept.\\n\\nNote: Click on the \\\"Submit\\\" button. See how the state shows an error and the value.\\n\\nNext: Click on the \\\"Hide\\\" button and note fields error state gets removed but NOT the value.\\n\\nNext: Click on the \\\"Show\\\" button and note the fields value state comes back but NOT the error state.\\n\\n<!-- STORY -->\\n\\n```jsx\\nimport { Form, Input, Checkbox, Relevant, Debug } from 'informed';\\n\\nconst Example = () => {\\n  const [show, setShow] = useState(true);\\n\\n  return (\\n    <Form>\\n      {show ? (\\n        <Input\\n          name=\\\"name\\\"\\n          label=\\\"Name:\\\"\\n          defaultValue=\\\"Hello\\\"\\n          minLength={10}\\n          keep={{ value: true }}\\n        />\\n      ) : null}\\n      <button type=\\\"button\\\" onClick={toggle}>\\n        {show ? 'Hide' : 'Show'}\\n      </button>\\n      <button type=\\\"submit\\\">Submit</button>\\n      <Debug values errors />\\n    </Form>\\n  );\\n};\\n```\\n\";","import React, { useState } from 'react';\nimport withDocs from '../../utils/withDocs';\nimport readme from './README.md';\n\nimport { Form, Input, Checkbox, Relevant, Debug } from '../../../src';\n\nconst Example = () => {\n  const [show, setShow] = useState(true);\n\n  const toggle = () => setShow(prev => !prev);\n\n  return (\n    <Form>\n      {show ? (\n        <Input\n          name=\"name\"\n          label=\"Name:\"\n          defaultValue=\"Hello\"\n          minLength={10}\n          keep={{ value: true }}\n        />\n      ) : null}\n      <button type=\"button\" onClick={toggle}>\n        {show ? 'Hide' : 'Show'}\n      </button>\n      <button type=\"submit\">Submit</button>\n      <Debug values errors />\n    </Form>\n  );\n};\n\nexport default withDocs(readme, Example);\n","export default \"# Keep State\\n\\nSometimes you need to keep the state of a field even when it gets unmounted ( no longer rendered on screen ). In the below example, when you toggle showing the fields the `name1` field will get removed from the form state but the name2 fields state will be kept.\\n\\nNote: Fill in both fields then click on the hide button and then show. Pay attention to how name2's state stays but name1's gets removed\\n\\n<!-- STORY -->\\n\\n```jsx\\nimport { Form, Input, Debug } from 'informed';\\n\\nconst Example = () => {\\n  const [show, setShow] = useState(true);\\n\\n  return (\\n    <Form>\\n      {show ? <Input name=\\\"name1\\\" label=\\\"Name:\\\" /> : null}\\n      {show ? <Input name=\\\"name2\\\" label=\\\"Name:\\\" keepState /> : null}\\n      <button type=\\\"button\\\" onClick={toggle}>\\n        {show ? 'Hide' : 'Show'}\\n      </button>\\n      <Debug values />\\n    </Form>\\n  );\\n};\\n```\\n\";","import React, { useState } from 'react';\nimport withDocs from '../../utils/withDocs';\nimport readme from './README.md';\n\nimport { Form, Input, Debug } from '../../../src';\n\nconst Example = () => {\n  const [show, setShow] = useState(true);\n\n  const toggle = () => setShow(prev => !prev);\n\n  return (\n    <Form>\n      {show ? <Input name=\"name1\" label=\"Name:\" /> : null}\n      {show ? <Input name=\"name2\" label=\"Name:\" keepState /> : null}\n      <button type=\"button\" onClick={toggle}>\n        {show ? 'Hide' : 'Show'}\n      </button>\n      <Debug values />\n    </Form>\n  );\n};\n\nexport default withDocs(readme, Example);\n","export default \"# Keep State If Relevant\\n\\nSometimes you need to keep the state of a field even when it gets unmounted ( no longer rendered on screen ). In the below example, when you toggle showing the fields the `name1` field will get removed from the form state but the name2 fields state will be kept. However if that field is irrelevant it will NOT be kept.\\n\\nNote: Fill in both fields then click on the hide button and then show. Pay attention to how name2's state stays but name1's gets removed\\n\\nNext: Click on the toggle input and note how name2's state gets removed as its irrelevant.\\n\\n<!-- STORY -->\\n\\n```jsx\\nimport { Form, Input, Checkbox, Relevant, Debug } from 'informed';\\n\\nconst Example = () => {\\n  const [show, setShow] = useState(true);\\n\\n  return (\\n    <Form>\\n      {show ? <Input name=\\\"name1\\\" label=\\\"Name:\\\" /> : null}\\n      <Checkbox name=\\\"show\\\" label=\\\"Show\\\" defaultValue={true} />\\n      <Relevant when={({ formState }) => formState.values.show}>\\n        {show ? <Input name=\\\"name2\\\" label=\\\"Name:\\\" keepStateIfRelevant /> : null}\\n      </Relevant>\\n      <br />\\n      <button type=\\\"button\\\" onClick={toggle}>\\n        {show ? 'Hide' : 'Show'}\\n      </button>\\n      <Debug values />\\n    </Form>\\n  );\\n};\\n```\\n\";","import React, { useState } from 'react';\nimport withDocs from '../../utils/withDocs';\nimport readme from './README.md';\n\nimport { Form, Input, Checkbox, Relevant, Debug } from '../../../src';\n\nconst Example = () => {\n  const [show, setShow] = useState(true);\n\n  const toggle = () => setShow(prev => !prev);\n\n  return (\n    <Form>\n      {show ? <Input name=\"name1\" label=\"Name:\" /> : null}\n      <Checkbox name=\"show\" label=\"Show\" defaultValue={true} />\n      <Relevant when={({ formState }) => formState.values.show}>\n        {show ? <Input name=\"name2\" label=\"Name:\" keepStateIfRelevant /> : null}\n      </Relevant>\n      <br />\n      <button type=\"button\" onClick={toggle}>\n        {show ? 'Hide' : 'Show'}\n      </button>\n      <Debug values />\n    </Form>\n  );\n};\n\nexport default withDocs(readme, Example);\n","export default \"# Multistep Forms\\n\\nSomtimes you need to take actions when moving from step A to B.\\n\\n<!-- STORY -->\\n\\n```jsx\\nimport {\\n  Form,\\n  Input,\\n  Multistep,\\n  Checkbox,\\n  Debug,\\n  useMultistepApi\\n} from 'informed';\\n\\nconst Info = () => {\\n  const { next } = useMultistepApi();\\n\\n  const [loading, setLoading] = useState(false);\\n  const [error, setError] = useState();\\n\\n  const doSomething = ({ values }) => {\\n    const { first } = values;\\n    return new Promise((resolve, reject) => {\\n      setLoading(true);\\n      setTimeout(() => {\\n        // Simulate username check\\n        if (['joe', 'tanner', 'billy', 'bob'].includes(first)) {\\n          setLoading(false);\\n          const error = 'That name is taken';\\n          setError(error);\\n          return reject(error);\\n        }\\n        // Simulate request faulure\\n        if (first === 'reject') {\\n          setLoading(false);\\n          const error = 'Unable to validate name.';\\n          setError(error);\\n          return reject(new Error(error));\\n        }\\n        setLoading(false);\\n        setError();\\n        return resolve();\\n      }, 2000);\\n    });\\n  };\\n\\n  return (\\n    <Multistep.Step step=\\\"info\\\">\\n      <Input\\n        name=\\\"first\\\"\\n        label=\\\"First Name\\\"\\n        required\\n        // asyncValidate={asyncValidate}\\n      />\\n      <Input name=\\\"last\\\" label=\\\"First Name\\\" required />\\n      <button type=\\\"button\\\" onClick={() => next(doSomething)}>\\n        Next\\n      </button>\\n      {loading ? <div className=\\\"loader\\\">Loading...</div> : null}\\n      {error ? <div style={{ color: 'red' }}>Error: {error}</div> : null}\\n    </Multistep.Step>\\n  );\\n};\\n\\nconst Favorite = () => {\\n  const { next, previous } = useMultistepApi();\\n  return (\\n    <Multistep.Step step=\\\"favorite\\\">\\n      <Input name=\\\"color\\\" label=\\\"Favorite Color:\\\" required />\\n      <Input name=\\\"food\\\" label=\\\"Favorite Food:\\\" required />\\n      <div className=\\\"button-group\\\">\\n        <button type=\\\"button\\\" onClick={previous}>\\n          Previous\\n        </button>\\n        <button type=\\\"button\\\" onClick={next}>\\n          Next\\n        </button>\\n      </div>\\n    </Multistep.Step>\\n  );\\n};\\n\\nconst Additional = () => {\\n  const { previous } = useMultistepApi();\\n  return (\\n    <Multistep.Step step=\\\"additional\\\">\\n      <Input name=\\\"height\\\" label=\\\"Height:\\\" required />\\n      <Input name=\\\"weight\\\" label=\\\"Weight:\\\" required />\\n      <div className=\\\"button-group\\\">\\n        <button type=\\\"button\\\" onClick={previous}>\\n          Previous\\n        </button>\\n        <button type=\\\"submit\\\">Submit</button>\\n      </div>\\n    </Multistep.Step>\\n  );\\n};\\n\\nconst Example = () => {\\n  return (\\n    <Form autocomplete=\\\"off\\\">\\n      <Multistep>\\n        <Info />\\n        <Favorite />\\n        <Additional />\\n      </Multistep>\\n      <Debug />\\n    </Form>\\n  );\\n};\\n```\\n\";","import React, { useState, useRef } from 'react';\nimport withDocs from '../../utils/withDocs';\nimport readme from './README.md';\n\nimport {\n  Form,\n  Input,\n  useFormApi,\n  useMultistepApi,\n  useMultistepState,\n  useFormState,\n  useFieldState,\n  //FormState,\n  ArrayField,\n  Multistep,\n  Checkbox,\n  RadioGroup,\n  Radio,\n  Relevant,\n  Debug\n} from '../../../src';\n\nconst asyncValidate = username => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      // Simulate username check\n      if (['joe', 'tanner', 'billy', 'bob'].includes(username)) {\n        return resolve('That username is taken');\n      }\n      // Simulate request faulure\n      if (username === 'reject') {\n        return reject(new Error('Unable to validate username.'));\n      }\n      return resolve();\n    }, 2000);\n  });\n};\n\nconst Info = () => {\n  const { next } = useMultistepApi();\n\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState();\n\n  const doSomething = ({ values }) => {\n    const { first } = values;\n    return new Promise((resolve, reject) => {\n      setLoading(true);\n      setTimeout(() => {\n        // Simulate username check\n        if (['joe', 'tanner', 'billy', 'bob'].includes(first)) {\n          setLoading(false);\n          const error = 'That name is taken';\n          setError(error);\n          return reject(error);\n        }\n        // Simulate request faulure\n        if (first === 'reject') {\n          setLoading(false);\n          const error = 'Unable to validate name.';\n          setError(error);\n          return reject(new Error(error));\n        }\n        setLoading(false);\n        setError();\n        return resolve();\n      }, 2000);\n    });\n  };\n\n  return (\n    <Multistep.Step step=\"info\">\n      <Input\n        name=\"first\"\n        label=\"First Name\"\n        required\n        // asyncValidate={asyncValidate}\n      />\n      <Input name=\"last\" label=\"First Name\" required />\n      <button type=\"button\" onClick={() => next(doSomething)}>\n        Next\n      </button>\n      {loading ? <div className=\"loader\">Loading...</div> : null}\n      {error ? <div style={{ color: 'red' }}>Error: {error}</div> : null}\n    </Multistep.Step>\n  );\n};\n\nconst Favorite = () => {\n  const { next, previous } = useMultistepApi();\n  return (\n    <Multistep.Step step=\"favorite\">\n      <Input name=\"color\" label=\"Favorite Color:\" required />\n      <Input name=\"food\" label=\"Favorite Food:\" required />\n      <div className=\"button-group\">\n        <button type=\"button\" onClick={previous}>\n          Previous\n        </button>\n        <button type=\"button\" onClick={next}>\n          Next\n        </button>\n      </div>\n    </Multistep.Step>\n  );\n};\n\nconst Additional = () => {\n  const { previous } = useMultistepApi();\n  return (\n    <Multistep.Step step=\"additional\">\n      <Input name=\"height\" label=\"Height:\" required />\n      <Input name=\"weight\" label=\"Weight:\" required />\n      <div className=\"button-group\">\n        <button type=\"button\" onClick={previous}>\n          Previous\n        </button>\n        <button type=\"submit\">Submit</button>\n      </div>\n    </Multistep.Step>\n  );\n};\n\nconst Basic = () => {\n  return (\n    <div>\n      <Form autocomplete=\"off\">\n        <div style={{ display: 'flex', flexWrap: 'wrap' }}>\n          <div style={{ flex: 1, marginRight: '2rem' }}>\n            <Multistep>\n              <div\n                style={{\n                  padding: '10px',\n                  marginBottom: '10px'\n                }}>\n                <Info />\n                <Favorite />\n                <Additional />\n              </div>\n            </Multistep>\n          </div>\n          <div style={{ flex: 2, minWidth: '300px', marginLeft: '3rem' }}>\n            <Debug />\n          </div>\n        </div>\n      </Form>\n    </div>\n  );\n};\n\nexport default withDocs(readme, Basic);\n","export default \"# Multistep Forms\\n\\nSometimes you have forms with multiple steps.\\n\\n<!-- STORY -->\\n\\n```jsx\\nimport {\\n  Form,\\n  Input,\\n  Multistep,\\n  Checkbox,\\n  Debug,\\n  useMultistepApi\\n} from 'informed';\\n\\nconst Info = () => {\\n  const { next } = useMultistepApi();\\n  return (\\n    <Multistep.Step step=\\\"info\\\">\\n      <Input name=\\\"first\\\" label=\\\"First Name\\\" required />\\n      <Input name=\\\"last\\\" label=\\\"First Name\\\" required />\\n      <button type=\\\"button\\\" onClick={next}>\\n        Next\\n      </button>\\n    </Multistep.Step>\\n  );\\n};\\n\\nconst Favorite = () => {\\n  const { next, previous } = useMultistepApi();\\n  return (\\n    <Multistep.Step step=\\\"favorite\\\">\\n      <Input name=\\\"color\\\" label=\\\"Favorite Color:\\\" required />\\n      <Input name=\\\"food\\\" label=\\\"Favorite Food:\\\" required />\\n      <div className=\\\"button-group\\\">\\n        <button type=\\\"button\\\" onClick={previous}>\\n          Previous\\n        </button>\\n        <button type=\\\"button\\\" onClick={next}>\\n          Next\\n        </button>\\n      </div>\\n    </Multistep.Step>\\n  );\\n};\\n\\nconst Additional = () => {\\n  const { previous } = useMultistepApi();\\n  return (\\n    <Multistep.Step step=\\\"additional\\\">\\n      <Input name=\\\"height\\\" label=\\\"Height:\\\" required />\\n      <Input name=\\\"weight\\\" label=\\\"Weight:\\\" required />\\n      <div className=\\\"button-group\\\">\\n        <button type=\\\"button\\\" onClick={previous}>\\n          Previous\\n        </button>\\n        <button type=\\\"submit\\\">Submit</button>\\n      </div>\\n    </Multistep.Step>\\n  );\\n};\\n\\nconst Example = () => {\\n  return (\\n    <Form autocomplete=\\\"off\\\">\\n      <Multistep>\\n        <Info />\\n        <Favorite />\\n        <Additional />\\n      </Multistep>\\n      <Debug />\\n    </Form>\\n  );\\n};\\n```\\n\";","import React, { useState, useRef } from 'react';\nimport withDocs from '../../utils/withDocs';\nimport readme from './README.md';\n\nimport {\n  Form,\n  Input,\n  useFormApi,\n  useMultistepApi,\n  useMultistepState,\n  useFormState,\n  useFieldState,\n  //FormState,\n  ArrayField,\n  Multistep,\n  Checkbox,\n  RadioGroup,\n  Radio,\n  Relevant,\n  Debug\n} from '../../../src';\n\nconst asyncValidate = username => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      // Simulate username check\n      if (['joe', 'tanner', 'billy', 'bob'].includes(username)) {\n        return resolve('That username is taken');\n      }\n      // Simulate request faulure\n      if (username === 'reject') {\n        return reject(new Error('Unable to validate username.'));\n      }\n      return resolve();\n    }, 2000);\n  });\n};\n\nconst doSomething = ({ values }) => {\n  const { first } = values;\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      // Simulate username check\n      if (['joe', 'tanner', 'billy', 'bob'].includes(first)) {\n        return reject('That username is taken');\n      }\n      // Simulate request faulure\n      if (first === 'reject') {\n        return reject(new Error('Unable to validate username.'));\n      }\n      return resolve();\n    }, 2000);\n  });\n};\n\nconst Info = () => {\n  const { next } = useMultistepApi();\n  return (\n    <Multistep.Step step=\"info\">\n      <Input\n        name=\"first\"\n        label=\"First Name\"\n        required\n        // asyncValidate={asyncValidate}\n      />\n      <Input name=\"last\" label=\"First Name\" required />\n      {/* <button type=\"button\" onClick={() => next(doSomething)}> */}\n      <button type=\"button\" onClick={next}>\n        Next\n      </button>\n    </Multistep.Step>\n  );\n};\n\nconst Favorite = () => {\n  const { next, previous } = useMultistepApi();\n  return (\n    <Multistep.Step step=\"favorite\">\n      <Input name=\"color\" label=\"Favorite Color:\" required />\n      <Input name=\"food\" label=\"Favorite Food:\" required />\n      <div className=\"button-group\">\n        <button type=\"button\" onClick={previous}>\n          Previous\n        </button>\n        <button type=\"button\" onClick={next}>\n          Next\n        </button>\n      </div>\n    </Multistep.Step>\n  );\n};\n\nconst Additional = () => {\n  const { previous } = useMultistepApi();\n  return (\n    <Multistep.Step step=\"additional\">\n      <Input name=\"height\" label=\"Height:\" required />\n      <Input name=\"weight\" label=\"Weight:\" required />\n      <div className=\"button-group\">\n        <button type=\"button\" onClick={previous}>\n          Previous\n        </button>\n        <button type=\"submit\">Submit</button>\n      </div>\n    </Multistep.Step>\n  );\n};\n\nconst Basic = () => {\n  return (\n    <div>\n      <Form autocomplete=\"off\">\n        <div style={{ display: 'flex', flexWrap: 'wrap' }}>\n          <div style={{ flex: 1, marginRight: '2rem' }}>\n            <Multistep>\n              <div\n                style={{\n                  padding: '10px',\n                  marginBottom: '10px'\n                }}>\n                <Info />\n                <Favorite />\n                <Additional />\n              </div>\n            </Multistep>\n          </div>\n          <div style={{ flex: 2, minWidth: '300px', marginLeft: '3rem' }}>\n            <Debug />\n          </div>\n        </div>\n      </Form>\n    </div>\n  );\n};\n\nexport default withDocs(readme, Basic);\n","export default \"# Multistep Forms\\n\\nSomtimes you need to create a form with multiple steps and the steps are dynamic, meaning the next\\nsteps depend on the previous steps. This can easliy be done with informed.\\nBelow is an example of a form that has four steps. It will not proceed to the next step,\\nunless the previous step is valid. In addition it will only validate relevant fields where a fields \\\"relevance\\\"\\ncan be defined by a `relevant` function.\\n\\nThis is hard to describe in words so hopefully the example below helps!\\n\\n**Hint:** Perform the user flow described below.\\n\\n1. Click the next button to trigger validation.\\n1. Fill out the fields and click next.\\n1. Select the checkbox because you're allergic to peanut butter, then click next.\\n1. Select that you have an epipen, then click next.\\n1. Type in your favorite color and food, DONT CLICK NEXT.\\n1. You just remembered that you actually are NOT allergic to peanut butter. So Jump back to the allergies question.\\n1. Uncheck the checkbox and note how the form state changes! The souse name goes away!\\n1. Click next and note how you go to the favorite question instead of the epipen question.\\n\\n<!-- STORY -->\\n\\n```jsx\\nimport {\\n  Form,\\n  Input,\\n  Multistep,\\n  Checkbox,\\n  RadioGroup,\\n  Radio,\\n  Relevant,\\n  Debug,\\n  useMultistepApi,\\n  useMultistepState\\n} from 'informed';\\n\\nconst validate = value =>\\n  value == null ? 'This field is required' : undefined;\\n\\nconst Info = () => {\\n  const { next } = useMultistepApi();\\n  return (\\n    <Multistep.Step step=\\\"info\\\">\\n      <Input name=\\\"first\\\" label=\\\"First Name\\\" required />\\n      <Input name=\\\"last\\\" label=\\\"First Name\\\" required />\\n      <button type=\\\"button\\\" onClick={next}>\\n        Next\\n      </button>\\n    </Multistep.Step>\\n  );\\n};\\n\\nconst Allergic = () => {\\n  const { next, previous } = useMultistepApi();\\n  return (\\n    <Multistep.Step step=\\\"allergies\\\">\\n      <h5>Are you allergic to any of the following?</h5>\\n      <Checkbox name=\\\"peanuts\\\" label=\\\"Peanut butter?:\\\" />\\n      <Checkbox name=\\\"shellfish\\\" label=\\\"Shellfish:\\\" />\\n      <div className=\\\"button-group\\\">\\n        <button type=\\\"button\\\" onClick={previous}>\\n          Previous\\n        </button>\\n        <button type=\\\"button\\\" onClick={next}>\\n          Next\\n        </button>\\n      </div>\\n    </Multistep.Step>\\n  );\\n};\\n\\nconst EpiPen = () => {\\n  const { next, previous } = useMultistepApi();\\n\\n  // Only relevant if the person is allergic to something\\n  const relevant = ({ formState }) => {\\n    const { allergies } = formState.values;\\n    return allergies && Object.values(allergies).some(a => !!a);\\n  };\\n\\n  return (\\n    <Multistep.Step step=\\\"treatment\\\" relevant={relevant}>\\n      <label>\\n        Do you have an epipen?:\\n        <RadioGroup name=\\\"epipen\\\" required>\\n          <Radio value=\\\"yes\\\" label=\\\"Yes\\\" />\\n          <Radio value=\\\"no\\\" label=\\\"No\\\" />\\n        </RadioGroup>\\n      </label>\\n      <div className=\\\"button-group\\\">\\n        <button type=\\\"button\\\" onClick={previous}>\\n          Previous\\n        </button>\\n        <button type=\\\"button\\\" onClick={next}>\\n          Next\\n        </button>\\n      </div>\\n    </Multistep.Step>\\n  );\\n};\\n\\nconst Color = () => {\\n  const { next, previous } = useMultistepApi();\\n  const { nextStep } = useMultistepState();\\n\\n  return (\\n    <Multistep.Step step=\\\"favorite\\\">\\n      <Input name=\\\"color\\\" label=\\\"Favorite Color:\\\" required />\\n      <Input name=\\\"food\\\" label=\\\"Favorite Food:\\\" required />\\n      <Checkbox name=\\\"pet\\\" label=\\\"Do you have a pet?\\\" />\\n      <div className=\\\"button-group\\\">\\n        <button type=\\\"button\\\" onClick={previous}>\\n          Previous\\n        </button>\\n        {nextStep ? (\\n          <button type=\\\"button\\\" onClick={next}>\\n            Next\\n          </button>\\n        ) : null}\\n        {!nextStep ? <button type=\\\"submit\\\">Submit</button> : null}\\n      </div>\\n    </Multistep.Step>\\n  );\\n};\\n\\nconst Dog = () => {\\n  const { previous } = useMultistepApi();\\n\\n  // Only relevant if the person is has a pet\\n  const relevant = ({ formState }) => {\\n    const { favorite } = formState.values;\\n    return favorite?.pet;\\n  };\\n\\n  return (\\n    <Multistep.Step step=\\\"pets\\\" previous=\\\"color\\\" relevant={relevant}>\\n      <Checkbox name=\\\"hasDog\\\" label=\\\"Do you have a dog?\\\" />\\n      <Relevant\\n        when={({ formApi, scope }) => formApi.getValue(`${scope}.hasDog`)}>\\n        <Input name=\\\"dogName\\\" label=\\\"Whats your dogs name?\\\" required />\\n      </Relevant>\\n      <Checkbox name=\\\"hasCat\\\" label=\\\"Do you have a cat?\\\" />\\n      <Input\\n        name=\\\"catName\\\"\\n        label=\\\"Whats your cats name?\\\"\\n        required\\n        relevant={({ formApi, scope }) => formApi.getValue(`${scope}.hasCat`)}\\n      />\\n      <div className=\\\"button-group\\\">\\n        <button type=\\\"button\\\" onClick={previous}>\\n          Previous\\n        </button>\\n        <button type=\\\"submit\\\">Submit</button>\\n      </div>\\n    </Multistep.Step>\\n  );\\n};\\n\\nconst Buttons = () => {\\n  const { setCurrent } = useMultistepApi();\\n\\n  return (\\n    <div>\\n      <button type=\\\"button\\\" onClick={() => setCurrent('info')}>\\n        Jump2 Info\\n      </button>\\n      <button type=\\\"button\\\" onClick={() => setCurrent('allergies')}>\\n        Jump2 Allergic\\n      </button>\\n      <button type=\\\"button\\\" onClick={() => setCurrent('treatment')}>\\n        Jump2 EpiPen\\n      </button>\\n      <button type=\\\"button\\\" onClick={() => setCurrent('favorite')}>\\n        Jump2 Color\\n      </button>\\n      <button type=\\\"button\\\" onClick={() => setCurrent('pets')}>\\n        Jump2 Dog\\n      </button>\\n    </div>\\n  );\\n};\\n\\nconst Example = () => {\\n  return (\\n    <Form autocomplete=\\\"off\\\">\\n      <Multistep>\\n        <Info />\\n        <Allergic />\\n        <EpiPen />\\n        <Color />\\n        <Dog />\\n        <Buttons />\\n      </Multistep>\\n      <Debug />\\n    </Form>\\n  );\\n};\\n```\\n\";","import React, { useState, useRef } from 'react';\nimport withDocs from '../../utils/withDocs';\nimport readme from './README.md';\n\nimport {\n  Form,\n  Input,\n  useFormApi,\n  useMultistepApi,\n  useMultistepState,\n  useFormState,\n  useFieldState,\n  //FormState,\n  ArrayField,\n  Multistep,\n  Checkbox,\n  RadioGroup,\n  Radio,\n  Relevant,\n  Debug\n} from '../../../src';\n\nconst asyncValidate = username => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      // Simulate username check\n      if (['joe', 'tanner', 'billy', 'bob'].includes(username)) {\n        return resolve('That username is taken');\n      }\n      // Simulate request faulure\n      if (username === 'reject') {\n        return reject(new Error('Unable to validate username.'));\n      }\n      return resolve();\n    }, 2000);\n  });\n};\n\nconst doSomething = ({ values }) => {\n  const { first } = values;\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      // Simulate username check\n      if (['joe', 'tanner', 'billy', 'bob'].includes(first)) {\n        return reject('That username is taken');\n      }\n      // Simulate request faulure\n      if (first === 'reject') {\n        return reject(new Error('Unable to validate username.'));\n      }\n      return resolve();\n    }, 2000);\n  });\n};\n\nconst Info = () => {\n  const { next } = useMultistepApi();\n  return (\n    <Multistep.Step step=\"info\">\n      <Input\n        name=\"first\"\n        label=\"First Name\"\n        required\n        // asyncValidate={asyncValidate}\n      />\n      <Input name=\"last\" label=\"First Name\" required />\n      {/* <button type=\"button\" onClick={() => next(doSomething)}> */}\n      <button type=\"button\" onClick={next}>\n        Next\n      </button>\n    </Multistep.Step>\n  );\n};\n\nconst Allergic = () => {\n  const { next, previous } = useMultistepApi();\n  return (\n    <Multistep.Step step=\"allergies\">\n      <h5>Are you allergic to any of the following?</h5>\n      <Checkbox name=\"peanuts\" label=\"Peanut butter?:\" />\n      <Checkbox name=\"shellfish\" label=\"Shellfish:\" />\n      <div className=\"button-group\">\n        <button type=\"button\" onClick={previous}>\n          Previous\n        </button>\n        <button type=\"button\" onClick={next}>\n          Next\n        </button>\n      </div>\n    </Multistep.Step>\n  );\n};\n\nconst EpiPen = () => {\n  const { next, previous } = useMultistepApi();\n\n  // Only relevant if the person is allergic to something\n  const relevant = ({ formState }) => {\n    const { allergies } = formState.values;\n    return allergies && Object.values(allergies).some(a => !!a);\n  };\n\n  return (\n    <Multistep.Step step=\"treatment\" relevant={relevant}>\n      <label>\n        Do you have an epipen?:\n        <RadioGroup name=\"epipen\" required>\n          <Radio value=\"yes\" label=\"Yes\" />\n          <Radio value=\"no\" label=\"No\" />\n        </RadioGroup>\n      </label>\n      <div className=\"button-group\">\n        <button type=\"button\" onClick={previous}>\n          Previous\n        </button>\n        <button type=\"button\" onClick={next}>\n          Next\n        </button>\n      </div>\n    </Multistep.Step>\n  );\n};\n\nconst Color = () => {\n  const { next, previous } = useMultistepApi();\n  const { nextStep } = useMultistepState();\n\n  return (\n    <Multistep.Step step=\"favorite\">\n      <Input name=\"color\" label=\"Favorite Color:\" required />\n      <Input name=\"food\" label=\"Favorite Food:\" required />\n      <Checkbox name=\"pet\" label=\"Do you have a pet?\" />\n      <div className=\"button-group\">\n        <button type=\"button\" onClick={previous}>\n          Previous\n        </button>\n        {nextStep ? (\n          <button type=\"button\" onClick={next}>\n            Next\n          </button>\n        ) : null}\n        {!nextStep ? <button type=\"submit\">Submit</button> : null}\n      </div>\n    </Multistep.Step>\n  );\n};\n\nconst Dog = () => {\n  const { previous } = useMultistepApi();\n\n  // Only relevant if the person is has a pet\n  const relevant = ({ formState }) => {\n    const { favorite } = formState.values;\n    return favorite?.pet;\n  };\n\n  return (\n    <Multistep.Step step=\"pets\" previous=\"color\" relevant={relevant}>\n      <Checkbox name=\"hasDog\" label=\"Do you have a dog?\" />\n      <Relevant\n        when={({ formApi, scope }) => formApi.getValue(`${scope}.hasDog`)}>\n        <Input name=\"dogName\" label=\"Whats your dogs name?\" required />\n      </Relevant>\n      <Checkbox name=\"hasCat\" label=\"Do you have a cat?\" />\n      <Input\n        name=\"catName\"\n        label=\"Whats your cats name?\"\n        required\n        relevant={({ formApi, scope }) => formApi.getValue(`${scope}.hasCat`)}\n      />\n      <div className=\"button-group\">\n        <button type=\"button\" onClick={previous}>\n          Previous\n        </button>\n        <button type=\"submit\">Submit</button>\n      </div>\n    </Multistep.Step>\n  );\n};\n\nconst Buttons = () => {\n  const { setCurrent } = useMultistepApi();\n\n  return (\n    <div>\n      <button type=\"button\" onClick={() => setCurrent('info')}>\n        Jump2 Info\n      </button>\n      <button type=\"button\" onClick={() => setCurrent('allergies')}>\n        Jump2 Allergic\n      </button>\n      <button type=\"button\" onClick={() => setCurrent('treatment')}>\n        Jump2 EpiPen\n      </button>\n      <button type=\"button\" onClick={() => setCurrent('favorite')}>\n        Jump2 Color\n      </button>\n      <button type=\"button\" onClick={() => setCurrent('pets')}>\n        Jump2 Dog\n      </button>\n    </div>\n  );\n};\n\nconst Basic = () => {\n  const [state, setState] = useState(0);\n  const multistepApiRef = useRef();\n\n  // const initialValues = {\n  //   first: 'Joe',\n  //   allergic: true,\n  //   epipen: 'yes'\n  // };\n\n  // const initialValues = {\n  //   info: {\n  //     first: 'Joe',\n  //     last: 'Puzzo'\n  //   },\n  //   allergies: {\n  //     peanuts: false\n  //   },\n  //   treatment: {\n  //     epipen: 'yes'\n  //   }\n  // }\n\n  return (\n    <div>\n      {/* {state}\n      <button type=\"button\" onClick={() => setState(prev => prev + 1)}>\n        Click Me\n      </button> */}\n      {/* <button\n        type=\"button\"\n        onClick={() => multistepApiRef.current.setCurrent('color')}>\n        Click Me\n      </button> */}\n\n      <Form autocomplete=\"off\">\n        <div style={{ display: 'flex', flexWrap: 'wrap' }}>\n          <div style={{ flex: 1, marginRight: '2rem' }}>\n            {/* initialStep=\"info\" */}\n            <Multistep\n              // initialStep=\"allergies\"\n              multistepApiRef={multistepApiRef}>\n              <div\n                style={{\n                  // border: 'solid 1px',\n                  padding: '10px',\n                  marginBottom: '10px'\n                }}>\n                <Info />\n                <Allergic state={state} />\n                <EpiPen />\n                <Color />\n                <Dog />\n              </div>\n              <Buttons />\n            </Multistep>\n          </div>\n          <div style={{ flex: 2, minWidth: '300px', marginLeft: '3rem' }}>\n            <Debug />\n          </div>\n        </div>\n      </Form>\n    </div>\n  );\n};\n\nexport default withDocs(readme, Basic);\n","export default \"# MultistepState\\n\\nSometimes you need access to the state. Below we show what step we are on and the buttons tell us where we go if we click them.\\n\\n### MultistepSate\\n\\n| Name         | Example | Description                |\\n| ------------ | ------- | -------------------------- |\\n| current      | \\\"step2\\\" | the current step we are on |\\n| nextStep     | \\\"step3\\\" | the next step              |\\n| previousStep | \\\"step1\\\" | the previous step          |\\n\\n<!-- STORY -->\\n\\n```jsx\\nimport {\\n  Form,\\n  Input,\\n  Multistep,\\n  Checkbox,\\n  Debug,\\n  useMultistepApi,\\n  useMultistepState\\n} from 'informed';\\n\\nfunction capitalize(string) {\\n  return string ? string.charAt(0).toUpperCase() + string.slice(1) : string;\\n}\\n\\nconst Info = () => {\\n  const { next } = useMultistepApi();\\n  const { nextStep } = useMultistepState();\\n  return (\\n    <Multistep.Step step=\\\"info\\\">\\n      <Input name=\\\"first\\\" label=\\\"First Name\\\" required />\\n      <Input name=\\\"last\\\" label=\\\"First Name\\\" required />\\n      <button type=\\\"button\\\" onClick={next}>\\n        Next\\n      </button>\\n    </Multistep.Step>\\n  );\\n};\\n\\nconst Favorite = () => {\\n  const { next, previous } = useMultistepApi();\\n  const { nextStep, previousStep } = useMultistepState();\\n  return (\\n    <Multistep.Step step=\\\"favorite\\\">\\n      <Input name=\\\"color\\\" label=\\\"Favorite Color:\\\" required />\\n      <Input name=\\\"food\\\" label=\\\"Favorite Food:\\\" required />\\n      <div className=\\\"button-group\\\">\\n        <button type=\\\"button\\\" onClick={previous}>\\n          {capitalize(previousStep)}\\n        </button>\\n        <button type=\\\"button\\\" onClick={next}>\\n          {capitalize(nextStep)}\\n        </button>\\n      </div>\\n    </Multistep.Step>\\n  );\\n};\\n\\nconst Additional = () => {\\n  const { previous } = useMultistepApi();\\n  const { previousStep } = useMultistepState();\\n  return (\\n    <Multistep.Step step=\\\"additional\\\">\\n      <Input name=\\\"height\\\" label=\\\"Height:\\\" required />\\n      <Input name=\\\"weight\\\" label=\\\"Weight:\\\" required />\\n      <div className=\\\"button-group\\\">\\n        <button type=\\\"button\\\" onClick={previous}>\\n          {capitalize(previousStep)}\\n        </button>\\n        <button type=\\\"submit\\\">Submit</button>\\n      </div>\\n    </Multistep.Step>\\n  );\\n};\\n\\nconst StepIndicator = () => {\\n  const { current } = useMultistepState();\\n\\n  return <h3>{capitalize(current)}</h3>;\\n};\\n\\nconst Example = () => {\\n  return (\\n    <Form autocomplete=\\\"off\\\">\\n      <Multistep>\\n        <StepIndicator />\\n        <Info />\\n        <Favorite />\\n        <Additional />\\n      </Multistep>\\n      <Debug />\\n    </Form>\\n  );\\n};\\n```\\n\";","import React, { useState, useRef } from 'react';\nimport withDocs from '../../utils/withDocs';\nimport readme from './README.md';\n\nimport {\n  Form,\n  Input,\n  useFormApi,\n  useMultistepApi,\n  useMultistepState,\n  useFormState,\n  useFieldState,\n  //FormState,\n  ArrayField,\n  Multistep,\n  Checkbox,\n  RadioGroup,\n  Radio,\n  Relevant,\n  Debug\n} from '../../../src';\n\nconst asyncValidate = username => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      // Simulate username check\n      if (['joe', 'tanner', 'billy', 'bob'].includes(username)) {\n        return resolve('That username is taken');\n      }\n      // Simulate request faulure\n      if (username === 'reject') {\n        return reject(new Error('Unable to validate username.'));\n      }\n      return resolve();\n    }, 2000);\n  });\n};\n\nconst doSomething = ({ values }) => {\n  const { first } = values;\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      // Simulate username check\n      if (['joe', 'tanner', 'billy', 'bob'].includes(first)) {\n        return reject('That username is taken');\n      }\n      // Simulate request faulure\n      if (first === 'reject') {\n        return reject(new Error('Unable to validate username.'));\n      }\n      return resolve();\n    }, 2000);\n  });\n};\n\nfunction capitalize(string) {\n  return string ? string.charAt(0).toUpperCase() + string.slice(1) : string;\n}\n\nconst Info = () => {\n  const { next, getCurrentStep } = useMultistepApi();\n  const { nextStep } = useMultistepState();\n  return (\n    <Multistep.Step step=\"info\">\n      <Input\n        name=\"first\"\n        label=\"First Name\"\n        required\n        // asyncValidate={asyncValidate}\n      />\n      <Input name=\"last\" label=\"First Name\" required />\n      {/* <button type=\"button\" onClick={() => next(doSomething)}> */}\n      <button type=\"button\" onClick={next}>\n        {capitalize(nextStep)}\n      </button>\n      {/* <button type=\"button\" onClick={() => console.log(getCurrentStep())}>\n        Print\n      </button> */}\n    </Multistep.Step>\n  );\n};\n\nconst Favorite = () => {\n  const { next, previous, getCurrentStep } = useMultistepApi();\n  const { nextStep, previousStep } = useMultistepState();\n  return (\n    <Multistep.Step step=\"favorite\">\n      <Input name=\"color\" label=\"Favorite Color:\" required />\n      <Input name=\"food\" label=\"Favorite Food:\" required />\n      <div className=\"button-group\">\n        <button type=\"button\" onClick={previous}>\n          {capitalize(previousStep)}\n        </button>\n        <button type=\"button\" onClick={next}>\n          {capitalize(nextStep)}\n        </button>\n        {/* <button type=\"button\" onClick={() => console.log(getCurrentStep())}>\n          Print\n        </button> */}\n      </div>\n    </Multistep.Step>\n  );\n};\n\nconst Additional = () => {\n  const { previous } = useMultistepApi();\n  const { previousStep } = useMultistepState();\n  return (\n    <Multistep.Step step=\"additional\">\n      <Input name=\"height\" label=\"Height:\" required />\n      <Input name=\"weight\" label=\"Weight:\" required />\n      <div className=\"button-group\">\n        <button type=\"button\" onClick={previous}>\n          {capitalize(previousStep)}\n        </button>\n        <button type=\"submit\">Submit</button>\n      </div>\n    </Multistep.Step>\n  );\n};\n\nconst StepIndicator = () => {\n  const { current } = useMultistepState();\n\n  return <h3>{capitalize(current)}</h3>;\n};\n\nconst Basic = () => {\n  return (\n    <div>\n      <Form autocomplete=\"off\">\n        <div style={{ display: 'flex', flexWrap: 'wrap' }}>\n          <div style={{ flex: 1, marginRight: '2rem' }}>\n            <Multistep>\n              <div\n                style={{\n                  padding: '10px',\n                  marginBottom: '10px'\n                }}>\n                <StepIndicator />\n                <Info />\n                <Favorite />\n                <Additional />\n              </div>\n            </Multistep>\n          </div>\n          <div style={{ flex: 2, minWidth: '300px', marginLeft: '3rem' }}>\n            <Debug />\n          </div>\n        </div>\n      </Form>\n    </div>\n  );\n};\n\nexport default withDocs(readme, Basic);\n","export default \"# Playground - Format\\n\\n<!-- STORY -->\\n\";","import React from 'react';\nimport withDocs from '../../utils/withDocs';\nimport readme from './README.md';\nimport { CodeBlock } from '../../utils/CodeBlock';\n\nlet code = `\nimport { Form, Input, Text, Select, Relevant, Checkbox, Debug } from 'informed';\nimport './style.css';\n\nconst onSubmit = ({values}) => {\n  window.alert(JSON.stringify(values));\n}\n\nexport default function App() {\n  return (\n    <Form onSubmit={onSubmit}>\n      <Input name=\"name\" label=\"Name\" placeholder=\"Elon\" />\n      <Input name=\"age\" type=\"number\" label=\"Age\" required=\"Age Required\" />\n      <Input name=\"phone\" label=\"Phone\" formatter=\"+1 (###)-###-####\" />\n      <Select name=\"car\" label=\"Car\" initialValue=\"ms\">\n        <option value=\"ms\">Model S</option>\n        <option value=\"m3\">Model 3</option>\n        <option value=\"mx\">Model X</option>\n        <option value=\"my\">Model Y</option>\n      </Select>\n      <Checkbox name=\"married\" label=\"Married?\" />\n      <Relevant when={({ formState }) => formState.values.married}>\n        <Input name=\"spouse\" label=\"Spouse\" />\n      </Relevant>\n      <button type=\"submit\">Submit</button>\n      <Debug />\n    </Form>\n  );\n};\n`;\n\nconst Playground = () => {\n  return <CodeBlock code={code} />;\n};\n\nexport default withDocs(readme, Playground);\n","export default \"# Playground - Schema\\n\\n<!-- STORY -->\\n\";","import React from 'react';\nimport withDocs from '../../utils/withDocs';\nimport readme from './README.md';\n\nimport { CodeBlock } from '../../utils/CodeBlock';\n\nlet code = `\nimport { Form, SchemaFields, Debug } from 'informed';\nimport './style.css';\n\nconst onSubmit = ({values}) => {\n  window.alert(JSON.stringify(values));\n}\n\nconst schema = {\n  type: 'object',\n  required: ['color'],\n  properties: {\n    name: {\n      type: 'string',\n      title: 'First Name',\n      'ui:control': 'input',\n      'ui:props': {\n        placeholder: 'Elon'\n      }\n    },\n    color: {\n      type: 'string',\n      title: 'Color',\n      'ui:control': 'select',\n      oneOf: [\n        {\n          const: '',\n          title: '- Select -',\n          'ui:props': {\n            disabled: true\n          }\n        },\n        { const: 'red', title: 'Red' },\n        { const: 'black', title: 'Black' },\n        { const: 'white', title: 'White' }\n      ]\n    },\n    model: {\n      type: 'string',\n      title: 'Model',\n      'ui:control': 'radio',\n      oneOf: [\n        { const: 'ms', title: 'Model S' },\n        { const: 'm3', title: 'Model 3' },\n        { const: 'mx', title: 'Model X' },\n        { const: 'my', title: 'Model Y' }\n      ],\n      default: null,\n      'ui:props': {\n        initialValue: 'm3'\n      }\n    },\n  }\n};\n\nexport default function App() {\n  return (\n    <Form schema={schema} onSubmit={onSubmit}>\n      <SchemaFields />\n      <button type=\"submit\">Submit</button>\n    </Form>\n  );\n};\n\n`;\n\nconst Playground = () => {\n  return <CodeBlock code={code} />;\n};\n\nexport default withDocs(readme, Playground);\n","export default \"# Relevance Optimization\\n\\nBy default the relevant function will evaluate on every single form state change.\\n\\nBelow you can see a form with relevance on two components.\\n\\n1. Has `relevanceWhen`\\n2. Has NO `relevanceWhen`\\n\\nClick the checkbox and see what happens.\\n\\nNote how the second count went up by 5, where the first went up by one!\\n\\nThis is because we told the first one to ONLY evaluate relevance when the `showInfo` field changes.\\n\\n<!-- STORY -->\\n\\n```jsx\\nimport React, { useState } from 'react';\\nimport { Form, Input, Checkbox, Relevant } from 'informed';\\n\\nconst RelevantComp = () => {\\n  const [call1, setCall1] = useState(0);\\n  const [call2, setCall2] = useState(0);\\n\\n  const relevant1 = ({ formState }) => {\\n    setCall1(prev => prev + 1);\\n    return formState.values.showInfo;\\n  };\\n\\n  const relevant2 = ({ formState }) => {\\n    setCall2(prev => prev + 1);\\n    return formState.values.showInfo;\\n  };\\n\\n  return (\\n    <Form>\\n      <strong>relevant1 called {call1} times</strong>\\n      <strong>relevant2 called {call2} times</strong>\\n      <Checkbox label=\\\"Show Info?\\\" name=\\\"showInfo\\\" />\\n      <Input\\n        label=\\\"Favorite Food\\\"\\n        name=\\\"food\\\"\\n        relevanceWhen={['showInfo']}\\n        relevant={relevant1}\\n      />\\n      <Input label=\\\"Favorite Movie\\\" name=\\\"movie\\\" relevant={relevant2} />\\n      <button type=\\\"button\\\" onClick={() => setExternalDep('BAR')}>\\n        Change\\n      </button>\\n      <Debug values />\\n    </Form>\\n  );\\n};\\n```\\n\";","import React, { useState, useRef } from 'react';\nimport withDocs from '../../utils/withDocs';\nimport readme from './README.md';\n\nimport { Form, Input, Debug, Checkbox } from '../../../src';\n\n// A custom input with a render counter\n// const Input = props => {\n//   const count = useRef(1);\n\n//   const { render, informed, userProps, fieldState, ref } = useField({\n//     type: 'text',\n//     ...props\n//   });\n//   const { label, id, ...rest } = userProps;\n//   return render(\n//     <>\n//       <label htmlFor={id}>\n//         {label} - <strong>rendered {count.current} times</strong>\n//       </label>\n//       <input id={id} ref={ref} {...informed} {...rest} />\n//     </>\n//   );\n// };\n\nconst RelevantComp = () => {\n  const [call1, setCall1] = useState(0);\n  const [call2, setCall2] = useState(0);\n\n  const relevant1 = ({ formState }) => {\n    setCall1(prev => prev + 1);\n    return formState.values.showInfo;\n  };\n\n  const relevant2 = ({ formState }) => {\n    setCall2(prev => prev + 1);\n    return formState.values.showInfo;\n  };\n\n  return (\n    <Form autoComplete=\"off\">\n      <strong>relevant1 called {call1} times</strong>\n      <br />\n      <br />\n      <strong>relevant2 called {call2} times</strong>\n      <br />\n      <br />\n      <Checkbox label=\"Show Info?\" name=\"showInfo\" />\n      <Input\n        label=\"Favorite Food\"\n        name=\"food\"\n        relevanceWhen={['showInfo']}\n        relevant={relevant1}\n      />\n      <Input label=\"Favorite Movie\" name=\"movie\" relevant={relevant2} />\n      <Debug values />\n    </Form>\n  );\n};\n\nexport default withDocs(readme, RelevantComp);\n","export default \"# Relevant Prop\\n\\nSometimes you need to conditionally render fields. Below is a simple\\nexample the shows or hides a spouse depending on a checkbox.\\n\\n<!-- STORY -->\\n\\n```jsx\\nimport { Form, Input, Checkbox, Relevant } from 'informed';\\n\\nconst RelevanceProp = () => (\\n  <Form>\\n    <Input name=\\\"name\\\" label=\\\"First name:\\\" />\\n    <Checkbox name=\\\"married\\\" label=\\\"Are you married?\\\" />\\n    <Input\\n      name=\\\"spouse\\\"\\n      label=\\\"Spouse name:\\\"\\n      relevant={({ formState }) => formState.values.married}\\n    />\\n    <Debug values />\\n  </Form>\\n);\\n```\\n\";","import React from 'react';\nimport withDocs from '../../utils/withDocs';\nimport readme from './README.md';\n\nimport { Form, Input, Debug, Checkbox } from '../../../src';\n\nconst RelevanceProp = () => (\n  <Form>\n    <Input name=\"name\" label=\"First name:\" />\n    <Checkbox name=\"married\" label=\"Are you married?\" />\n    <Input\n      name=\"spouse\"\n      label=\"Spouse name:\"\n      relevant={({ formState }) => formState.values.married}\n    />\n    <Debug values />\n  </Form>\n);\n\nexport default withDocs(readme, RelevanceProp);\n","export default \"# Relevance Component\\n\\nSometimes you need to conditionally render fields. Below is a simple\\nexample the shows or hides a spouse depending on a checkbox.\\n\\n<!-- STORY -->\\n\\n```jsx\\nimport { Form, Input, Checkbox, Relevant } from 'informed';\\n\\nconst RelevantComonent = () => (\\n  <Form>\\n    <Input name=\\\"name\\\" label=\\\"First name:\\\" />\\n    <Checkbox name=\\\"married\\\" label=\\\"Are you married?\\\" />\\n    <Relevant when={({ formState }) => formState.values.married}>\\n      <Input name=\\\"spouse\\\" label=\\\"Spouse name:\\\" />\\n    </Relevant>\\n    <Debug values />\\n  </Form>\\n);\\n```\\n\";","import React from 'react';\nimport withDocs from '../../utils/withDocs';\nimport readme from './README.md';\n\nimport {\n  Form,\n  Input,\n  RadioGroup,\n  Radio,\n  Relevant,\n  Debug,\n  Checkbox\n} from '../../../src';\n\nconst RelevantComonent = () => (\n  <Form>\n    <Input name=\"name\" label=\"First name:\" />\n    <Checkbox name=\"married\" label=\"Are you married?\" />\n    <Relevant when={({ formState }) => formState.values.married}>\n      <Input name=\"spouse\" label=\"Spouse name:\" />\n    </Relevant>\n    <Debug values />\n  </Form>\n);\n\nexport default withDocs(readme, RelevantComonent);\n","export default \"# Scoped Relevance\\n\\nSometimes you need to conditionally render fields when they are within a scope.\\n\\nThis is particularly usefull in array fields where your field might be:\\n\\n```js\\n'friends[1].name';\\n// OR\\n'friends[4].name';\\n// So you\\n`${scope}.name`;\\n```\\n\\n</br>\\n\\nBelow will use the scope component to show this off. When the child is over 16 they can have a car!\\n\\n<!-- STORY -->\\n\\n```jsx\\nimport { Form, Input, Select, Relevant, Scope, Debug } from 'informed';\\n\\nconst Example = () => (\\n  <Form>\\n    <Scope scope=\\\"child\\\">\\n      <Input name=\\\"age\\\" type=\\\"number\\\" label=\\\"How old is your child?\\\" />\\n      <Relevant\\n        when={({ formApi, scope }) => formApi.getValue(`${scope}.age`) >= 16}>\\n        <Select name=\\\"car\\\" label=\\\"What car do they drive?\\\">\\n          <option value=\\\"ms\\\">Model S</option>\\n          <option value=\\\"m3\\\">Model 3</option>\\n          <option value=\\\"mx\\\">Model X</option>\\n          <option value=\\\"my\\\">Model Y</option>\\n        </Select>\\n      </Relevant>\\n    </Scope>\\n    <Debug values />\\n  </Form>\\n);\\n```\\n\";","import React from 'react';\nimport withDocs from '../../utils/withDocs';\nimport readme from './README.md';\n\nimport { Form, Input, Select, Relevant, Debug, Scope } from '../../../src';\n\nconst RelevantComonent = () => (\n  <Form>\n    <Scope scope=\"child\">\n      <Input name=\"age\" type=\"number\" label=\"How old is your child?\" />\n      <Relevant\n        when={({ formApi, scope }) => formApi.getValue(`${scope}.age`) >= 16}>\n        <Select name=\"car\" label=\"What car do they drive?\">\n          <option value=\"ms\">Model S</option>\n          <option value=\"m3\">Model 3</option>\n          <option value=\"mx\">Model X</option>\n          <option value=\"my\">Model Y</option>\n        </Select>\n      </Relevant>\n    </Scope>\n    <Debug values />\n  </Form>\n);\n\nexport default withDocs(readme, RelevantComonent);\n","export default \"# Array Field in Schema !!!\\n\\n** Note: This is in beta and is subject to change! **\\n\\n<!-- STORY -->\\n\\n```jsx\\nimport { Form, SchemaFields } from 'informed';\\nimport Ajv from 'ajv';\\n\\nconst initialValue = [\\n  {\\n    name: 'Joe',\\n    age: '26'\\n  },\\n  {\\n    name: 'Elon',\\n    age: '49'\\n  }\\n];\\n\\nconst schema = {\\n  type: 'object',\\n  required: ['name', 'siblings'],\\n  properties: {\\n    name: {\\n      type: 'string',\\n      title: 'First name',\\n      'ui:control': 'input'\\n    },\\n    siblings: {\\n      type: 'array',\\n      minItems: 2,\\n      'ui:control': 'array',\\n      'ui:props': {\\n        initialValue\\n      },\\n      'ui:before': [{ 'ui:control': 'add' }],\\n      items: {\\n        type: 'object',\\n        required: ['name', 'age'],\\n        properties: {\\n          name: {\\n            type: 'string',\\n            title: 'Sibling name',\\n            'ui:control': 'input'\\n          },\\n          age: {\\n            type: 'number',\\n            title: 'Sibling age',\\n            minimum: 0,\\n            'ui:control': 'input',\\n            'ui:props': {\\n              type: 'number'\\n            }\\n          },\\n          married: {\\n            type: 'string',\\n            title: 'Are you married?',\\n            enum: ['yes', 'no'],\\n            'ui:control': 'radio',\\n            'ui:props': {\\n              notify: ['spouse']\\n            }\\n          },\\n          spouse: {\\n            type: 'string',\\n            title: 'Spouse name',\\n            'ui:control': 'input',\\n            'ui:props': {\\n              relevant: (values, { parentPath, get }) => {\\n                const married = get(values, `${parentPath}.married`);\\n                return married === 'yes';\\n              }\\n            }\\n          },\\n          'ui:component:remove': { 'ui:control': 'remove' }\\n        }\\n      }\\n    }\\n  }\\n};\\n\\nconst Schema = () => (\\n  <Form\\n    ajv={Ajv}\\n    schema={schema}\\n    onSubmit={({ values }) => window.alert(JSON.stringify(values, null, 2))}>\\n    <SchemaFields />\\n    <button type=\\\"submit\\\">Submit</button>\\n  </Form>\\n);\\n```\\n\";","import React from 'react';\nimport withDocs from '../../utils/withDocs';\nimport readme from './README.md';\nimport Ajv from 'ajv';\n\nimport { Form, SchemaFields, Debug } from '../../../src';\n\nconst initialValue = [\n  {\n    name: 'Joe',\n    age: '26'\n  },\n  {\n    name: 'Elon',\n    age: '49'\n  }\n];\n\n// const defaultValue = [\n//   {\n//     name: 'foo',\n//     age: '100'\n//   },\n//   {\n//     name: 'Bar',\n//     age: '100'\n//   }\n// ];\n\n// const initialValues = {\n//   siblings: initialValue\n// };\n\nconst schema = {\n  type: 'object',\n  required: ['name', 'siblings'],\n  properties: {\n    name: {\n      type: 'string',\n      title: 'First name',\n      'ui:control': 'input'\n    },\n    siblings: {\n      type: 'array',\n      minItems: 2,\n      'ui:control': 'array',\n      'ui:props': {\n        // initialValue\n        // initialValue: defaultValue\n        // defaultValue\n        initialValue\n      },\n      'ui:before': [{ 'ui:control': 'add' }],\n      items: {\n        type: 'object',\n        required: ['name', 'age'],\n        properties: {\n          name: {\n            type: 'string',\n            title: 'Sibling name',\n            'ui:control': 'input'\n          },\n          age: {\n            type: 'number',\n            title: 'Sibling age',\n            minimum: 0,\n            'ui:control': 'input',\n            'ui:props': {\n              type: 'number'\n            }\n          },\n          married: {\n            type: 'string',\n            title: 'Are you married?',\n            enum: ['yes', 'no'],\n            'ui:control': 'radio'\n            // 'ui:props': {\n            //   notify: ['spouse']\n            // }\n          },\n          spouse: {\n            type: 'string',\n            title: 'Spouse name',\n            'ui:control': 'input',\n            'ui:props': {\n              relevant: ({ scope, formApi }) => {\n                const married = formApi.getValue(`${scope}.married`);\n                return married === 'yes';\n              }\n            }\n          },\n          'ui:component:remove': { 'ui:control': 'remove' }\n        }\n      }\n    }\n  }\n};\n\nconst Schema = () => (\n  <Form\n    ajv={Ajv}\n    schema={schema}\n    // initialValues={initialValues}\n    onSubmit={({ values }) => window.alert(JSON.stringify(values, null, 2))}>\n    <div style={{ display: 'flex' }}>\n      <div style={{ flex: '1' }}>\n        <SchemaFields />\n        <button type=\"submit\">Submit</button>\n      </div>\n      <div style={{ flex: '1' }}>\n        <Debug errors values />\n      </div>\n    </div>\n  </Form>\n);\n\nexport default withDocs(readme, Schema);\n","export default \"# Double Nested Array Fields\\n\\n** Note: This is in beta and is subject to change! **\\n\\n<!-- STORY -->\\n\\n```jsx\\nimport { Form, SchemaFields } from 'informed';\\nimport Ajv from 'ajv';\\n\\nconst initialValue = [\\n  {\\n    name: 'Joe',\\n    age: '26',\\n    friends: [\\n      {\\n        name: 'Andres'\\n      }\\n    ]\\n  },\\n  {\\n    name: 'Elon',\\n    age: '49',\\n    friends: [\\n      {\\n        name: 'Kimbal'\\n      }\\n    ]\\n  }\\n];\\n\\nconst schema = {\\n  type: 'object',\\n  required: ['name', 'siblings'],\\n  properties: {\\n    name: {\\n      type: 'string',\\n      title: 'First name',\\n      'ui:control': 'input'\\n    },\\n    siblings: {\\n      type: 'array',\\n      minItems: 2,\\n      'ui:control': 'array',\\n      'ui:before': [\\n        { 'ui:control': 'add', 'ui:props': { text: 'Add Sibling' } }\\n      ],\\n      'ui:props': {\\n        initialValue\\n      },\\n      items: {\\n        type: 'object',\\n        required: ['name', 'age'],\\n        properties: {\\n          'ui:component:remove': {\\n            'ui:control': 'remove',\\n            'ui:props': { text: 'Remove Sibling' }\\n          },\\n          name: {\\n            type: 'string',\\n            title: 'Sibling name',\\n            'ui:control': 'input'\\n          },\\n          age: {\\n            type: 'number',\\n            title: 'Sibling age',\\n            'ui:control': 'input'\\n          },\\n          married: {\\n            type: 'string',\\n            title: 'Are you married?',\\n            enum: ['yes', 'no'],\\n            'ui:control': 'radio'\\n          },\\n          spouse: {\\n            type: 'string',\\n            title: 'Spouse name',\\n            'ui:control': 'input',\\n            'ui:props': {\\n              relevant: ({ scope, formApi }) => {\\n                const married = formApi.getValue(`${scope}.married`);\\n                return married === 'yes';\\n              }\\n            }\\n          },\\n          friends: {\\n            type: 'array',\\n            minItems: 2,\\n            'ui:control': 'array',\\n            'ui:before': [\\n              { 'ui:control': 'add', 'ui:props': { text: 'Add Friend' } }\\n            ],\\n            items: {\\n              type: 'object',\\n              required: ['name'],\\n              properties: {\\n                'ui:component:remove': {\\n                  'ui:control': 'remove',\\n                  'ui:props': { text: 'Remove Friend' }\\n                },\\n                name: {\\n                  type: 'string',\\n                  title: 'Friends name',\\n                  'ui:control': 'input'\\n                },\\n                married: {\\n                  type: 'string',\\n                  title: 'Married?',\\n                  enum: ['yes', 'no'],\\n                  'ui:control': 'radio'\\n                },\\n                spouse: {\\n                  type: 'string',\\n                  title: 'Spouse',\\n                  'ui:control': 'input',\\n                  'ui:props': {\\n                    relevant: ({ scope, formApi }) => {\\n                      const married = formApi.getValue(`${scope}.married`);\\n                      return married === 'yes';\\n                    },\\n                    keepState: true\\n                  }\\n                }\\n              }\\n            }\\n          }\\n        }\\n      }\\n    }\\n  }\\n};\\n\\nconst Schema = () => (\\n  <Form\\n    schema={schema}\\n    onSubmit={({ values }) => window.alert(JSON.stringify(values, null, 2))}>\\n    <SchemaFields />\\n    <button type=\\\"submit\\\">Submit</button>\\n  </Form>\\n);\\n```\\n\";","import React from 'react';\nimport withDocs from '../../utils/withDocs';\nimport readme from './README.md';\nimport Ajv from 'ajv';\n\nimport { Form, SchemaFields, Debug } from '../../../src';\n\nconst initialValue = [\n  {\n    name: 'Joe',\n    age: '26',\n    friends: [\n      {\n        name: 'Andres'\n      }\n    ]\n  },\n  {\n    name: 'Elon',\n    age: '49',\n    friends: [\n      {\n        name: 'Kimbal'\n      }\n    ]\n  }\n];\n\nconst schema = {\n  type: 'object',\n  required: ['name', 'siblings'],\n  properties: {\n    name: {\n      type: 'string',\n      title: 'First name',\n      'ui:control': 'input'\n    },\n    siblings: {\n      type: 'array',\n      minItems: 2,\n      'ui:control': 'array',\n      'ui:before': [\n        { 'ui:control': 'add', 'ui:props': { text: 'Add Sibling' } }\n      ],\n      'ui:props': {\n        initialValue\n      },\n      items: {\n        type: 'object',\n        required: ['name', 'age'],\n        properties: {\n          'ui:component:remove': {\n            'ui:control': 'remove',\n            'ui:props': { text: 'Remove Sibling' }\n          },\n          name: {\n            type: 'string',\n            title: 'Sibling name',\n            'ui:control': 'input'\n          },\n          age: {\n            type: 'number',\n            title: 'Sibling age',\n            'ui:control': 'input'\n          },\n          married: {\n            type: 'string',\n            title: 'Are you married?',\n            enum: ['yes', 'no'],\n            'ui:control': 'radio'\n            // 'ui:props': {\n            //   notify: ['spouse']\n            // }\n          },\n          spouse: {\n            type: 'string',\n            title: 'Spouse name',\n            'ui:control': 'input',\n            'ui:props': {\n              relevant: ({ scope, formApi }) => {\n                const married = formApi.getValue(`${scope}.married`);\n                return married === 'yes';\n              }\n            }\n          },\n          friends: {\n            type: 'array',\n            minItems: 2,\n            'ui:control': 'array',\n            'ui:before': [\n              { 'ui:control': 'add', 'ui:props': { text: 'Add Friend' } }\n            ],\n            items: {\n              type: 'object',\n              // 'ui:after': [{ 'ui:control': 'remove' }],\n              required: ['name'],\n              properties: {\n                'ui:component:remove': {\n                  'ui:control': 'remove',\n                  'ui:props': { text: 'Remove Friend' }\n                },\n                name: {\n                  type: 'string',\n                  title: 'Friends name',\n                  'ui:control': 'input'\n                  // 'ui:props': {\n                  //   style: { marginLeft: '200px' }\n                  // }\n                },\n                married: {\n                  type: 'string',\n                  title: 'Married?',\n                  enum: ['yes', 'no'],\n                  'ui:control': 'radio'\n                  // 'ui:props': {\n                  //   notify: ['spouse']\n                  // }\n                },\n                spouse: {\n                  type: 'string',\n                  title: 'Spouse',\n                  'ui:control': 'input',\n                  'ui:props': {\n                    relevant: ({ scope, formApi }) => {\n                      const married = formApi.getValue(`${scope}.married`);\n                      return married === 'yes';\n                    },\n                    keepState: true\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nconst Schema = () => (\n  <Form\n    ajv={Ajv}\n    schema={schema}\n    onSubmit={({ values }) => window.alert(JSON.stringify(values, null, 2))}>\n    <div style={{ display: 'flex' }}>\n      <div style={{ flex: '1' }}>\n        <SchemaFields />\n        <button type=\"submit\">Submit</button>\n      </div>\n      <div style={{ flex: '1' }}>\n        <Debug errors values />\n      </div>\n    </div>\n  </Form>\n);\n\nexport default withDocs(readme, Schema);\n","export default \"# Relevant Array Field in Schema !!!\\n\\n** Note: This is in beta and is subject to change! **\\n\\n<!-- STORY -->\\n\\n```jsx\\nimport { Form, SchemaFields } from 'informed';\\nimport Ajv from 'ajv';\\n\\nconst initialValue = [\\n  {\\n    name: 'Joe',\\n    age: '26'\\n  },\\n  {\\n    name: 'Elon',\\n    age: '49'\\n  }\\n];\\n\\nconst schema = {\\n  type: 'object',\\n  required: ['name', 'siblings'],\\n  properties: {\\n    name: {\\n      type: 'string',\\n      title: 'First name',\\n      'ui:control': 'input'\\n    },\\n    siblings: {\\n      type: 'array',\\n      minItems: 2,\\n      'ui:control': 'array',\\n      'ui:before': [{ 'ui:control': 'add' }],\\n      'ui:props': {\\n        initialValue,\\n        relevant: ({ formState }) => {\\n          const { name } = formState.values;\\n          return !name || name.length < 10;\\n        }\\n      },\\n      items: {\\n        type: 'object',\\n        required: ['name', 'age'],\\n        properties: {\\n          'ui:component:remove': { 'ui:control': 'remove' },\\n          name: {\\n            type: 'string',\\n            title: 'Sibling name',\\n            'ui:control': 'input',\\n            'ui:props': {\\n              keepState: true\\n            }\\n          },\\n          age: {\\n            type: 'number',\\n            title: 'Sibling age',\\n            minimum: 0,\\n            'ui:control': 'input',\\n            'ui:props': {\\n              keepState: true,\\n              type: 'number'\\n            }\\n          },\\n          married: {\\n            type: 'string',\\n            title: 'Are you married?',\\n            enum: ['yes', 'no'],\\n            'ui:control': 'radio',\\n            'ui:props': {\\n              keepState: true\\n            }\\n          },\\n          spouse: {\\n            type: 'string',\\n            title: 'Spouse name',\\n            'ui:control': 'input',\\n            'ui:props': {\\n              relevant: ({ scope, formApi }) => {\\n                const married = formApi.getValue(`${scope}.married`);\\n                return married === 'yes';\\n              },\\n              keepStateIfRelevant: true\\n            }\\n          }\\n        }\\n      }\\n    }\\n  }\\n};\\n\\nconst Schema = () => (\\n  <Form\\n    ajv={Ajv}\\n    schema={schema}\\n    onSubmit={({ values }) => window.alert(JSON.stringify(values, null, 2))}>\\n    <SchemaFields />\\n    <button type=\\\"submit\\\">Submit</button>\\n  </Form>\\n);\\n```\\n\";","import React from 'react';\nimport withDocs from '../../utils/withDocs';\nimport readme from './README.md';\nimport Ajv from 'ajv';\n\nimport { Form, SchemaFields, Debug } from '../../../src';\n\nconst initialValue = [\n  {\n    name: 'Joe',\n    age: 26\n  },\n  {\n    name: 'Elon',\n    age: 49\n  }\n];\n\nconst schema = {\n  type: 'object',\n  required: ['name', 'siblings'],\n  properties: {\n    name: {\n      type: 'string',\n      title: 'First name',\n      'ui:control': 'input'\n    },\n    siblings: {\n      type: 'array',\n      minItems: 2,\n      'ui:control': 'array',\n      'ui:before': [{ 'ui:control': 'add' }],\n      'ui:props': {\n        initialValue,\n        relevant: ({ formState }) => {\n          const { name } = formState.values;\n          return !name || name.length < 10;\n        }\n      },\n      items: {\n        type: 'object',\n        required: ['name', 'age'],\n        properties: {\n          'ui:component:remove': { 'ui:control': 'remove' },\n          name: {\n            type: 'string',\n            title: 'Sibling name',\n            'ui:control': 'input',\n            'ui:props': {\n              keepState: true\n            }\n          },\n          age: {\n            type: 'number',\n            title: 'Sibling age',\n            minimum: 0,\n            'ui:control': 'input',\n            'ui:props': {\n              keepState: true,\n              type: 'number'\n            }\n          },\n          married: {\n            type: 'string',\n            title: 'Are you married?',\n            enum: ['yes', 'no'],\n            'ui:control': 'radio',\n            'ui:props': {\n              keepState: true\n            }\n          },\n          spouse: {\n            type: 'string',\n            title: 'Spouse name',\n            'ui:control': 'input',\n            'ui:props': {\n              relevant: ({ scope, formApi }) => {\n                const married = formApi.getValue(`${scope}.married`);\n                return married === 'yes';\n              },\n              keepStateIfRelevant: true\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nconst Schema = () => (\n  <Form\n    ajv={Ajv}\n    schema={schema}\n    onSubmit={({ values }) => window.alert(JSON.stringify(values, null, 2))}>\n    <div style={{ display: 'flex' }}>\n      <div style={{ flex: '1' }}>\n        <SchemaFields />\n        <button type=\"submit\">Submit</button>\n      </div>\n      <div style={{ flex: '1' }}>\n        <Debug errors values />\n      </div>\n    </div>\n  </Form>\n);\n\nexport default withDocs(readme, Schema);\n","export default \"# Changing Schema\\n\\nSometimes you want to swap schema out for another schema\\n\\n<!-- STORY -->\\n\\n```jsx\\nimport { Form, SchemaFields, Debug } from 'informed';\\n\\nconst schema1 = {\\n  type: 'object',\\n  properties: {\\n    name: {\\n      type: 'string',\\n      title: 'Name',\\n      'ui:control': 'input'\\n    },\\n    age: {\\n      type: 'number',\\n      title: 'Age',\\n      'ui:control': 'input',\\n      'ui:props': {\\n        type: 'number'\\n      }\\n    }\\n  }\\n};\\n\\nconst schema2 = {\\n  type: 'object',\\n  properties: {\\n    brother: {\\n      type: 'string',\\n      title: 'Brother name',\\n      'ui:control': 'input'\\n    },\\n    age: {\\n      type: 'number',\\n      title: 'Brother age',\\n      'ui:control': 'input',\\n      'ui:props': {\\n        type: 'number'\\n      }\\n    }\\n  }\\n};\\n\\nconst Schema = () => {\\n  const [schema, setSchema] = useState(schema1);\\n  const formApiRef = useRef();\\n\\n  const onClick = useCallback(() => {\\n    // Set new schema\\n    setSchema(prev => (prev === schema1 ? schema2 : schema1));\\n  }, []);\\n\\n  useEffect(\\n    () => {\\n      // Reset the form\\n      formApiRef.current?.reset();\\n    },\\n    [schema]\\n  );\\n\\n  return (\\n    <Form schema={schema} formApiRef={formApiRef}>\\n      <SchemaFields />\\n      <button type=\\\"button\\\" onClick={onClick}>\\n        Toggle\\n      </button>\\n      <Debug values />\\n    </Form>\\n  );\\n};\\n```\\n\";","import React, { useCallback, useEffect, useRef, useState } from 'react';\nimport withDocs from '../../utils/withDocs';\nimport readme from './README.md';\n\nimport { Form, Debug, SchemaFields } from '../../../src';\n\nconst schema1 = {\n  type: 'object',\n  properties: {\n    name: {\n      type: 'string',\n      title: 'Name',\n      'ui:control': 'input'\n    },\n    age: {\n      type: 'number',\n      title: 'Age',\n      'ui:control': 'input',\n      'ui:props': {\n        type: 'number'\n      }\n    }\n  }\n};\n\nconst schema2 = {\n  type: 'object',\n  properties: {\n    brother: {\n      type: 'string',\n      title: 'Brother name',\n      'ui:control': 'input'\n    },\n    age: {\n      type: 'number',\n      title: 'Brother age',\n      'ui:control': 'input',\n      'ui:props': {\n        type: 'number'\n      }\n    }\n  }\n};\n\nconst Schema = () => {\n  const [schema, setSchema] = useState(schema1);\n  const formApiRef = useRef();\n\n  const onClick = useCallback(() => {\n    // Set new schema\n    setSchema(prev => (prev === schema1 ? schema2 : schema1));\n  }, []);\n\n  useEffect(\n    () => {\n      // Reset the form\n      formApiRef.current?.reset();\n    },\n    [schema]\n  );\n\n  return (\n    <Form schema={schema} formApiRef={formApiRef}>\n      <SchemaFields />\n      <button type=\"button\" onClick={onClick}>\n        Toggle\n      </button>\n      <Debug values />\n    </Form>\n  );\n};\n\nexport default withDocs(readme, Schema);\n","export default \"# Conditional Options\\n\\n<!-- STORY -->\\n\\n```jsx\\nimport { Form, SchemaFields } from 'informed';\\n\\nconst schema = {\\n  type: 'object',\\n  properties: {\\n    type: {\\n      type: 'string',\\n      'ui:control': 'select',\\n      title: 'Would you like a car or truck?',\\n      oneOf: [\\n        { const: 'car', title: 'Car' },\\n        { const: 'truck', title: 'Truck' }\\n      ],\\n      'ui:props': {\\n        initialValue: 'car'\\n      }\\n    },\\n    product: {\\n      type: 'string',\\n      'ui:control': 'select',\\n      title: 'Product'\\n    }\\n  },\\n  allOf: [\\n    {\\n      if: { properties: { type: { const: 'car' } }, required: ['type'] },\\n      then: {\\n        properties: {\\n          product: {\\n            oneOf: [\\n              { const: '', title: '- Select -' },\\n              { const: 'modelS', title: 'Model S' },\\n              { const: 'modelX', title: 'Model X' },\\n              { const: 'model3', title: 'Model 3' }\\n            ]\\n          }\\n        }\\n      }\\n    },\\n    {\\n      if: { properties: { type: { const: 'truck' } }, required: ['type'] },\\n      then: {\\n        properties: {\\n          product: {\\n            oneOf: [\\n              { const: '', title: '- Select -' },\\n              { const: 'semi', title: 'Semi Truck' },\\n              { const: 'cyber', title: 'Cyber Truck' }\\n            ]\\n          }\\n        }\\n      }\\n    }\\n  ]\\n};\\n\\nconst Schema = () => (\\n  <Form schema={schema}>\\n    <SchemaFields />\\n    <button type=\\\"submit\\\">Submit</button>\\n    <Debug />\\n  </Form>\\n);\\n```\\n\";","import React from 'react';\nimport withDocs from '../../utils/withDocs';\nimport readme from './README.md';\n\nimport { Form, SchemaFields, Debug } from '../../../src';\n\nconst schema = {\n  type: 'object',\n  properties: {\n    type: {\n      type: 'string',\n      'ui:control': 'select',\n      title: 'Would you like a car or truck?',\n      oneOf: [\n        { const: 'car', title: 'Car' },\n        { const: 'truck', title: 'Truck' }\n      ],\n      'ui:props': {\n        initialValue: 'car'\n      }\n    },\n    product: {\n      type: 'string',\n      'ui:control': 'select',\n      title: 'Product'\n    }\n  },\n  allOf: [\n    {\n      if: { properties: { type: { const: 'car' } }, required: ['type'] },\n      then: {\n        properties: {\n          product: {\n            oneOf: [\n              { const: '', title: '- Select -' },\n              { const: 'modelS', title: 'Model S' },\n              { const: 'modelX', title: 'Model X' },\n              { const: 'model3', title: 'Model 3' }\n            ]\n          }\n        }\n      }\n    },\n    {\n      if: { properties: { type: { const: 'truck' } }, required: ['type'] },\n      then: {\n        properties: {\n          product: {\n            oneOf: [\n              { const: '', title: '- Select -' },\n              { const: 'semi', title: 'Semi Truck' },\n              { const: 'cyber', title: 'Cyber Truck' }\n            ]\n            // 'ui:props': {\n            //   disabled: true\n            // }\n          }\n        }\n      }\n    }\n  ]\n};\n\nconst Schema = () => (\n  <Form schema={schema}>\n    <SchemaFields />\n    <button type=\"submit\">Submit</button>\n    <Debug />\n  </Form>\n);\n\nexport default withDocs(readme, Schema);\n","export default \"# Conditional Schema\\n\\n** Note: This is in beta and is subject to change! **\\n\\n<!-- STORY -->\\n\\n```jsx\\nimport { Form, SchemaFields } from 'informed';\\n\\nconst schema = {\\n  type: 'object',\\n  required: ['name'],\\n  properties: {\\n    name: {\\n      type: 'string',\\n      title: 'First name',\\n      'ui:control': 'input'\\n    },\\n    married: {\\n      type: 'string',\\n      title: 'Are you married?',\\n      enum: ['yes', 'no'],\\n      'ui:control': 'radio'\\n    }\\n  },\\n  allOf: [\\n    {\\n      if: {\\n        properties: {\\n          married: { const: 'yes' }\\n        },\\n        required: ['married']\\n      },\\n      then: {\\n        properties: {\\n          spouse: {\\n            type: 'string',\\n            title: 'Spouse name',\\n            'ui:control': 'input'\\n          }\\n        }\\n      }\\n    }\\n  ]\\n};\\n\\nconst Schema = () => (\\n  <Form schema={schema}>\\n    <SchemaFields />\\n    <button type=\\\"submit\\\">Submit</button>\\n    <Debug />\\n  </Form>\\n);\\n```\\n\";","import React from 'react';\nimport withDocs from '../../utils/withDocs';\nimport readme from './README.md';\n\nimport { Form, SchemaFields, Debug } from '../../../src';\n\nconst schema = {\n  type: 'object',\n  required: ['name'],\n  properties: {\n    name: {\n      type: 'string',\n      title: 'First name',\n      'ui:control': 'input'\n    },\n    married: {\n      type: 'string',\n      title: 'Are you married?',\n      enum: ['yes', 'no'],\n      'ui:control': 'radio'\n    }\n  },\n  allOf: [\n    {\n      if: {\n        properties: {\n          married: { const: 'yes' }\n        },\n        required: ['married']\n      },\n      then: {\n        properties: {\n          spouse: {\n            type: 'string',\n            title: 'Spouse name',\n            'ui:control': 'input'\n          }\n        }\n      }\n    }\n  ]\n};\n\n// const schema = {\n//   properties: {\n//     'ui:foo_wrapper': {}\n//   },\n//   allOf: [\n//     {\n//       $id: 'foo_wrapper',\n//       'ui:control': 'DivComp',\n//       type: 'object',\n//       properties: {\n//         firstName: {\n//           type: 'string',\n//           title: 'First name',\n//           'ui:control': 'input'\n//         },\n//         lastName: {\n//           type: 'string',\n//           title: 'Last name',\n//           'ui:control': 'input'\n//         }\n//       }\n//     }\n//   ]\n// };\n\n// const schema = {\n//   type: 'object',\n//   required: ['name'],\n//   properties: {}\n// };\n\n// for (let i = 0; i < 500; i++) {\n//   schema.properties[`name${i}`] = {\n//     type: 'string',\n//     title: 'Last name',\n//     'ui:control': 'input'\n//   };\n// }\n\nconst DivComp = ({ children }) => {\n  return (\n    <div>\n      <h3>Hello World</h3>\n      {children}\n    </div>\n  );\n};\n\nconst Schema = () => (\n  <Form schema={schema} components={{ DivComp }}>\n    <SchemaFields />\n    <button type=\"submit\">Submit</button>\n    <Debug />\n  </Form>\n);\n\nexport default withDocs(readme, Schema);\n","export default \"# Conditional Schema\\n\\n** Note: This is in beta and is subject to change! **\\n\\n<!-- STORY -->\\n\\n```jsx\\nimport { Form, SchemaFields } from 'informed';\\n\\nconst schema = {\\n  type: 'object',\\n  properties: {\\n    firstName: {\\n      type: 'string',\\n      title: 'First name',\\n      'ui:control': 'input'\\n    },\\n    'ui:lastName': {},\\n    email: {\\n      type: 'string',\\n      title: 'Email',\\n      format: 'email',\\n      'ui:control': 'input'\\n    },\\n    married: {\\n      type: 'string',\\n      title: 'Are you married?',\\n      enum: ['yes', 'no'],\\n      'ui:control': 'radio'\\n    },\\n    'ui:spouse': {},\\n    drinking: {\\n      type: 'object',\\n      properties: {\\n        age: {\\n          type: 'number',\\n          title: 'your age?',\\n          'ui:control': 'input'\\n        },\\n        'ui:idrink': {}\\n      },\\n      allOf: [\\n        {\\n          $id: 'idrink',\\n          if: {\\n            properties: {\\n              age: { minimum: 21, maximum: 30 }\\n            },\\n            required: ['age']\\n          },\\n          then: {\\n            properties: {\\n              doDrink: {\\n                type: 'boolean',\\n                title: 'I drink',\\n                'ui:control': 'checkbox',\\n                'ui:props': {\\n                  initialValue: true\\n                }\\n              },\\n              'ui:favoriteDrink': {}\\n            },\\n            allOf: [\\n              {\\n                $id: 'favoriteDrink',\\n                if: {\\n                  properties: { doDrink: { not: false } }\\n                },\\n                then: {\\n                  properties: {\\n                    favoriteDrink: {\\n                      type: 'string',\\n                      title: 'Favorite drink',\\n                      'ui:control': 'input'\\n                    }\\n                  }\\n                }\\n              }\\n            ]\\n          }\\n        }\\n      ]\\n    }\\n  },\\n  allOf: [\\n    {\\n      $id: 'spouse',\\n      if: {\\n        properties: {\\n          married: { const: 'yes' }\\n        },\\n        required: ['married']\\n      },\\n      then: {\\n        properties: {\\n          spouse: {\\n            type: 'string',\\n            title: 'Spouse name',\\n            'ui:control': 'input'\\n          }\\n        },\\n        required: ['spouse']\\n      }\\n    },\\n    {\\n      $id: 'lastName',\\n      if: {\\n        properties: {\\n          firstName: { not: { enum: ['Robin', 'Joe'] } }\\n        }\\n      },\\n      then: {\\n        properties: {\\n          lastName: {\\n            type: 'string',\\n            title: 'Last name',\\n            'ui:control': 'input'\\n          }\\n        }\\n      }\\n    }\\n  ],\\n  required: ['name', 'email']\\n};\\n\\nconst Schema = () => (\\n  <Form schema={schema}>\\n    <SchemaFields />\\n    <button type=\\\"submit\\\">Submit</button>\\n    <Debug />\\n  </Form>\\n);\\n```\\n\";","import React from 'react';\nimport withDocs from '../../utils/withDocs';\nimport readme from './README.md';\n\nimport { Form, SchemaFields, Debug } from '../../../src';\n\nconst schema = {\n  type: 'object',\n  properties: {\n    firstName: {\n      type: 'string',\n      title: 'First name',\n      'ui:control': 'input'\n    },\n    'ui:lastName': {},\n    email: {\n      type: 'string',\n      title: 'Email',\n      format: 'email',\n      'ui:control': 'input'\n    },\n    married: {\n      type: 'string',\n      title: 'Are you married?',\n      enum: ['yes', 'no'],\n      'ui:control': 'radio'\n    },\n    'ui:spouse': {},\n    drinking: {\n      type: 'object',\n      properties: {\n        age: {\n          type: 'number',\n          title: 'your age?',\n          'ui:control': 'input'\n        },\n        'ui:idrink': {}\n      },\n      allOf: [\n        {\n          $id: 'idrink',\n          if: {\n            properties: {\n              age: { minimum: 21, maximum: 30 }\n            },\n            required: ['age']\n          },\n          then: {\n            properties: {\n              doDrink: {\n                type: 'boolean',\n                title: 'I drink',\n                'ui:control': 'checkbox',\n                'ui:props': {\n                  initialValue: true\n                }\n              },\n              'ui:favoriteDrink': {}\n            },\n            allOf: [\n              {\n                $id: 'favoriteDrink',\n                if: {\n                  properties: { doDrink: { not: false } }\n                },\n                then: {\n                  properties: {\n                    favoriteDrink: {\n                      type: 'string',\n                      title: 'Favorite drink',\n                      'ui:control': 'input'\n                    }\n                  }\n                }\n              }\n            ]\n          }\n        }\n      ]\n    }\n  },\n  allOf: [\n    {\n      $id: 'spouse',\n      if: {\n        properties: {\n          married: { const: 'yes' }\n        },\n        required: ['married']\n      },\n      then: {\n        properties: {\n          spouse: {\n            type: 'string',\n            title: 'Spouse name',\n            'ui:control': 'input'\n          }\n        },\n        required: ['spouse']\n      }\n    },\n    {\n      $id: 'lastName',\n      if: {\n        properties: {\n          firstName: { not: { enum: ['Robin', 'Joe'] } }\n        }\n      },\n      then: {\n        properties: {\n          lastName: {\n            type: 'string',\n            title: 'Last name',\n            'ui:control': 'input'\n          }\n        }\n      }\n    }\n  ],\n  required: ['name', 'email']\n};\n\nconst Schema = () => (\n  <Form schema={schema}>\n    <SchemaFields />\n    <button type=\"submit\">Submit</button>\n    <Debug />\n  </Form>\n);\n\nexport default withDocs(readme, Schema);\n","export default \"# Custom Schema\\n\\nInformed comes with a custom schema adapter that maps field types to actual JSX elements.\\n\\nWhenever you create your own inputs, you have to create or add to informds `fieldMap`.\\n\\n```jsx\\nimport {\\n  useForm,\\n  useField,\\n  useArrayFieldApi,\\n  useArrayFieldItemApi,\\n  ArrayField,\\n  FormComponents,\\n  FormFields,\\n  Relevant,\\n  Debug\\n} from 'informed';\\n\\n// Step 1. Build your form component ---------------------\\n\\nconst Form = ({ children, ...rest }) => {\\n  const { formController, render, userProps } = useForm(rest);\\n\\n  return render(\\n    <form {...userProps} onSubmit={formController.submitForm}>\\n      {children}\\n    </form>\\n  );\\n};\\n\\n// Step 2. Build your input components --------------------\\n\\nconst Input = ({ label, ...props }) => {\\n  const { render, informed, userProps, ref } = useField({\\n    type: 'text',\\n    ...props\\n  });\\n\\n  return render(\\n    <label>\\n      {label}\\n      <input ref={ref} {...informed} {...userProps} />\\n    </label>\\n  );\\n};\\n\\nconst Checkbox = ({ label, ...props }) => {\\n  const { render, informed, userProps, ref } = useField({\\n    type: 'checkbox',\\n    ...props\\n  });\\n\\n  return render(\\n    <label>\\n      {label}\\n      <input ref={ref} {...informed} {...userProps} />\\n    </label>\\n  );\\n};\\n\\nconst Select = ({ label, children, options, ...props }) => {\\n  const { render, informed, userProps, ref } = useField({\\n    type: 'select',\\n    ...props\\n  });\\n\\n  return render(\\n    <label>\\n      {label}\\n      <select ref={ref} {...informed} {...userProps}>\\n        {options\\n          ? options.map(option => (\\n              <option\\n                key={option.value}\\n                value={option.value}\\n                disabled={option.disabled}>\\n                {option.label}\\n              </option>\\n            ))\\n          : children}\\n      </select>\\n    </label>\\n  );\\n};\\n\\nconst AddButton = () => {\\n  const { add } = useArrayFieldApi();\\n\\n  return (\\n    <button\\n      onClick={() => {\\n        add();\\n      }}\\n      type=\\\"button\\\">\\n      Add\\n    </button>\\n  );\\n};\\n\\nconst RemoveButton = () => {\\n  const { remove } = useArrayFieldItemApi();\\n\\n  return (\\n    <button\\n      onClick={() => {\\n        remove();\\n      }}\\n      type=\\\"button\\\">\\n      Remove\\n    </button>\\n  );\\n};\\n\\nconst MyArrayField = ({ name, items, ...props }) => {\\n  return (\\n    <ArrayField name={name} {...props}>\\n      <AddButton />\\n      <ArrayField.Items>\\n        {() => (\\n          <>\\n            <FormFields schema={items} />\\n            <RemoveButton />\\n          </>\\n        )}\\n      </ArrayField.Items>\\n    </ArrayField>\\n  );\\n};\\n\\n// Step 3. Define your field map --------------------\\n\\nconst adapter = {\\n  select: Select,\\n  input: Input,\\n  checkbox: Checkbox,\\n  add: AddButton,\\n  remove: RemoveButton,\\n  array: MyArrayField\\n};\\n\\n// Step 4. Build your forms!! -----------------------\\n\\nconst initialValue = [\\n  {\\n    name: 'Joe',\\n    age: '26'\\n  },\\n  {\\n    name: 'Elon',\\n    age: '49'\\n  }\\n];\\n\\nconst schema = {\\n  type: 'object',\\n  required: ['name', 'siblings'],\\n  properties: {\\n    name: {\\n      type: 'string',\\n      title: 'First name',\\n      'ui:control': 'input'\\n    },\\n    authorize: {\\n      type: 'boolean',\\n      title: 'Authorize',\\n      'ui:control': 'checkbox'\\n    },\\n    model: {\\n      type: 'string',\\n      title: 'Model',\\n      'ui:control': 'select',\\n      oneOf: [\\n        { const: 'ms', title: 'Model S' },\\n        { const: 'm3', title: 'Model 3' },\\n        { const: 'mx', title: 'Model X' },\\n        { const: 'my', title: 'Model Y' }\\n      ],\\n      'ui:props': {\\n        initialValue: 'm3'\\n      }\\n    },\\n    siblings: {\\n      type: 'array',\\n      minItems: 2,\\n      'ui:control': 'array',\\n      'ui:props': {\\n        initialValue\\n      },\\n      items: {\\n        type: 'object',\\n        required: ['name', 'age'],\\n        properties: {\\n          name: {\\n            type: 'string',\\n            title: 'Sibling name',\\n            'ui:control': 'input'\\n          },\\n          age: {\\n            type: 'number',\\n            title: 'Sibling age',\\n            minimum: 0,\\n            'ui:control': 'input',\\n            'ui:props': {\\n              type: 'number'\\n            }\\n          }\\n        }\\n      }\\n    }\\n  }\\n};\\n\\nconst Schema = () => (\\n  <Form schema={schema} adapter={adapter}>\\n    <SchemaFields />\\n    <button type=\\\"submit\\\">Submit</button>\\n    <Debug />\\n  </Form>\\n);\\n```\\n\\n<!-- STORY -->\\n\";","import React from 'react';\nimport withDocs from '../../utils/withDocs';\nimport readme from './README.md';\nimport {\n  useField,\n  useForm,\n  useArrayFieldApi,\n  useArrayFieldItemApi,\n  ArrayField,\n  FormComponents,\n  FormFields,\n  SchemaFields,\n  Debug\n} from '../../../src';\n\n// Step 1. Build your form component ---------------------\n\nconst Form = ({ children, ...rest }) => {\n  const { formController, render, userProps } = useForm(rest);\n\n  return render(\n    <form {...userProps} onSubmit={formController.submitForm}>\n      {children}\n    </form>\n  );\n};\n\n// Step 2. Build your input components --------------------\n\nconst Input = ({ label, ...props }) => {\n  const { render, informed, userProps, ref } = useField({\n    type: 'text',\n    ...props\n  });\n\n  return render(\n    <label>\n      {label}\n      <input ref={ref} {...informed} {...userProps} />\n    </label>\n  );\n};\n\nconst Checkbox = ({ label, ...props }) => {\n  const { render, informed, userProps, ref } = useField({\n    type: 'checkbox',\n    ...props\n  });\n  return render(\n    <label>\n      {label}\n      <input ref={ref} {...informed} {...userProps} />\n    </label>\n  );\n};\n\nconst Select = ({ label, children, options, ...props }) => {\n  const { render, informed, userProps, ref } = useField({\n    type: 'select',\n    ...props\n  });\n\n  return render(\n    <label>\n      {label}\n      <select ref={ref} {...informed} {...userProps}>\n        {options\n          ? options.map(option => (\n              <option\n                key={option.value}\n                value={option.value}\n                disabled={option.disabled}>\n                {option.label}\n              </option>\n            ))\n          : children}\n      </select>\n    </label>\n  );\n};\n\nconst AddButton = () => {\n  const { add } = useArrayFieldApi();\n\n  return (\n    <button\n      onClick={() => {\n        add();\n      }}\n      type=\"button\">\n      Add\n    </button>\n  );\n};\n\nconst RemoveButton = () => {\n  const { remove } = useArrayFieldItemApi();\n\n  return (\n    <button\n      onClick={() => {\n        remove();\n      }}\n      type=\"button\">\n      Remove\n    </button>\n  );\n};\n\nconst MyArrayField = ({ name, items, ...props }) => {\n  return (\n    <ArrayField name={name} {...props}>\n      <AddButton />\n      <ArrayField.Items>\n        {() => (\n          <>\n            <FormFields schema={items} />\n            <RemoveButton />\n          </>\n        )}\n      </ArrayField.Items>\n    </ArrayField>\n  );\n};\n\n// Step 3. Define your adapter --------------------\n\nconst adapter = {\n  select: Select,\n  input: Input,\n  checkbox: Checkbox,\n  add: AddButton,\n  remove: RemoveButton,\n  array: MyArrayField\n};\n\n// Step 4. Build your forms!! -----------------------\n\nconst initialValue = [\n  {\n    name: 'Joe',\n    age: '26'\n  },\n  {\n    name: 'Elon',\n    age: '49'\n  }\n];\n\nconst schema = {\n  type: 'object',\n  required: ['name', 'siblings'],\n  properties: {\n    name: {\n      type: 'string',\n      title: 'First name',\n      'ui:control': 'input'\n    },\n    authorize: {\n      type: 'string',\n      title: 'Authorize',\n      'ui:control': 'checkbox'\n    },\n    model: {\n      type: 'boolean',\n      title: 'Model',\n      'ui:control': 'select',\n      oneOf: [\n        { const: 'ms', title: 'Model S' },\n        { const: 'm3', title: 'Model 3' },\n        { const: 'mx', title: 'Model X' },\n        { const: 'my', title: 'Model Y' }\n      ],\n      'ui:props': {\n        initialValue: 'm3'\n      }\n    },\n    siblings: {\n      type: 'array',\n      minItems: 2,\n      'ui:control': 'array',\n      'ui:props': {\n        initialValue\n      },\n      items: {\n        type: 'object',\n        required: ['name', 'age'],\n        properties: {\n          name: {\n            type: 'string',\n            title: 'Sibling name',\n            'ui:control': 'input'\n          },\n          age: {\n            type: 'number',\n            title: 'Sibling age',\n            minimum: 0,\n            'ui:control': 'input',\n            'ui:props': {\n              type: 'number'\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nconst Schema = () => (\n  <Form schema={schema} adapter={adapter}>\n    <SchemaFields />\n    <button type=\"submit\">Submit</button>\n    <Debug />\n  </Form>\n);\n\nexport default withDocs(readme, Schema);\n","export default \"# Formatted Schema\\n\\nSometimes you want to control where the fields will end up in the dom.\\n\\n** Note: This is in beta and is subject to change! **\\n\\n<!-- STORY -->\\n\\n```jsx\\nimport { Form, SchemaFields } from '../../../src';\\n\\nconst schema = {\\n  type: 'object',\\n  properties: {\\n    name: {\\n      type: 'string',\\n      title: 'First name',\\n      'ui:control': 'input'\\n    },\\n    brother: {\\n      type: 'object',\\n      properties: {\\n        name: {\\n          type: 'string',\\n          title: 'Brother name',\\n          'ui:control': 'input'\\n        },\\n        age: {\\n          type: 'number',\\n          title: 'Brother age',\\n          'ui:control': 'input',\\n          'ui:props': {\\n            type: 'number'\\n          }\\n        }\\n      }\\n    }\\n  }\\n};\\n\\nconst Schema = () => (\\n  <Form schema={schema}>\\n    <h5>Your Info:</h5>\\n    <FormField name=\\\"name\\\" />\\n    <br />\\n    <h5>Brothers Info:</h5>\\n    <Scope scope=\\\"brother\\\">\\n      <FormField name=\\\"name\\\" />\\n      <FormField name=\\\"age\\\" />\\n    </Scope>\\n    <button type=\\\"submit\\\">Submit</button>\\n    <Debug />\\n  </Form>\\n);\\n```\\n\";","import React from 'react';\nimport withDocs from '../../utils/withDocs';\nimport readme from './README.md';\n\nimport { Form, FormField, Scope, Debug } from '../../../src';\n\nconst schema = {\n  type: 'object',\n  properties: {\n    name: {\n      type: 'string',\n      title: 'First name',\n      'ui:control': 'input'\n    },\n    brother: {\n      type: 'object',\n      properties: {\n        name: {\n          type: 'string',\n          title: 'Brother name',\n          'ui:control': 'input'\n        },\n        age: {\n          type: 'number',\n          title: 'Brother age',\n          'ui:control': 'input',\n          'ui:props': {\n            type: 'number'\n          }\n        }\n      }\n    }\n  }\n};\n\nconst Schema = () => (\n  <Form schema={schema}>\n    <h5>Your Info:</h5>\n    <FormField name=\"name\" />\n    <br />\n    <h5>Brothers Info:</h5>\n    <Scope scope=\"brother\">\n      <FormField name=\"name\" />\n      <FormField name=\"age\" />\n    </Scope>\n    <button type=\"submit\">Submit</button>\n    <Debug />\n  </Form>\n);\n\nexport default withDocs(readme, Schema);\n","export default \"# JSON Schema Form\\n\\n** Note: This is in beta and is subject to change! **\\n\\n<!-- STORY -->\\n\\n```jsx\\nimport { Form, SchemaFields, Debug } from 'informed';\\n\\nconst schema = {\\n  type: 'object',\\n  properties: {\\n    name: {\\n      type: 'string',\\n      title: 'First name',\\n      'ui:control': 'input',\\n      'ui:props': {\\n        validate: v => (v == null ? 'Required' : undefined)\\n      }\\n    },\\n    age: {\\n      type: 'number',\\n      title: 'First name',\\n      'ui:control': 'input',\\n      'ui:props': {\\n        type: 'number'\\n      }\\n    },\\n    bio: {\\n      type: 'string',\\n      title: 'Bio',\\n      'ui:control': 'textarea'\\n    },\\n    authorize: {\\n      type: 'string',\\n      title: 'Authorize',\\n      'ui:control': 'checkbox'\\n    },\\n    color: {\\n      type: 'string',\\n      title: 'Color',\\n      'ui:control': 'select',\\n      oneOf: [\\n        {\\n          const: '',\\n          title: '- Select -',\\n          'ui:props': {\\n            disabled: true\\n          }\\n        },\\n        { const: 'red', title: 'Red' },\\n        { const: 'black', title: 'Black' },\\n        { const: 'white', title: 'White' }\\n      ]\\n    },\\n    model: {\\n      type: 'string',\\n      title: 'Model',\\n      'ui:control': 'radio',\\n      oneOf: [\\n        { const: 'ms', title: 'Model S' },\\n        { const: 'm3', title: 'Model 3' },\\n        { const: 'mx', title: 'Model X' },\\n        { const: 'my', title: 'Model Y' }\\n      ],\\n      default: null,\\n      'ui:props': {\\n        initialValue: 'm3'\\n      }\\n    },\\n    cars: {\\n      type: 'array',\\n      title: 'Cars',\\n      'ui:control': 'select',\\n      'ui:props': {\\n        multiple: true,\\n        style: { height: '100px', width: '200px' }\\n      },\\n      items: {\\n        oneOf: [\\n          { const: 'tesla', title: 'Tesla' },\\n          { const: 'volvo', title: 'Volvo' },\\n          { const: 'audi', title: 'Audi' },\\n          { const: 'jeep', title: 'Jeep' }\\n        ]\\n      },\\n      'ui:props': {\\n        initialValue: ['jeep', 'tesla']\\n      }\\n    }\\n  }\\n};\\n\\nconst Schema = () => (\\n  <Form schema={schema}>\\n    <SchemaFields />\\n    <button type=\\\"submit\\\">Submit</button>\\n    <Debug />\\n  </Form>\\n);\\n```\\n\";","import React from 'react';\nimport withDocs from '../../utils/withDocs';\nimport readme from './README.md';\n\nimport { Form, SchemaFields, FormField, Debug } from '../../../src';\n\nconst schema = {\n  type: 'object',\n  properties: {\n    name: {\n      type: 'string',\n      title: 'First name',\n      'ui:control': 'input',\n      'ui:props': {\n        validate: v => (v == null ? 'Required' : undefined)\n      },\n      'informed:validate': {}\n    },\n    age: {\n      type: 'number',\n      title: 'Age',\n      'ui:control': 'input',\n      'ui:props': {\n        type: 'number'\n      }\n    },\n    bio: {\n      type: 'string',\n      title: 'Bio',\n      'ui:control': 'textarea'\n    },\n    authorize: {\n      type: 'string',\n      title: 'Authorize',\n      'ui:control': 'checkbox'\n    },\n    color: {\n      type: 'string',\n      title: 'Color',\n      'ui:control': 'select',\n      oneOf: [\n        {\n          const: '',\n          title: '- Select -',\n          'ui:props': {\n            disabled: true\n          }\n        },\n        { const: 'red', title: 'Red' },\n        { const: 'black', title: 'Black' },\n        { const: 'white', title: 'White' }\n      ]\n    },\n    model: {\n      type: 'string',\n      title: 'Model',\n      'ui:control': 'radio',\n      oneOf: [\n        { const: 'ms', title: 'Model S' },\n        { const: 'm3', title: 'Model 3' },\n        { const: 'mx', title: 'Model X' },\n        { const: 'my', title: 'Model Y' }\n      ],\n      default: null,\n      'ui:props': {\n        initialValue: 'm3'\n      }\n    },\n    cars: {\n      type: 'array',\n      title: 'Cars',\n      'ui:control': 'select',\n      'ui:props': {\n        multiple: true,\n        style: { height: '100px', width: '200px' },\n        initialValue: ['jeep', 'tesla']\n      },\n      items: {\n        oneOf: [\n          { const: 'tesla', title: 'Tesla' },\n          { const: 'volvo', title: 'Volvo' },\n          { const: 'audi', title: 'Audi' },\n          { const: 'jeep', title: 'Jeep' }\n        ]\n      }\n    }\n  }\n};\n\nconst onSubmit = ({ values }) => console.log(values);\n\n// const schema2 = {\n//   type: 'object',\n//   required: ['name'],\n//   properties: {\n//     name: {\n//       type: 'string',\n//       title: 'First name',\n//       'ui:control': 'input'\n//     },\n//     married: {\n//       type: 'string',\n//       title: 'Are you married?',\n//       enum: ['yes', 'no'],\n//       'ui:control': 'radio'\n//     }\n//   },\n//   allOf: [\n//     {\n//       if: {\n//         properties: {\n//           married: { const: 'yes' }\n//         },\n//         required: ['married']\n//       },\n//       then: {\n//         properties: {\n//           spouse: {\n//             type: 'string',\n//             title: 'Spouse name',\n//             'ui:control': 'input'\n//           }\n//         }\n//       }\n//     }\n//   ]\n// };\n\n// function App() {\n//   return (\n//     <Form onSubmit={onSubmit} autocomplete=\"off\" schema={schema2}>\n//       <FormField name=\"name\" />\n//       <FormField name=\"spouse\" />\n//       <FormField name=\"married\" />\n//       <button type=\"submit\">Submit</button>\n//     </Form>\n//   );\n// }\n\nconst Schema = () => (\n  <Form schema={schema}>\n    <SchemaFields />\n    <button type=\"submit\">Submit</button>\n    <Debug />\n  </Form>\n);\n\nexport default withDocs(readme, Schema);\n","export default \"# Nested Schema\\n\\n** Note: This is in beta and is subject to change! **\\n\\n<!-- STORY -->\\n\\n```jsx\\nimport { Form, SchemaFields } from 'informed';\\n\\nconst schema = {\\n  type: 'object',\\n  properties: {\\n    name: {\\n      type: 'string',\\n      title: 'First name',\\n      'ui:control': 'input'\\n    },\\n    brother: {\\n      type: 'object',\\n      properties: {\\n        name: {\\n          type: 'string',\\n          title: 'Brother name',\\n          'ui:control': 'input'\\n        },\\n        age: {\\n          type: 'number',\\n          title: 'Brother age',\\n          'ui:control': 'input',\\n          'ui:props': {\\n            type: 'number'\\n          }\\n        }\\n      }\\n    }\\n  }\\n};\\n\\nconst Schema = () => (\\n  <Form schema={schema}>\\n    <SchemaFields />\\n    <button type=\\\"submit\\\">Submit</button>\\n    <Debug />\\n  </Form>\\n);\\n```\\n\";","import React from 'react';\nimport withDocs from '../../utils/withDocs';\nimport readme from './README.md';\n\nimport { Form, SchemaFields, Debug } from '../../../src';\n\nconst schema = {\n  type: 'object',\n  properties: {\n    name: {\n      type: 'string',\n      title: 'First name',\n      'ui:control': 'input'\n    },\n    brother: {\n      type: 'object',\n      properties: {\n        name: {\n          type: 'string',\n          title: 'Brother name',\n          'ui:control': 'input'\n        },\n        age: {\n          type: 'number',\n          title: 'Brother age',\n          'ui:control': 'input',\n          'ui:props': {\n            type: 'number'\n          }\n        }\n      }\n    }\n  }\n};\n\nconst Schema = () => (\n  <Form schema={schema}>\n    <SchemaFields />\n    <button type=\"submit\">Submit</button>\n    <Debug />\n  </Form>\n);\n\nexport default withDocs(readme, Schema);\n","export default \"# Schema Components\\n\\nInformed 5.0 added the ability to add custom components to schema based forms, using special property names in the form of ui:[$id].\\n\\n```js\\n{\\n  \\\"properties\\\": {\\n    \\\"ui:myId\\\": {}\\n  }\\n}\\n```\\n\\n<br />\\n\\nWhen wanting to render fields as children of your component, you should add these inside an allOf[] in the parent of the properties object. The entry in allOf[] should have an $id property to be able to reference those fields.\\n\\n```js\\n{\\n  \\\"allOf\\\": [\\n    {\\n      \\\"$id\\\": \\\"myId\\\",\\n      \\\"properties\\\": {\\n        \\\"myField\\\": {\\n          \\\"type\\\": \\\"string\\\",\\n          \\\"title\\\": \\\"My field\\\"\\n        }\\n      }\\n    }\\n  ]\\n}\\n```\\n\\n<!-- STORY -->\\n\\n```jsx\\nimport { Form, SchemaFields } from 'informed';\\n\\nconst schema = {\\n  properties: {\\n    'ui:fullName_wrapper': {},\\n    favorite: {\\n      'ui:control': 'PurpleBorder',\\n      type: 'object',\\n      properties: {\\n        color: {\\n          type: 'string',\\n          title: 'Favorite color',\\n          'ui:control': 'input'\\n        },\\n        food: {\\n          type: 'string',\\n          title: 'Favorite Food',\\n          'ui:control': 'input'\\n        }\\n      }\\n    }\\n  },\\n  allOf: [\\n    {\\n      $id: 'fullName_wrapper',\\n      'ui:control': 'PurpleBorder',\\n      type: 'object',\\n      properties: {\\n        firstName: {\\n          type: 'string',\\n          title: 'First name',\\n          'ui:control': 'input'\\n        },\\n        lastName: {\\n          type: 'string',\\n          title: 'Last name',\\n          'ui:control': 'input'\\n        }\\n      }\\n    }\\n  ]\\n};\\n\\nconst PurpleBorder = ({ children }) => {\\n  return (\\n    <div style={{ border: '3px solid purple', padding: '1rem' }}>\\n      {children}\\n    </div>\\n  );\\n};\\n\\nconst Schema = () => (\\n  <Form schema={schema} components={{ PurpleBorder }}>\\n    <SchemaFields />\\n    <button type=\\\"submit\\\">Submit</button>\\n    <Debug />\\n  </Form>\\n);\\n```\\n\";","import React from 'react';\nimport withDocs from '../../utils/withDocs';\nimport readme from './README.md';\n\nimport { Form, SchemaFields, Debug } from '../../../src';\n\nconst schema = {\n  properties: {\n    'ui:fullName_wrapper': {},\n    favorite: {\n      'ui:control': 'PurpleBorder',\n      type: 'object',\n      properties: {\n        color: {\n          type: 'string',\n          title: 'Favorite color',\n          'ui:control': 'input'\n        },\n        food: {\n          type: 'string',\n          title: 'Favorite Food',\n          'ui:control': 'input'\n        }\n      }\n    }\n  },\n  allOf: [\n    {\n      $id: 'fullName_wrapper',\n      'ui:control': 'PurpleBorder',\n      type: 'object',\n      properties: {\n        firstName: {\n          type: 'string',\n          title: 'First name',\n          'ui:control': 'input'\n        },\n        lastName: {\n          type: 'string',\n          title: 'Last name',\n          'ui:control': 'input'\n        }\n      }\n    }\n  ]\n};\n\nconst PurpleBorder = ({ children }) => {\n  return (\n    <div\n      style={{\n        border: '3px solid purple',\n        marginBottom: '1rem',\n        padding: '1rem'\n      }}>\n      {children}\n    </div>\n  );\n};\n\nconst Schema = () => (\n  <Form schema={schema} components={{ PurpleBorder }}>\n    <SchemaFields />\n    <button type=\"submit\">Submit</button>\n    <Debug />\n  </Form>\n);\n\nexport default withDocs(readme, Schema);\n","export default \"# Sub Schema\\n\\nSometimes you want to render separate schemas\\n\\n<!-- STORY -->\\n\\n```jsx\\nimport { Form, FormFields } from 'informed';\\n\\nconst schema1 = {\\n  type: 'object',\\n  properties: {\\n    name: {\\n      type: 'string',\\n      title: 'Name',\\n      'ui:control': 'input'\\n    },\\n    age: {\\n      type: 'number',\\n      title: 'Age',\\n      'ui:control': 'input',\\n      'ui:props': {\\n        type: 'number'\\n      }\\n    }\\n  }\\n};\\n\\nconst schema2 = {\\n  type: 'object',\\n  properties: {\\n    brother: {\\n      type: 'string',\\n      title: 'Brother name',\\n      'ui:control': 'input'\\n    },\\n    age: {\\n      type: 'number',\\n      title: 'Brother age',\\n      'ui:control': 'input',\\n      'ui:props': {\\n        type: 'number'\\n      }\\n    }\\n  }\\n};\\n\\nconst Schema = () => (\\n  <Form>\\n    <FormFields schema={schema1} />\\n    <FormFields schema={schema2} />\\n  </Form>\\n);\\n```\\n\";","import React from 'react';\nimport withDocs from '../../utils/withDocs';\nimport readme from './README.md';\n\nimport { Form, FormFields } from '../../../src';\n\nconst schema1 = {\n  type: 'object',\n  properties: {\n    name: {\n      type: 'string',\n      title: 'Name',\n      'ui:control': 'input'\n    },\n    age: {\n      type: 'number',\n      title: 'Age',\n      'ui:control': 'input',\n      'ui:props': {\n        type: 'number'\n      }\n    }\n  }\n};\n\nconst schema2 = {\n  type: 'object',\n  properties: {\n    brother: {\n      type: 'string',\n      title: 'Brother name',\n      'ui:control': 'input'\n    },\n    age: {\n      type: 'number',\n      title: 'Brother age',\n      'ui:control': 'input',\n      'ui:props': {\n        type: 'number'\n      }\n    }\n  }\n};\n\nconst Schema = () => (\n  <Form>\n    <FormFields schema={schema1} />\n    <FormFields schema={schema2} />\n  </Form>\n);\n\nexport default withDocs(readme, Schema);\n","export default \"# Scope Component\\n\\nSometimes you need to scope specific fields ( group them ). This is easily achieved with the use of `Scope`.\\n\\n<!-- STORY -->\\n\\n```jsx\\nimport { Form, Input, Scope } from 'informed';\\n\\nconst initialValues = {\\n  name: 'Elon',\\n  age: 50,\\n  spouse: {\\n    name: 'Talulah',\\n    age: 36\\n  }\\n};\\n\\nconst ScopeComonent = () => (\\n  <Form initialValues={initialValues}>\\n    <h3>Your Info</h3>\\n    <Input name=\\\"name\\\" label=\\\"First name:\\\" />\\n    <Input name=\\\"age\\\" label=\\\"Age:\\\" type=\\\"number\\\" />\\n    <Scope scope=\\\"spouse\\\">\\n      <h3>Spouses Info</h3>\\n      <Input name=\\\"name\\\" label=\\\"First name:\\\" />\\n      <Input name=\\\"age\\\" label=\\\"Age:\\\" type=\\\"number\\\" />\\n    </Scope>\\n    <Debug values />\\n  </Form>\\n);\\n```\\n\";","import React, { useRef } from 'react';\nimport withDocs from '../../utils/withDocs';\nimport readme from './README.md';\n\nimport { Form, Input, Scope, Debug, Checkbox } from '../../../src';\n\nconst initialValues = {\n  name: 'Elon',\n  age: 50,\n  spouse: {\n    name: 'Talulah',\n    age: 36\n  }\n};\n\nconst ScopeComonent = () => {\n  // const formApiRef = useRef();\n\n  // const onClick = () => {\n  //   formApiRef.current.resetPath('spouse');\n  // };\n\n  return (\n    <Form initialValues={initialValues}>\n      <h3>Your Info</h3>\n      <Input name=\"name\" label=\"First name:\" />\n      <Input name=\"age\" label=\"Age:\" type=\"number\" />\n      <Scope scope=\"spouse\">\n        <h3>Spouses Info</h3>\n        <Input name=\"name\" label=\"First name:\" />\n        <Input name=\"age\" label=\"Age:\" type=\"number\" />\n      </Scope>\n      {/* <button type=\"button\" onClick={onClick}>\n        Reset Spouse\n      </button> */}\n      <Debug values />\n    </Form>\n  );\n};\n\nexport default withDocs(readme, ScopeComonent);\n","export default \"# Creating Your Own Fields\\n\\nInformed makes it very easy to create your own custom fields!\\n\\n```jsx\\nimport { useForm, useField, Relevant, Debug } from 'informed';\\n\\n// Step 1. Build your form component ---------------------\\n\\nconst Form = ({ children, ...rest }) => {\\n  const { formController, render, userProps } = useForm(rest);\\n\\n  return render(\\n    <form noValidate {...userProps} onSubmit={formController.submitForm}>\\n      {children}\\n    </form>\\n  );\\n};\\n\\n// Step 2. Build your input components --------------------\\n\\nconst Input = props => {\\n  const { render, informed, userProps, fieldState, ref } = useField({\\n    type: 'text',\\n    ...props\\n  });\\n  const { label, id, ...rest } = userProps;\\n  const { showError } = fieldState;\\n  const style = showError ? { border: 'solid 1px red' } : null;\\n  return render(\\n    <>\\n      <label htmlFor={id}>{label}</label>\\n      <input id={id} ref={ref} {...informed} {...rest} style={style} />\\n      {showError && <small style={{ color: 'red' }}>{fieldState.error}</small>}\\n    </>\\n  );\\n};\\n\\nconst Checkbox = props => {\\n  const { render, informed, userProps, ref } = useField({\\n    type: 'checkbox',\\n    ...props\\n  });\\n  const { label, id, ...rest } = userProps;\\n  return render(\\n    <>\\n      <label htmlFor={id}>{label}</label>\\n      <input id={id} ref={ref} {...informed} {...rest} />\\n    </>\\n  );\\n};\\n\\nconst Select = props => {\\n  const { render, informed, userProps, ref } = useField({\\n    type: 'select',\\n    ...props\\n  });\\n  const { label, id, children, ...rest } = userProps;\\n  return render(\\n    <>\\n      <label htmlFor={id}>{label}</label>\\n      <select id={id} ref={ref} {...informed} {...rest}>\\n        {children}\\n      </select>\\n    </>\\n  );\\n};\\n\\n// Step 3. Build your forms! ---------------------------\\n\\nconst onSubmit = ({ values }) => console.log(values);\\n\\nconst ExampleForm = () => (\\n  <Form onSubmit={onSubmit}>\\n    <Input field=\\\"name\\\" label=\\\"Name\\\" placeholder=\\\"Elon\\\" />\\n    <Input field=\\\"age\\\" type=\\\"number\\\" label=\\\"Age\\\" required=\\\"Age Required\\\" />\\n    <Input field=\\\"phone\\\" label=\\\"Phone\\\" formatter=\\\"+1 (###)-###-####\\\" />\\n    <Select field=\\\"car\\\" label=\\\"Car\\\" initialValue=\\\"ms\\\">\\n      <option value=\\\"ms\\\">Model S</option>\\n      <option value=\\\"m3\\\">Model 3</option>\\n      <option value=\\\"mx\\\">Model X</option>\\n      <option value=\\\"my\\\">Model Y</option>\\n    </Select>\\n    <Checkbox field=\\\"married\\\" label=\\\"Married?\\\" />\\n    <Relevant when={({ formState }) => formState.values.married}>\\n      <Input field=\\\"spouse\\\" label=\\\"Spouse\\\" />\\n    </Relevant>\\n    <button type=\\\"submit\\\">Submit</button>\\n    <Debug />\\n  </Form>\\n);\\n```\\n\\n<!-- STORY -->\\n\";","import React from 'react';\nimport Code from '../../utils/Code';\nimport withDocs from '../../utils/withDocs';\nimport readme from './README.md';\nimport { useField, useForm, Relevant, Debug } from '../../../src';\n\n// Step 1. Build your form component ---------------------\n\nconst Form = ({ children, ...rest }) => {\n  const { formController, render, userProps } = useForm(rest);\n\n  return render(\n    <form noValidate {...userProps} onSubmit={formController.submitForm}>\n      {children}\n    </form>\n  );\n};\n\n// Step 2. Build your input components --------------------\n\nconst Input = props => {\n  const { render, informed, userProps, fieldState, ref } = useField({\n    type: 'text',\n    ...props\n  });\n  const { label, id, ...rest } = userProps;\n  const { showError } = fieldState;\n  const style = showError ? { border: 'solid 1px red' } : null;\n  return render(\n    <>\n      <label htmlFor={id}>{label}</label>\n      <input id={id} ref={ref} {...informed} {...rest} style={style} />\n      {showError && <small style={{ color: 'red' }}>{fieldState.error}</small>}\n    </>\n  );\n};\n\nconst Checkbox = props => {\n  const { render, informed, userProps, ref } = useField({\n    type: 'checkbox',\n    ...props\n  });\n  const { label, id, ...rest } = userProps;\n  return render(\n    <>\n      <label htmlFor={id}>{label}</label>\n      <input id={id} ref={ref} {...informed} {...rest} />\n    </>\n  );\n};\n\nconst Select = props => {\n  const { render, informed, userProps, ref } = useField({\n    type: 'select',\n    ...props\n  });\n  const { label, id, children, ...rest } = userProps;\n  return render(\n    <>\n      <label htmlFor={id}>{label}</label>\n      <select id={id} ref={ref} {...informed} {...rest}>\n        {children}\n      </select>\n    </>\n  );\n};\n\nconst onSubmit = ({ values }) => console.log(values);\n\nconst GettingStarted = () => (\n  <Form onSubmit={onSubmit} autocomplete=\"off\">\n    <div style={{ display: 'flex' }}>\n      <div style={{ flex: '1' }}>\n        <Input field=\"name\" label=\"Name\" placeholder=\"Elon\" />\n        <Input field=\"age\" type=\"number\" label=\"Age\" required=\"Age Required\" />\n        <Input field=\"phone\" label=\"Phone\" formatter=\"+1 (###)-###-####\" />\n        <Select field=\"car\" label=\"Car\" initialValue=\"ms\">\n          <option value=\"ms\">Model S</option>\n          <option value=\"m3\">Model 3</option>\n          <option value=\"mx\">Model X</option>\n          <option value=\"my\">Model Y</option>\n        </Select>\n        <Checkbox field=\"married\" label=\"Married? \" />\n        <Relevant when={({ formState }) => formState.values.married}>\n          <Input field=\"spouse\" label=\"Spouse\" />\n        </Relevant>\n        <button type=\"submit\">Submit</button>\n      </div>\n      <div style={{ flex: '1' }}>\n        <Debug />\n      </div>\n    </div>\n  </Form>\n);\n\nexport default withDocs(readme, GettingStarted);\n","export default \"# TLDR\\n\\n[![Docs](https://badgen.net/badge/V4/Docs/purple)](https://teslamotors.github.io/informed)\\n[![npmversion](https://img.shields.io/npm/v/informed.svg)](https://www.npmjs.com/package/informed)\\n[![github](https://badgen.net/badge/gihub/main/green?icon=github)](https://github.com/teslamotors/informed)\\n[![Docs](https://badgen.net/badge/V3/Docs/red)](https://61af80ffc6bc460007bf9ec7--joepuzzo-informed.netlify.app/)\\n\\n##### Install\\n\\n```\\nnpm install --save informed\\n```\\n\";","import React from 'react';\nimport withDocs from '../../utils/withDocs';\nimport readme from './README.md';\n\nexport default withDocs(readme, () => null);\n","import React from 'react';\nimport GettingStarted from './GettingStarted';\nimport Intro from './Intro';\nimport SchemaVsFormat from '../Intro/SchemaVsFormat';\n\nconst TLDR = () => (\n  <div>\n    <Intro />\n    <SchemaVsFormat />\n    <hr />\n    <GettingStarted />\n  </div>\n);\n\nexport default TLDR;\n","export default \"# AJV Validation\\n\\nYou can pass a JSON schema to the form to both build and validate the form!\\n\\n<!-- STORY -->\\n\\n```jsx\\nimport { Form, SchemaFields, Debug } from 'informed';\\nimport Ajv from 'ajv';\\n\\nconst schema = {\\n  type: 'object',\\n  required: ['name', 'friend', 'age', 'bio', 'color', 'model', 'cars'],\\n  properties: {\\n    name: {\\n      type: 'string',\\n      title: 'First name',\\n      'ui:control': 'input'\\n    },\\n    friend: {\\n      type: 'string',\\n      title: 'Friend',\\n      'ui:control': 'input',\\n      oneOf: [{ const: 'Elon' }, { const: 'Kimbal' }]\\n    },\\n    age: {\\n      type: 'number',\\n      title: 'Age',\\n      minimum: 0,\\n      'ui:control': 'input',\\n      'ui:props': {\\n        type: 'number'\\n      }\\n    },\\n    bio: {\\n      type: 'string',\\n      title: 'Bio',\\n      'ui:control': 'textarea',\\n      minLength: 10\\n    },\\n    authorize: {\\n      type: 'boolean',\\n      title: 'Authorize',\\n      'ui:control': 'checkbox'\\n    },\\n    color: {\\n      type: 'string',\\n      title: 'Color',\\n      'ui:control': 'select',\\n      oneOf: [\\n        {\\n          const: '',\\n          title: '- Select -',\\n          'ui:props': {\\n            disabled: true\\n          }\\n        },\\n        { const: 'red', title: 'Red' },\\n        { const: 'black', title: 'Black' },\\n        { const: 'white', title: 'White' }\\n      ]\\n    },\\n    model: {\\n      type: 'string',\\n      title: 'Model',\\n      'ui:control': 'radio',\\n      oneOf: [\\n        { const: 'ms', title: 'Model S' },\\n        { const: 'm3', title: 'Model 3' },\\n        { const: 'mx', title: 'Model X' },\\n        { const: 'my', title: 'Model Y' }\\n      ],\\n      'ui:props': {\\n        initialValue: 'm3'\\n      }\\n    },\\n    cars: {\\n      type: 'array',\\n      title: 'Cars',\\n      minItems: 3,\\n      'ui:control': 'select',\\n      'ui:props': {\\n        multiple: true,\\n        style: { height: '100px', width: '200px' }\\n      },\\n      items: {\\n        oneOf: [\\n          { const: 'tesla', title: 'Tesla' },\\n          { const: 'volvo', title: 'Volvo' },\\n          { const: 'audi', title: 'Audi' },\\n          { const: 'jeep', title: 'Jeep' }\\n        ]\\n      },\\n      'ui:props': {\\n        initialValue: ['jeep', 'tesla']\\n      }\\n    }\\n  }\\n};\\n\\nconst Schema = () => (\\n  <Form\\n    schema={schema}\\n    ajv={Ajv}\\n    onSubmit={({ values }) => window.alert(JSON.stringify(values, null, 2))}>\\n    <SchemaFields />\\n    <button type=\\\"submit\\\">Submit</button>\\n    <Debug errors values />\\n  </Form>\\n);\\n```\\n\";","import React from 'react';\nimport withDocs from '../../utils/withDocs';\nimport readme from './README.md';\nimport Ajv from 'ajv';\n\nimport { Form, SchemaFields, Debug } from '../../../src';\n\nconst schema = {\n  type: 'object',\n  required: ['name', 'friend', 'age', 'bio', 'color', 'model', 'cars'],\n  properties: {\n    name: {\n      type: 'string',\n      title: 'First name',\n      'ui:control': 'input'\n    },\n    friend: {\n      type: 'string',\n      title: 'Friend',\n      'ui:control': 'input',\n      oneOf: [{ const: 'Elon' }, { const: 'Kimbal' }]\n    },\n    age: {\n      type: 'number',\n      title: 'Age',\n      minimum: 0,\n      'ui:control': 'input',\n      'ui:props': {\n        type: 'number'\n      }\n    },\n    bio: {\n      type: 'string',\n      title: 'Bio',\n      'ui:control': 'textarea',\n      minLength: 10\n    },\n    authorize: {\n      type: 'boolean',\n      title: 'Authorize',\n      'ui:control': 'checkbox'\n    },\n    color: {\n      type: 'string',\n      title: 'Color',\n      'ui:control': 'select',\n      oneOf: [\n        {\n          const: '',\n          title: '- Select -',\n          'ui:props': {\n            disabled: true\n          }\n        },\n        { const: 'red', title: 'Red' },\n        { const: 'black', title: 'Black' },\n        { const: 'white', title: 'White' }\n      ]\n    },\n    model: {\n      type: 'string',\n      title: 'Model',\n      'ui:control': 'radio',\n      oneOf: [\n        { const: 'ms', title: 'Model S' },\n        { const: 'm3', title: 'Model 3' },\n        { const: 'mx', title: 'Model X' },\n        { const: 'my', title: 'Model Y' }\n      ],\n      'ui:props': {\n        initialValue: 'm3'\n      }\n    },\n    cars: {\n      type: 'array',\n      title: 'Cars',\n      minItems: 3,\n      'ui:control': 'select',\n      'ui:props': {\n        multiple: true,\n        style: { height: '100px', width: '200px' },\n        initialValue: ['jeep', 'tesla']\n      },\n      items: {\n        oneOf: [\n          { const: 'tesla', title: 'Tesla' },\n          { const: 'volvo', title: 'Volvo' },\n          { const: 'audi', title: 'Audi' },\n          { const: 'jeep', title: 'Jeep' }\n        ]\n      }\n    }\n  }\n};\n\nconst Schema = () => (\n  <Form\n    schema={schema}\n    ajv={Ajv}\n    onSubmit={({ values }) => window.alert(JSON.stringify(values, null, 2))}>\n    <SchemaFields />\n    <button type=\"submit\">Submit</button>\n    <Debug errors values />\n  </Form>\n);\n\nexport default withDocs(readme, Schema);\n","export default \"# AJV Validation\\n\\nYou can pass a JSON schema to the form but manually render the fields. ( Validation Only )\\n\\n<!-- STORY -->\\n\\n```jsx\\nimport { Form, Input, Debug } from 'informed';\\nimport Ajv from 'ajv';\\n\\nconst schema = {\\n  type: 'object',\\n  required: ['name', 'age', 'friend'],\\n  properties: {\\n    name: {\\n      type: 'string',\\n      title: 'First name'\\n    },\\n    age: {\\n      type: 'number',\\n      title: 'Age',\\n      minimum: 0\\n    },\\n    friend: {\\n      type: 'string',\\n      title: 'Friend',\\n      oneOf: [{ const: 'Elon' }, { const: 'Kimbal' }]\\n    }\\n  }\\n};\\n\\nconst Schema = () => (\\n  <Form\\n    schema={schema}\\n    ajv={Ajv}\\n    onlyValidateSchema\\n    onSubmit={({ values }) => window.alert(JSON.stringify(values, null, 2))}>\\n    <button type=\\\"submit\\\">Submit</button>\\n    <Input name=\\\"name\\\" label=\\\"First name:\\\" />\\n    <Input name=\\\"age\\\" label=\\\"Age:\\\" type=\\\"number\\\" />\\n    <Input name=\\\"friend\\\" label=\\\"Friend:\\\" />\\n    <Debug errors values />\\n  </Form>\\n);\\n```\\n\";","import React from 'react';\nimport withDocs from '../../utils/withDocs';\nimport readme from './README.md';\nimport Ajv from 'ajv';\n\nimport { Form, Input, Debug } from '../../../src';\n\nconst schema = {\n  type: 'object',\n  required: ['name', 'age', 'friend'],\n  properties: {\n    name: {\n      type: 'string',\n      title: 'First name'\n    },\n    age: {\n      type: 'number',\n      title: 'Age',\n      minimum: 0\n    },\n    friend: {\n      type: 'string',\n      title: 'Friend',\n      oneOf: [{ const: 'Elon' }, { const: 'Kimbal' }]\n    }\n  }\n};\n\nconst Schema = () => (\n  <Form\n    schema={schema}\n    ajv={Ajv}\n    onlyValidateSchema\n    onSubmit={({ values }) => window.alert(JSON.stringify(values, null, 2))}>\n    <Input name=\"name\" label=\"First name:\" />\n    <Input name=\"age\" label=\"Age:\" type=\"number\" />\n    <Input name=\"friend\" label=\"Friend:\" />\n    <button type=\"submit\">Submit</button>\n    <Debug errors values />\n  </Form>\n);\n\nexport default withDocs(readme, Schema);\n","export default \"# Async Validation\\n\\nAsync validation can be achieved by passing an asyncValidation function to the input.\\nBelow is an example form that has validation functions. The synchronous function defined\\nwill return an error when the input is empty, and nothing otherwise. The second asynchronous\\nfunction defined will, after two seconds, resolve an error or nothing depending on what is typed.\\nWe pass these validation functions to the username input and validation will **occur on blur by default**.\\n\\n**Try clicking the submit button WITH AN EMPTY FIELD! and see what happens:**\\n\\n<!-- STORY -->\\n\\nWhat just happened? When you clicked on the submit button the synchronous\\nvalidation function was triggered. Because the field was empty ( if you left it empty )\\nit failed synchronous validation, and therefore did not run the async validation or\\nactually submit the form.\\n\\n**Get rid of the synchronous error by typing \\\"FooBar\\\" in the username field, then\\nclick the submit button again, WAIT TWO SECONDS, and see what happens:**\\n\\nThe form submitted!! Why? Because both our synchronous and asynchronous validation passed.\\nLets make our asynchronous validation fail!\\n\\n**Ok now type \\\"billy\\\" into the field, click on the submit button, and wait two more seconds.**\\n\\nThe form did NOT submit!! Why? Because asynchronous validation failed.\\n\\n**Ok now type \\\"reject\\\" into the field, click on the submit button, and wait two more seconds.**\\n\\nThe form did not submit because the \\\"apicall\\\" to validate failed.\\n\\n```jsx\\nimport { Form, Input } from 'informed';\\n\\nconst validate = username =>\\n  !username || username.trim() === ''\\n    ? 'Username is a required field'\\n    : undefined;\\n\\nconst asyncValidate = username => {\\n  return new Promise((resolve, reject) => {\\n    setTimeout(() => {\\n      // Simulate username check\\n      if (['joe', 'tanner', 'billy', 'bob'].includes(username)) {\\n        return resolve('That username is taken');\\n      }\\n      // Simulate request faulure\\n      if (username === 'reject') {\\n        return reject(new Error('Unable to validate username.'));\\n      }\\n      return resolve();\\n    }, 2000);\\n  });\\n};\\n\\nconst ExampleForm = () => {\\n  return (\\n    <Form onSubmit={({ values }) => console.log(values)}>\\n      <Input\\n        name=\\\"username\\\"\\n        label=\\\"Username\\\"\\n        validate={validate}\\n        asyncValidate={asyncValidate}\\n      />\\n      <button type=\\\"submit\\\">Submit</button>\\n      <Debug />\\n      <DebugField name=\\\"username\\\" />\\n    </Form>\\n  );\\n};\\n```\\n\";","import React, { useRef } from 'react';\nimport Code from '../../utils/Code';\nimport withDocs from '../../utils/withDocs';\nimport Modal from '../../utils/Modal';\nimport readme from './README.md';\n\nimport { Form, Input, Debug, DebugField } from '../../../src';\n\nconst validate = username => {\n  return !username || username.trim() === ''\n    ? 'Username is a required field'\n    : undefined;\n};\n\nconst asyncValidate = username => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      // Simulate username check\n      if (['joe', 'tanner', 'billy', 'bob'].includes(username)) {\n        return resolve('That username is taken');\n      }\n      // Simulate request faulure\n      if (username === 'reject') {\n        return reject(new Error('Unable to validate username.'));\n      }\n      return resolve();\n    }, 2000);\n  });\n};\n\nconst AsyncValidation = () => {\n  return (\n    <div>\n      <Form onSubmit={({ values }) => console.log('Submitted', values)}>\n        <div style={{ display: 'flex', flexWrap: 'wrap' }}>\n          <div style={{ flex: 2, marginRight: '2rem' }}>\n            <Input\n              name=\"username\"\n              label=\"Username\"\n              autocomplete=\"off\"\n              validateOn=\"change\"\n              validate={validate}\n              asyncValidate={asyncValidate}\n            />\n            <button type=\"submit\">Submit</button>\n          </div>\n          <div style={{ flex: 2, minWidth: '150px', marginLeft: '3rem' }}>\n            <h5>Form State:</h5>\n            <Debug />\n          </div>\n          <div style={{ flex: 2, minWidth: '150px', marginLeft: '3rem' }}>\n            <h5>Field State:</h5>\n            <DebugField name=\"username\" />\n          </div>\n        </div>\n      </Form>\n    </div>\n  );\n};\n\nexport default withDocs(readme, () => <AsyncValidation />);\n","export default \"# Complex Validation\\n\\nComplex validation can be achieved by passing a validation function to an input,\\nthat also accepts all the values in the form. Below is an example form\\nthat has validation functions on each input. The Basic validation function will\\nreturn an error when the input has less than five characters, or there is no\\nvalue at all, and undefined otherwise. The friendValidation function will show errors\\nwhen basic validation fails OR two friends have the same name. We pass the input\\nvalidation function to every input and the friendValidation function to the\\nfriend fields. Validation will **occur on submission**.\\n\\n**Try clicking the submit button and see what happens:**\\n\\n<!-- STORY -->\\n\\nWhat just happened? When you clicked on the submit button all of the validation\\nfunctions were triggered for each field. Because every validation failed, the\\nform never actually called onSubmit. In other words, informed will only\\nsubmit a valid form.\\n\\n**Get rid of the errors by typing more than 5 characters in each field and\\nalso type \\\"George\\\" in two of the friend fields. Click the submit button again\\nand see what happens:**\\n\\nAll of our basic level validation passed but when the form attempted to submit\\nthe additional friend checks failed.\\n\\n<!-- IDFK Strange issue where i need this commnet or code formatting is messed up -->\\n\\n```jsx\\nimport { Form, Input, Scope } from 'informed';\\n\\nconst basicValidation = value => {\\n  return !value || value.length < 5\\n    ? 'Field must be longer than five characters'\\n    : undefined;\\n};\\n\\nconst duplicateValidation = (value, values) => {\\n  return values.filter(v => v === value).length > 1\\n    ? 'This field must be unique.'\\n    : undefined;\\n};\\n\\nconst friendValidation = (value, values) => {\\n  return basicValidation(value) || duplicateValidation(value, values.friends);\\n};\\n\\nconst Example = () => (\\n  <Form id=\\\"complex-validate-form\\\">\\n    <Input name=\\\"name\\\" label=\\\"First name:\\\" validate={basicValidation} />\\n    <Scope scope=\\\"favorite\\\">\\n      <Input name=\\\"color\\\" label=\\\"Favorite color:\\\" validate={basicValidation} />\\n      <Input name=\\\"food\\\" label=\\\"Favorite food:\\\" validate={basicValidation} />\\n    </Scope>\\n    <Input name=\\\"friends[0]\\\" label=\\\"Friend 1:\\\" validate={friendValidation} />\\n    <Input name=\\\"friends[1]\\\" label=\\\"Friend 2:\\\" validate={friendValidation} />\\n    <Input name=\\\"friends[2]\\\" label=\\\"Friend 3:\\\" validate={friendValidation} />\\n    <button type=\\\"submit\\\">Submit</button>\\n  </Form>\\n);\\n```\\n\";","import React from 'react';\nimport Code from '../../utils/Code';\nimport withDocs from '../../utils/withDocs';\nimport readme from './README.md';\nimport Modal from '../../utils/Modal';\n\nimport { Form, Input, Scope, Debug } from '../../../src';\n\nconst basicValidation = value => {\n  return !value || value.length < 5\n    ? 'Field must be at least five characters'\n    : undefined;\n};\n\nconst duplicateValidation = (value, values) => {\n  return values.filter(v => v === value).length > 1\n    ? 'This field must be unique.'\n    : undefined;\n};\n\nconst friendValidation = (value, values) => {\n  // console.log('WTF1', basicValidation(value));\n  // console.log('WTF2', values.fiends && duplicateValidation(value, values.friends));\n  return basicValidation(value) || duplicateValidation(value, values.friends);\n};\n\nclass ComplexValidation extends React.Component {\n  render() {\n    return (\n      <div>\n        <Form\n          onSubmit={({ values }) =>\n            window.alert(JSON.stringify(values, null, 2))\n          }>\n          <div style={{ display: 'flex', flexWrap: 'wrap' }}>\n            <div style={{ flex: 1, marginRight: '2rem' }}>\n              <Input\n                name=\"name\"\n                label=\"First name:\"\n                validate={basicValidation}\n              />\n              <Scope scope=\"favorite\">\n                <Input\n                  name=\"color\"\n                  label=\"Favorite color:\"\n                  validate={basicValidation}\n                />\n                <Input\n                  name=\"food\"\n                  label=\"Favorite food:\"\n                  validate={basicValidation}\n                />\n              </Scope>\n              <Input\n                name=\"friends[0]\"\n                label=\"Friend 1:\"\n                validate={friendValidation}\n              />\n              <Input\n                name=\"friends[1]\"\n                label=\"Friend 2:\"\n                validate={friendValidation}\n              />\n              <Input\n                name=\"friends[2]\"\n                label=\"Friend 3:\"\n                validate={friendValidation}\n              />\n              <button type=\"submit\">Submit</button>\n            </div>\n            <div style={{ flex: 2, minWidth: '300px', marginLeft: '3rem' }}>\n              <Debug values errors invalid valid />\n            </div>\n          </div>\n        </Form>\n      </div>\n    );\n  }\n}\n\nexport default withDocs(readme, () => <ComplexValidation />);\n","export default \"# Elon Validator\\n\\nSimple validation can be achieved by passing a validation function to the input. But what if you want to perform multiple validations??\\n\\nWell, Elon is here to help you out!\\n\\n<!-- IDFK Strange issue where i need this commnet or code formatting is messed up -->\\n\\n```jsx\\nimport { Form, Input, Select, Elon } from 'informed';\\n\\nconst validate = Elon.inspect([\\n  (value, values) => {\\n    if (values.country === 'US' && !value) {\\n      return 'this field should not be empty when in the US';\\n    }\\n  },\\n  (value, values) => {\\n    if (value && value.length < 2) {\\n      return 'this field should contain more than 2 characters';\\n    }\\n  }\\n]);\\n\\nconst Example = () => {\\n  return (\\n    <Form\\n      onSubmit={({ values }) => window.alert(JSON.stringify(values, null, 2))}>\\n      <Select label=\\\"Country\\\" name=\\\"country\\\" initialValue=\\\"US\\\">\\n        <option value=\\\"US\\\">US</option>\\n        <option value=\\\"CA\\\">Canada</option>\\n      </Select>\\n      <Input label=\\\"Some field\\\" name=\\\"some-field\\\" validate={validate} />\\n      <button type=\\\"submit\\\">Submit</button>\\n    </Form>\\n  );\\n};\\n```\\n\";","import React, { Component } from 'react';\nimport Code from '../../utils/Code';\nimport withDocs from '../../utils/withDocs';\nimport Modal from '../../utils/Modal';\nimport readme from './README.md';\n\nimport { Form, Input, Select, Debug, Elon } from '../../../src';\n\nconst validate = Elon.inspect([\n  (value, values) => {\n    if (values.country === 'US' && !value) {\n      return 'this field should not be empty when in the US';\n    }\n  },\n  (value, values) => {\n    if (value && value.length < 2) {\n      return 'this field should contain more than 2 characters';\n    }\n  }\n]);\n\nclass SimpleValidation extends Component {\n  render() {\n    return (\n      <div>\n        <Form\n          onSubmit={({ values }) =>\n            window.alert(JSON.stringify(values, null, 2))\n          }>\n          <div style={{ display: 'flex', flexWrap: 'wrap' }}>\n            <div style={{ flex: 1, marginRight: '2rem' }}>\n              <Select label=\"Country\" name=\"country\" initialValue=\"US\">\n                <option value=\"US\">US</option>\n                <option value=\"CA\">Canada</option>\n              </Select>\n              <Input label=\"Some field\" name=\"some-field\" validate={validate} />\n              <button type=\"submit\">Submit</button>\n            </div>\n            <div style={{ flex: 2, minWidth: '300px', marginLeft: '3rem' }}>\n              <Debug values errors invalid valid />\n            </div>\n          </div>\n        </Form>\n      </div>\n    );\n  }\n}\n\nexport default withDocs(readme, () => <SimpleValidation />);\n","export default \"# Field Level Yup Validation\\n\\nValidation via yup can be achieved at the field level by passing a validationSchema to a field.\\n\\n**Try clicking the submit button and see what happens:**\\n\\n<!-- STORY -->\\n\\nWhat just happened? When you clicked on the submit button informed triggered validate on the yup schema.\\nThen it triggered validation at the field level. How cool is that!\\n\\n<!-- IDFK Strange issue where i need this commnet or code formatting is messed up -->\\n\\n```jsx\\nimport { Form, Text } from 'informed';\\nimport * as Yup from 'yup';\\n\\nconst SignupSchema = Yup.object().shape({\\n  firstName: Yup.string()\\n    .min(2, 'Too Short!')\\n    .max(50, 'Too Long!')\\n    .required('Required'),\\n  email: Yup.string()\\n    .email('Invalid email')\\n    .required('Required')\\n});\\n\\nconst lastNameSchema = Yup.string()\\n  .min(2, 'Last Name Too Short!')\\n  .max(50, 'Last Name Too Long!')\\n  .required('Last Name Required');\\n\\n<Form yupSchema={SignupSchema}>\\n  <label>\\n    First Name:\\n    <Input field=\\\"firstName\\\" />\\n  </label>\\n  <label>\\n    Last Name:\\n    <Input field=\\\"lastName\\\" validationSchema={lastNameSchema} />\\n  </label>\\n  <label>\\n    Email:\\n    <Input field=\\\"email\\\" />\\n  </label>\\n  <button type=\\\"submit\\\">Submit</button>\\n</Form>;\\n```\\n\";","import React, { Component } from 'react';\nimport Code from '../../utils/Code';\nimport withDocs from '../../utils/withDocs';\nimport Modal from '../../utils/Modal';\nimport readme from './README.md';\n\nimport { Form, Input, Debug } from '../../../src';\nimport * as Yup from 'yup'; // for everything\n\nconst SignupSchema = Yup.object().shape({\n  firstName: Yup.string()\n    .min(2, 'Too Short!')\n    .max(50, 'Too Long!')\n    .required('Required'),\n  email: Yup.string()\n    .email('Invalid email')\n    .required('Required')\n});\n\nconst lastNameSchema = Yup.string()\n  .min(2, 'Last Name Too Short!')\n  .max(50, 'Last Name Too Long!')\n  .required('Last Name Required');\n\nclass SimpleValidation extends Component {\n  render() {\n    return (\n      <div>\n        <Form\n          yupSchema={SignupSchema}\n          onSubmit={({ values }) =>\n            window.alert(JSON.stringify(values, null, 2))\n          }>\n          <div style={{ display: 'flex', flexWrap: 'wrap' }}>\n            <div style={{ flex: 1, marginRight: '2rem' }}>\n              <Input name=\"firstName\" label=\"First Name:\" />\n              <Input\n                name=\"lastName\"\n                label=\"Last Name:\"\n                yupSchema={lastNameSchema}\n              />\n              <Input name=\"email\" label=\"Email:\" />\n              <button type=\"submit\">Submit</button>\n            </div>\n            <div style={{ flex: 2, minWidth: '300px', marginLeft: '3rem' }}>\n              <Debug values errors invalid valid />\n            </div>\n          </div>\n        </Form>\n      </div>\n    );\n  }\n}\n\nexport default withDocs(readme, () => <SimpleValidation />);\n","export default \"# Paired Validation\\n\\nSometimes when validating you may need to revalidate when a sibling field changes.\\nA great example of this is when you have a password and confirm password field,\\nand when one changes you want the other to validate as well. To achieve this, `informed`\\nallows you to pass validateWhen to an input with an array of field names that will re-trigger validation on the field.\\n\\n**The form below is an example of this scenario:**\\n\\n<!-- STORY -->\\n\\n```jsx\\nimport { Form, Input } from 'informed';\\n\\nconst basicValidation = value => {\\n  return !value || value.length < 5\\n    ? 'Password must be at least five characters'\\n    : undefined;\\n};\\n\\nconst matchValidation = (password1, password2) => {\\n  return password1 !== password2 ? 'Passwords must match' : undefined;\\n};\\n\\nconst passwordValidation = (password1, password2) => {\\n  return basicValidation(password1) || matchValidation(password1, password2);\\n};\\n\\nconst validatePassword = (value, values) =>\\n  passwordValidation(value, values.confirmPassword);\\nconst validateConfim = (value, values) =>\\n  passwordValidation(value, values.password);\\n\\n<Form id=\\\"notify-validation-form\\\">\\n  <Input\\n    name=\\\"password\\\"\\n    id=\\\"notify-password\\\"\\n    validate={validatePassword}\\n    validateOnChange\\n    validateWhen={['confirmPassword']}\\n  />\\n  <label htmlFor=\\\"notify-confirm-password\\\">Confirm password:</label>\\n  <Input\\n    name=\\\"confirmPassword\\\"\\n    id=\\\"notify-confirm-password\\\"\\n    validate={validateConfim}\\n    validateOnChange\\n    validateWhen={['password']}\\n  />\\n  <button type=\\\"submit\\\">Submit</button>\\n</Form>;\\n```\\n\";","import React from 'react';\nimport Code from '../../utils/Code';\nimport withDocs from '../../utils/withDocs';\nimport readme from './README.md';\nimport Modal from '../../utils/Modal';\n\nimport { Form, Input, Debug } from '../../../src';\n\nconst basicValidation = value => {\n  return !value || value.length < 5\n    ? 'Password must be at least five characters'\n    : undefined;\n};\n\nconst matchValidation = (password1, password2) => {\n  return password1 !== password2 ? 'Passwords must match' : undefined;\n};\n\nconst passwordValidation = (password1, password2) => {\n  return basicValidation(password1) || matchValidation(password1, password2);\n};\n\nconst validatePassword = (value, values) =>\n  passwordValidation(value, values.confirmPassword);\nconst validateConfim = (value, values) =>\n  passwordValidation(value, values.password);\n\nclass Notifications extends React.Component {\n  render() {\n    return (\n      <div>\n        <Form onSubmit={() => this.modal.open()} id=\"notify-validation-form\">\n          {({ formState }) => (\n            <div style={{ display: 'flex', flexWrap: 'wrap' }}>\n              <div style={{ flex: 1, marginRight: '2rem' }}>\n                <label htmlFor=\"notify-password\">Password:</label>\n                <Input\n                  name=\"password\"\n                  id=\"notify-password\"\n                  validate={validatePassword}\n                  validateOn=\"change\"\n                  validateWhen={['confirmPassword']}\n                />\n                <label htmlFor=\"notify-confirm-password\">\n                  Confirm password:\n                </label>\n                <Input\n                  name=\"confirmPassword\"\n                  id=\"notify-confirm-password\"\n                  validate={validateConfim}\n                  validateOn=\"change\"\n                  validateWhen={['password']}\n                />\n                <button type=\"submit\">Submit</button>\n              </div>\n              <div style={{ flex: 2, minWidth: '300px', marginLeft: '3rem' }}>\n                <Debug values errors invalid />\n              </div>\n              <Modal getControl={model => (this.modal = model)}>\n                <strong>Form Successfully Submitted!</strong>\n              </Modal>\n            </div>\n          )}\n        </Form>\n      </div>\n    );\n  }\n}\n\nexport default withDocs(readme, () => <Notifications />);\n","export default \"# Required\\n\\nOne of the most common validation rules is marking a field as required. We make this dead simple for you.\\n\\n```jsx\\nimport {\\n  Form,\\n  Input,\\n  TextArea,\\n  RadioGroup,\\n  Radio,\\n  Select,\\n  Option,\\n  Checkbox,\\n  Scope,\\n  Debug\\n} from 'informed';\\n\\nconst validate = value => {\\n  if (!value || value.length < 5)\\n    return 'Field must be at least five characters';\\n};\\n\\nconst Example = () => (\\n  <Form\\n    onSubmit={({ values }) => window.alert(JSON.stringify(values, null, 2))}>\\n    <Input name=\\\"name\\\" label=\\\"First name:\\\" required />\\n    <Input name=\\\"favorite.color\\\" label=\\\"Favorite color:\\\" required />\\n    <Scope scope=\\\"favorite\\\">\\n      <Input name=\\\"food\\\" label=\\\"Favorite food:\\\" required />\\n      <Input name=\\\"animal\\\" label=\\\"Favorite animal:\\\" required />\\n    </Scope>\\n    <Input name=\\\"friends[0]\\\" label=\\\"Friend 1:\\\" required />\\n    <Input name=\\\"friends[1]\\\" label=\\\"Friend 2:\\\" required />\\n    <Input name=\\\"friends[2]\\\" label=\\\"Friend 3:\\\" required />\\n    <TextArea name=\\\"bio\\\" label=\\\"Bio\\\" required />\\n    <RadioGroup name=\\\"gender\\\" label=\\\"Gender\\\" required>\\n      <Radio value=\\\"male\\\" label=\\\"Male:\\\" />\\n      <Radio value=\\\"female\\\" label=\\\"Female:\\\" />\\n    </RadioGroup>\\n    <Select name=\\\"status\\\" label=\\\"Relationship status:\\\" required>\\n      <Option value=\\\"\\\" disabled>\\n        Select One...\\n      </Option>\\n      <Option value=\\\"single\\\">Single</Option>\\n      <Option value=\\\"relationship\\\">Relationship</Option>\\n      <Option value=\\\"complicated\\\">Complicated</Option>\\n    </Select>\\n    <Select\\n      name=\\\"colors\\\"\\n      label=\\\"Colors:\\\"\\n      multiple\\n      required\\n      style={{ height: '100px', width: '200px' }}>\\n      <Option value=\\\"red\\\">Red</Option>\\n      <Option value=\\\"green\\\">Green</Option>\\n      <Option value=\\\"blue\\\">Blue</Option>\\n      <Option value=\\\"yellow\\\">Yellow</Option>\\n      <Option value=\\\"orange\\\">Orange</Option>\\n      <Option value=\\\"purple\\\">Purple</Option>\\n    </Select>\\n    <Checkbox name=\\\"authorize\\\" label=\\\"Authorize:\\\" required />\\n    <button type=\\\"submit\\\">Submit</button>\\n    <Debug values errors invalid valid />\\n  </Form>\\n);\\n```\\n\";","import React, { Component } from 'react';\nimport Code from '../../utils/Code';\nimport withDocs from '../../utils/withDocs';\nimport Modal from '../../utils/Modal';\nimport readme from './README.md';\n\nimport {\n  Form,\n  Input,\n  TextArea,\n  RadioGroup,\n  Radio,\n  Select,\n  Option,\n  Checkbox,\n  Scope,\n  Debug\n} from '../../../src';\n\nclass SimpleValidation extends Component {\n  render() {\n    return (\n      <div>\n        <Form\n          onSubmit={({ values }) =>\n            window.alert(JSON.stringify(values, null, 2))\n          }>\n          <div style={{ display: 'flex', flexWrap: 'wrap' }}>\n            <div style={{ flex: 1, marginRight: '2rem' }}>\n              <Input name=\"name\" label=\"First name:\" required />\n              <Input name=\"favorite.color\" label=\"Favorite color:\" required />\n              <Scope scope=\"favorite\">\n                <Input name=\"food\" label=\"Favorite food:\" required />\n                <Input name=\"animal\" label=\"Favorite animal:\" required />\n              </Scope>\n              <Input name=\"friends[0]\" label=\"Friend 1:\" required />\n              <Input name=\"friends[1]\" label=\"Friend 2:\" required />\n              <Input name=\"friends[2]\" label=\"Friend 3:\" required />\n              <TextArea name=\"bio\" label=\"Bio\" required />\n              <RadioGroup name=\"gender\" label=\"Gender\" required>\n                <Radio value=\"male\" label=\"Male:\" />\n                <Radio value=\"female\" label=\"Female:\" />\n              </RadioGroup>\n              <Select name=\"status\" label=\"Relationship status:\" required>\n                <Option value=\"\" disabled>\n                  Select One...\n                </Option>\n                <Option value=\"single\">Single</Option>\n                <Option value=\"relationship\">Relationship</Option>\n                <Option value=\"complicated\">Complicated</Option>\n              </Select>\n              <Select\n                name=\"colors\"\n                label=\"Colors:\"\n                multiple\n                required\n                style={{ height: '100px', width: '200px' }}>\n                <Option value=\"red\">Red</Option>\n                <Option value=\"green\">Green</Option>\n                <Option value=\"blue\">Blue</Option>\n                <Option value=\"yellow\">Yellow</Option>\n                <Option value=\"orange\">Orange</Option>\n                <Option value=\"purple\">Purple</Option>\n              </Select>\n              <Checkbox name=\"authorize\" label=\"Authorize:\" required />\n              <button type=\"submit\">Submit</button>\n            </div>\n            <div style={{ flex: 2, minWidth: '300px', marginLeft: '3rem' }}>\n              <Debug values errors invalid valid />\n            </div>\n          </div>\n        </Form>\n      </div>\n    );\n  }\n}\n\nexport default withDocs(readme, () => <SimpleValidation />);\n","export default \"# Simple Validation\\n\\nSimple validation can be achieved by passing a validation function to the input.\\nBelow is an example form that has validation functions. The function defined\\nwill return an error when the input has less than five characters, or there is\\nno value at all, and undefined otherwise. We pass this validation function to every\\ninput and validation will **occur on submission**.\\n\\n**Try clicking the submit button and see what happens:**\\n\\n<!-- STORY -->\\n\\nWhat just happened? When you clicked on the submit button all of the validation\\nfunctions were triggered for each field. Because every validation failed, the\\nform never actually called onSubmit. In other words, informed will only\\nsubmit a valid form.\\n\\n**Get rid of the errors by typing at least 5 characters in each field and\\nclick the submit button again and see what happens:**\\n\\n<!-- IDFK Strange issue where i need this commnet or code formatting is messed up -->\\n\\n```jsx\\nimport { Form, Text } from 'informed';\\n\\nconst validate = value => {\\n  if (!value || value.length < 5)\\n    return 'Field must be at least five characters';\\n};\\n\\nconst Example = () => {\\n  return (\\n    <Form\\n      onSubmit={({ values }) => window.alert(JSON.stringify(values, null, 2))}>\\n      <Input name=\\\"color\\\" label=\\\"Color:\\\" validate={validate} />\\n      <Input name=\\\"food\\\" label=\\\"Food:\\\" validate={validate} />\\n      <Input name=\\\"car\\\" label=\\\"Car:\\\" validate={validate} />\\n      <button type=\\\"submit\\\">Submit</button>\\n    </Form>\\n  );\\n};\\n```\\n\";","import React, { Component } from 'react';\nimport Code from '../../utils/Code';\nimport withDocs from '../../utils/withDocs';\nimport Modal from '../../utils/Modal';\nimport readme from './README.md';\n\nimport { Form, Input, Debug } from '../../../src';\n\nconst validate = value => {\n  if (!value || value.length < 5)\n    return 'Field must be at least five characters';\n};\n\nclass SimpleValidation extends Component {\n  render() {\n    return (\n      <div>\n        <Form\n          onSubmit={({ values }) =>\n            window.alert(JSON.stringify(values, null, 2))\n          }>\n          <div style={{ display: 'flex', flexWrap: 'wrap' }}>\n            <div style={{ flex: 1, marginRight: '2rem' }}>\n              <Input name=\"color\" label=\"Color:\" validate={validate} />\n              <Input name=\"food\" label=\"Food:\" validate={validate} />\n              <Input name=\"car\" label=\"Car:\" validate={validate} />\n              <button type=\"submit\">Submit</button>\n            </div>\n            <div style={{ flex: 2, minWidth: '300px', marginLeft: '3rem' }}>\n              <Debug values errors invalid valid />\n            </div>\n          </div>\n        </Form>\n      </div>\n    );\n  }\n}\n\nexport default withDocs(readme, () => <SimpleValidation />);\n","export default \"# Validation Control\\n\\nBy default fields will only validate on blur. To get\\nmore granular validation, simply pass in `validateOn` props.\\n\\nSee table below for mapping:\\n\\n<br />\\n\\n| validateOn    | derived       | change       | blur         | submit       | default |\\n| ------------- | ------------- | ------------ | ------------ | ------------ | ------- |\\n| change        | change-change | sync + async | sync + async | sync + async |         |\\n| blur          | blur-blur     | x            | sync + async | sync + async | x       |\\n| change-blur   | change-blur   | sync         | sync + async | sync + async |         |\\n| change-submit | change-submit | sync         | sync         | sync + async |         |\\n| blur-submit   | submit-submit | x            | sync         | sync + async |         |\\n| submit        | submit-submit | x            | x            | sync + async |         |\\n\\n<br />\\n\\nValidation is controlled via the `validateOn` prop, but in order to control when it shows,\\nuse the `showErrorIfError` and `showErrorIfDirty` props. **This is because sometimes you may want the form to be invalid but not show the error to the user yet ( default is `showErrorIfTouched` )**\\n\\n| prop               | description                                                                                                  | default |\\n| ------------------ | ------------------------------------------------------------------------------------------------------------ | ------- |\\n| showErrorIfError   | will set `showError` for that field to true whenever there is an error (typically used with validateOnMount) |         |\\n| showErrorIfTouched | will set `showError` for that field to true whenever there is an error and the field is touched              | x       |\\n| showErrorIfDirty   | will set `showError` for that field to true whenever there is an error and the field is dirty                |         |\\n\\n<br />\\n\\nFinally we have a use case for validating right away ( on mount )\\n\\n| prop            | description                     | default |\\n| --------------- | ------------------------------- | ------- |\\n| validateOnMount | will trigger validation onMount | false   |\\n\\n<!-- STORY -->\\n\\n```jsx\\nimport { Form, Input } from 'informed';\\n\\nconst validate = value => {\\n  if (!value || value.length < 5)\\n    return 'Field must be at least five characters';\\n};\\n\\nconst asyncValidate = username => {\\n  return new Promise((resolve, reject) => {\\n    setTimeout(() => {\\n      // Simulate username check\\n      if (['joseph', 'tanner', 'billy', 'bobby'].includes(username)) {\\n        return resolve('That username is taken');\\n      }\\n      // Simulate request faulure\\n      if (username === 'reject') {\\n        return reject(new Error('Unable to validate username.'));\\n      }\\n      return resolve();\\n    }, 2000);\\n  });\\n};\\n\\nconst ValidationControl = () => (\\n  <div>\\n    <Form autocomplete=\\\"off\\\">\\n      <h4>validateOn=\\\"blur\\\" ( default )</h4>\\n      <Input\\n        name=\\\"username1\\\"\\n        label=\\\"Username1\\\"\\n        required\\n        validate={validate}\\n        asyncValidate={asyncValidate}\\n      />\\n      <h4>validateOn=\\\"change\\\"</h4>\\n      <Input\\n        name=\\\"username2\\\"\\n        label=\\\"Username2\\\"\\n        validateOn=\\\"change\\\"\\n        required\\n        validate={validate}\\n        asyncValidate={asyncValidate}\\n      />\\n      <h4>validateOn=\\\"change\\\" && showErrorIfDirty</h4>\\n      <Input\\n        name=\\\"username3\\\"\\n        label=\\\"Username3\\\"\\n        validateOn=\\\"change\\\"\\n        showErrorIfDirty\\n        required\\n        validate={validate}\\n        asyncValidate={asyncValidate}\\n      />\\n      <h4>validateOn=\\\"change-blur\\\"</h4>\\n      <Input\\n        name=\\\"username4\\\"\\n        label=\\\"Username4\\\"\\n        validateOn=\\\"change-blur\\\"\\n        required\\n        validate={validate}\\n        asyncValidate={asyncValidate}\\n      />\\n      <h4>validateOn=\\\"change-submit\\\"</h4>\\n      <Input\\n        name=\\\"username5\\\"\\n        label=\\\"Username5\\\"\\n        validateOn=\\\"change-submit\\\"\\n        required\\n        validate={validate}\\n        asyncValidate={asyncValidate}\\n      />\\n      <h4>validateOn=\\\"blur-submit\\\"</h4>\\n      <Input\\n        name=\\\"username6\\\"\\n        label=\\\"Username6\\\"\\n        validateOn=\\\"blur-submit\\\"\\n        required\\n        validate={validate}\\n        asyncValidate={asyncValidate}\\n      />\\n      <h4>validateOn=\\\"submit\\\"</h4>\\n      <Input\\n        name=\\\"username7\\\"\\n        label=\\\"Username7\\\"\\n        validateOn=\\\"submit\\\"\\n        required\\n        validate={validate}\\n        asyncValidate={asyncValidate}\\n      />\\n      <h4>validateOnMount</h4>\\n      <Input\\n        name=\\\"username8\\\"\\n        label=\\\"Username8\\\"\\n        validateOnMount\\n        required\\n        validate={validate}\\n        asyncValidate={asyncValidate}\\n      />\\n      <h4>validateOnMount && showErrorIfError</h4>\\n      <Input\\n        name=\\\"username9\\\"\\n        label=\\\"Username9\\\"\\n        validateOnMount\\n        showErrorIfError\\n        required\\n        validate={validate}\\n        asyncValidate={asyncValidate}\\n      />\\n      <button type=\\\"submit\\\">Submit</button>\\n      <Debug values errors invalid validating />\\n    </Form>\\n  </div>\\n);\\n```\\n\";","import React from 'react';\nimport Code from '../../utils/Code';\nimport withDocs from '../../utils/withDocs';\nimport readme from './README.md';\n\nimport { Form, Input, Debug } from '../../../src';\n\nconst validate = value => {\n  if (!value || value.length < 5)\n    return 'Field must be at least five characters';\n};\n\nconst asyncValidate = username => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      // Simulate username check\n      if (['joseph', 'tanner', 'billy', 'bobby'].includes(username)) {\n        return resolve('That username is taken');\n      }\n      // Simulate request faulure\n      if (username === 'reject') {\n        return reject(new Error('Unable to validate username.'));\n      }\n      return resolve();\n    }, 2000);\n  });\n};\n\nconst ValidationControl = () => (\n  <div>\n    <Form autocomplete=\"off\">\n      {({ formApi, formState }) => (\n        <div style={{ display: 'flex', flexWrap: 'wrap' }}>\n          <div style={{ flex: 1, marginRight: '2rem' }}>\n            <h4>validateOn=\"blur\" ( default )</h4>\n            <Input\n              name=\"username1\"\n              label=\"Username1\"\n              required\n              validate={validate}\n              asyncValidate={asyncValidate}\n            />\n            <h4>validateOn=\"change\"</h4>\n            <Input\n              name=\"username2\"\n              label=\"Username2\"\n              validateOn=\"change\"\n              required\n              validate={validate}\n              asyncValidate={asyncValidate}\n            />\n            <h4>validateOn=\"change\" && showErrorIfDirty</h4>\n            <Input\n              name=\"username3\"\n              label=\"Username3\"\n              validateOn=\"change\"\n              showErrorIfDirty\n              required\n              validate={validate}\n              asyncValidate={asyncValidate}\n            />\n            <h4>validateOn=\"change-blur\"</h4>\n            <Input\n              name=\"username4\"\n              label=\"Username4\"\n              validateOn=\"change-blur\"\n              required\n              validate={validate}\n              asyncValidate={asyncValidate}\n            />\n            <h4>validateOn=\"change-submit\"</h4>\n            <Input\n              name=\"username5\"\n              label=\"Username5\"\n              validateOn=\"change-submit\"\n              required\n              validate={validate}\n              asyncValidate={asyncValidate}\n            />\n            <h4>validateOn=\"blur-submit\"</h4>\n            <Input\n              name=\"username6\"\n              label=\"Username6\"\n              validateOn=\"blur-submit\"\n              required\n              validate={validate}\n              asyncValidate={asyncValidate}\n            />\n            <h4>validateOn=\"submit\"</h4>\n            <Input\n              name=\"username7\"\n              label=\"Username7\"\n              validateOn=\"submit\"\n              required\n              validate={validate}\n              asyncValidate={asyncValidate}\n            />\n            <h4>validateOnMount</h4>\n            <Input\n              name=\"username8\"\n              label=\"Username8\"\n              validateOnMount\n              required\n              validate={validate}\n              asyncValidate={asyncValidate}\n            />\n            <h4>validateOnMount && showErrorIfError</h4>\n            <Input\n              name=\"username9\"\n              label=\"Username9\"\n              validateOnMount\n              showErrorIfError\n              required\n              validate={validate}\n              asyncValidate={asyncValidate}\n            />\n            <button type=\"submit\">Submit</button>\n          </div>\n          <div style={{ flex: 2, minWidth: '300px', marginLeft: '3rem' }}>\n            <Debug values errors invalid validating />\n          </div>\n        </div>\n      )}\n    </Form>\n  </div>\n);\n\nexport default withDocs(readme, ValidationControl);\n","export default \"# Error Message\\n\\nMost of the time you want to display a customized error message for the built-in validation. Here's how to achieve that.\\n\\n**Note:** When you provide a string to the errorMessage prop, that will be used as the default for all built-in validation rules. The same can be achieved by adding a property with the key \\\\_ (underscore).\\n\\n<!-- STORY -->\\n\\n```jsx\\nimport {\\n  Form,\\n  Input,\\n  TextArea,\\n  RadioGroup,\\n  Radio,\\n  Select,\\n  Option,\\n  Checkbox,\\n  Scope,\\n  Debug\\n} from 'informed';\\n\\nconst validate = value => {\\n  if (!value || value.length < 5)\\n    return 'Field must be at least five characters';\\n};\\n\\nconst Example = () => (\\n  <Form\\n    errorMessage={{ required: 'This is field is required for your profile!' }}\\n    onSubmit={({ values }) => window.alert(JSON.stringify(values, null, 2))}>\\n    <Input\\n      name=\\\"name\\\"\\n      label=\\\"First name:\\\"\\n      required\\n      errorMessage=\\\"There is a problem with this field!\\\"\\n    />\\n    <Input\\n      name=\\\"last\\\"\\n      label=\\\"Last name:\\\"\\n      required\\n      errorMessage={{ required: 'Last name is required!' }}\\n    />\\n    <Input name=\\\"favoriteColor\\\" label=\\\"Favorite color:\\\" required />\\n    <button type=\\\"submit\\\">Submit</button>\\n    <Debug values errors invalid valid />\\n  </Form>\\n);\\n```\\n\";","import React, { Component } from 'react';\nimport withDocs from '../../../utils/withDocs';\nimport readme from './README.md';\n\nimport { Form, Input, Scope, Debug } from '../../../../src';\n\nclass SimpleValidation extends Component {\n  render() {\n    return (\n      <div>\n        <Form\n          errorMessage={{\n            required: 'This is field is required for your profile!'\n          }}\n          onSubmit={({ values }) =>\n            window.alert(JSON.stringify(values, null, 2))\n          }>\n          <div style={{ display: 'flex', flexWrap: 'wrap' }}>\n            <div style={{ flex: 1, marginRight: '2rem' }}>\n              <Input\n                name=\"first\"\n                label=\"First name:\"\n                required\n                errorMessage=\"There is a problem with this field!\"\n              />\n              <Input\n                name=\"last\"\n                label=\"Last name:\"\n                required\n                errorMessage={{ required: 'Last name is required!' }}\n              />\n              <Input name=\"favoriteColor\" label=\"Favorite color:\" required />\n              <button type=\"submit\">Submit</button>\n            </div>\n            <div style={{ flex: 2, minWidth: '300px', marginLeft: '3rem' }}>\n              <Debug values errors invalid valid />\n            </div>\n          </div>\n        </Form>\n      </div>\n    );\n  }\n}\n\nexport default withDocs(readme, () => <SimpleValidation />);\n","export default \"# Schema Error Messages\\n\\n<!-- STORY -->\\n\\n```jsx\\nimport { Form, SchemaFields, Debug } from 'informed';\\n\\nconst schema = {\\n  type: 'object',\\n  required: ['name', 'brother'],\\n  errorMessage: {\\n    _: 'name default error message',\\n    required: 'name is required',\\n    minLength: 'name must be longer',\\n    maxLength: 'name must be shorter',\\n    pattern: 'name match the pattern',\\n    maximum: 'must be smaller than that!'\\n  },\\n  properties: {\\n    name: {\\n      type: 'string',\\n      title: 'First name',\\n      'ui:control': 'input',\\n      minLength: 6,\\n      maxLength: 6,\\n      pattern: '^[0-9]{4}[a-zA-Z]{2}$'\\n    },\\n    brother: {\\n      type: 'object',\\n      required: ['name', 'age', 'height', 'sameError'],\\n      errorMessage: {\\n        _: 'brothers field default error message',\\n        required: 'brothers field is required',\\n        minLength: 'brothers field must be longer',\\n        maxLength: 'brothers field must be shorter',\\n        pattern: 'brother field match the pattern'\\n      },\\n      properties: {\\n        name: {\\n          type: 'string',\\n          title: 'Brother name',\\n          'ui:control': 'input'\\n        },\\n        age: {\\n          type: 'number',\\n          title: 'Brother age',\\n          'ui:control': 'input',\\n          'ui:props': {\\n            type: 'number'\\n          },\\n          minLength: 6,\\n          maxLength: 6,\\n          pattern: '^[0-9]{4}[a-zA-Z]{2}$',\\n          errorMessage: {\\n            _: 'brothers age default error message',\\n            required: 'brothers age is required',\\n            minLength: 'brothers age must be longer',\\n            maxLength: 'brothers age must be shorter',\\n            pattern: 'brother age match the pattern'\\n          }\\n        },\\n        height: {\\n          type: 'string',\\n          title: 'Brother Height',\\n          'ui:control': 'input',\\n          'ui:props': {\\n            type: 'number'\\n          },\\n          maximum: 8\\n        },\\n        sameError: {\\n          type: 'string',\\n          title: 'Same Error',\\n          'ui:control': 'input',\\n          minLength: 6,\\n          maxLength: 6,\\n          pattern: '^[0-9]{4}[a-zA-Z]{2}$',\\n          errorMessage: 'Ahhh!!!!!!'\\n        }\\n      }\\n    }\\n  }\\n};\\n\\nconst Schema = () => (\\n  <Form\\n    schema={schema}\\n    onSubmit={({ values }) => window.alert(JSON.stringify(values, null, 2))}>\\n    <SchemaFields />\\n    <button type=\\\"submit\\\">Submit</button>\\n    <Debug errors values />\\n  </Form>\\n);\\n```\\n\";","import React from 'react';\nimport withDocs from '../../../utils/withDocs';\nimport readme from './README.md';\n\nimport { Form, SchemaFields, Debug } from '../../../../src';\n\nconst schema = {\n  type: 'object',\n  required: ['name', 'brother'],\n  errorMessage: {\n    _: 'name default error message',\n    required: 'name is required',\n    minLength: 'name must be longer',\n    maxLength: 'name must be shorter',\n    pattern: 'name match the pattern',\n    maximum: 'must be smaller than that!'\n  },\n  properties: {\n    name: {\n      type: 'string',\n      title: 'First name',\n      'ui:control': 'input',\n      minLength: 6,\n      maxLength: 6,\n      pattern: '^[0-9]{4}[a-zA-Z]{2}$'\n    },\n    brother: {\n      type: 'object',\n      required: ['name', 'age', 'height', 'sameError'],\n      errorMessage: {\n        _: 'brothers field default error message',\n        required: 'brothers field is required',\n        minLength: 'brothers field must be longer',\n        maxLength: 'brothers field must be shorter',\n        pattern: 'brother field match the pattern'\n      },\n      properties: {\n        name: {\n          type: 'string',\n          title: 'Brother name',\n          'ui:control': 'input'\n        },\n        age: {\n          type: 'number',\n          title: 'Brother age',\n          'ui:control': 'input',\n          'ui:props': {\n            type: 'number'\n          },\n          minLength: 6,\n          maxLength: 6,\n          pattern: '^[0-9]{4}[a-zA-Z]{2}$',\n          errorMessage: {\n            _: 'brothers age default error message',\n            required: 'brothers age is required',\n            minLength: 'brothers age must be longer',\n            maxLength: 'brothers age must be shorter',\n            pattern: 'brother age match the pattern'\n          }\n        },\n        height: {\n          type: 'string',\n          title: 'Brother Height',\n          'ui:control': 'input',\n          'ui:props': {\n            type: 'number'\n          },\n          maximum: 8\n        },\n        sameError: {\n          type: 'string',\n          title: 'Same Error',\n          'ui:control': 'input',\n          minLength: 6,\n          maxLength: 6,\n          pattern: '^[0-9]{4}[a-zA-Z]{2}$',\n          errorMessage: 'Ahhh!!!!!!'\n        }\n      }\n    }\n  }\n};\n\nconst Schema = () => (\n  <Form\n    schema={schema}\n    onSubmit={({ values }) => window.alert(JSON.stringify(values, null, 2))}>\n    <SchemaFields />\n    <button type=\"submit\">Submit</button>\n    <Debug errors values />\n  </Form>\n);\n\nexport default withDocs(readme, Schema);\n","import React from 'react';\n// import SchemaAJV from './SchemaAJV';\nimport Schema from './Schema';\nimport Format from './Format';\n\nconst Intro = () => (\n  <div>\n    <Format />\n    <Schema />\n    {/* <SchemaAJV /> */}\n  </div>\n);\n\nexport default Intro;\n","export default \"# Yup Validation\\n\\nValidation via yup can be achieved by passing a validationSchema to the form.\\n\\n**Try clicking the submit button and see what happens:**\\n\\n<!-- STORY -->\\n\\nWhat just happened? When you clicked on the submit button informed triggered validate on the yup schema.\\n\\n**Get rid of the errors by typing at least 2 characters in each name field and a valid email, then\\nclick the submit button again and see what happens:**\\n\\n<!-- IDFK Strange issue where i need this commnet or code formatting is messed up -->\\n\\n```jsx\\nimport { Form, Text } from 'informed';\\nimport * as Yup from 'yup';\\n\\nconst SignupSchema = Yup.object().shape({\\n  firstName: Yup.string()\\n    .min(2, 'Too Short!')\\n    .max(50, 'Too Long!')\\n    .required('Required'),\\n  lastName: Yup.string()\\n    .min(2, 'Too Short!')\\n    .max(50, 'Too Long!')\\n    .required('Required'),\\n  email: Yup.string()\\n    .email('Invalid email')\\n    .required('Required')\\n});\\n\\n<Form\\n  yupSchema={SignupSchema}\\n  onSubmit={({ values }) => window.alert(JSON.stringify(values, null, 2))}>\\n  ><Input name=\\\"firstName\\\" label=\\\"First Name:\\\" />\\n  <Input name=\\\"lastName\\\" label=\\\"Last Name:\\\" />\\n  <Input name=\\\"email\\\" label=\\\"Email:\\\" />\\n  <button type=\\\"submit\\\">Submit</button>\\n</Form>;\\n```\\n\";","import React, { Component } from 'react';\nimport Code from '../../utils/Code';\nimport withDocs from '../../utils/withDocs';\nimport Modal from '../../utils/Modal';\nimport readme from './README.md';\n\nimport { Form, Input, Debug } from '../../../src';\nimport * as Yup from 'yup'; // for everything\n\nconst SignupSchema = Yup.object().shape({\n  firstName: Yup.string()\n    .min(2, 'Too Short!')\n    .max(50, 'Too Long!')\n    .required('Required'),\n  lastName: Yup.string()\n    .min(2, 'Too Short!')\n    .max(50, 'Too Long!')\n    .required('Required'),\n  email: Yup.string()\n    .email('Invalid email')\n    .required('Required')\n});\n\nclass SimpleValidation extends Component {\n  render() {\n    return (\n      <div>\n        <Form\n          yupSchema={SignupSchema}\n          onSubmit={({ values }) =>\n            window.alert(JSON.stringify(values, null, 2))\n          }>\n          <div style={{ display: 'flex', flexWrap: 'wrap' }}>\n            <div style={{ flex: 1, marginRight: '2rem' }}>\n              <Input name=\"firstName\" label=\"First Name:\" />\n              <Input name=\"lastName\" label=\"Last Name:\" />\n              <Input name=\"email\" label=\"Email:\" />\n              <button type=\"submit\">Submit</button>\n            </div>\n            <div style={{ flex: 2, minWidth: '300px', marginLeft: '3rem' }}>\n              <Debug values errors invalid valid />\n            </div>\n          </div>\n        </Form>\n      </div>\n    );\n  }\n}\n\nexport default withDocs(readme, () => <SimpleValidation />);\n","import React from 'react';\nimport { storiesOf, addDecorator } from '@storybook/react';\nimport { configureReadme } from 'storybook-readme';\nimport StoryWrapper from './utils/StoryWrapper';\nimport Intro from './Intro';\nimport TLDR from './TLDR';\nimport CarColor from './CarColor';\nimport Changelog from './Intro/Changelog';\nimport Basic from './Form/Basic';\nimport Modified from './Form/Modified';\nimport FormProvider from './Form/FormProvider';\nimport Path from './Form/Path';\nimport FeatureTester from './Form/FeatureTester';\nimport Dynamic from './Form/Dynamic';\nimport Dependent from './Dynamic/Dependent';\nimport Schema from './Schema/Intro';\nimport FormattedSchema from './Schema/FormattedSchema';\nimport NestedSchema from './Schema/NestedSchema';\nimport SubSchema from './Schema/SubSchema';\nimport ArrayFieldSchema from './Schema/ArrayFieldSchema';\nimport ArrayFieldSchemaRelevant from './Schema/ArrayFieldSchemaRelevant';\nimport ArrayFieldSchemaNested from './Schema/ArrayFieldSchemaNested';\nimport CustomSchema from './Schema/CustomSchema';\nimport Complex from './Form/Complex';\nimport Big from './Form/Big';\nimport State from './Form/State';\nimport Debug from './Debugging/Debug';\nimport Props from './Form/Props';\nimport Api from './Form/Api';\nimport BasicMultistep from './Multistep/Basic';\nimport ComplexMultistep from './Multistep/Complex';\nimport MultistepState from './Multistep/MultistepState';\nimport Actions from './Multistep/Actions';\nimport SimpleValidation from './Validation/SimpleValidation';\nimport Required from './Validation/Required';\nimport YupValidation from './Validation/YupValidation';\nimport FieldLevelYupValidation from './Validation/FieldLevelYupValidation';\nimport ComplexValidation from './Validation/ComplexValidation';\nimport ValidationControl from './Validation/ValidationControl';\nimport ValidationMessages from './Validation/ValidationMessages';\nimport Elon from './Validation/Elon';\n\nimport GlobalIntro from './GlobalForms/Intro';\n\n// import ArrayFieldValidation from './Validation/ArrayFieldValidation';\n// import ComplexArrayFieldValidation from './Validation/ComplexArrayFieldValidation';\nimport Notifications from './Validation/Notifications';\n// import FormLevelValidation from './Validation/FormLevelValidation';\nimport AjvValidation from './Validation/AjvValidation';\nimport AjvValidationNoRender from './Validation/AjvValidationNoRender';\nimport AsyncValidation from './Validation/AsyncValidation';\n// import AsyncValidationControl from './Validation/AsyncValidationControl';\nimport FormatPlayground from './Playground/Format';\nimport SchemaPlayground from './Playground/Schema';\n\n// import FormatParse from './Formatting/FormatParse';\nimport Formatter from './Formatting/Formatter';\nimport Clean from './Formatting/Clean';\nimport Mask from './Formatting/Mask';\nimport Parse from './Formatting/Parse';\nimport FormatterFunctions from './Formatting/FormatterFunctions';\n// // import MaskWithCursor from './Formatting/MaskWithCursor';\n// import MaskWithCursorOffset from './Formatting/MaskWithCursorOffset';\n// import UnnecessaryRendering from './Gotchas/UnnecessaryRendering';\nimport Scope from './Gotchas/Scope';\nimport ChangingInitialValues from './Gotchas/ChangingInitialValues';\nimport InitialvsDefault from './Gotchas/InitialvsDefault';\nimport InitializeIfPristine from './Gotchas/InitializeIfPristine';\n\n// import Optimization from './Gotchas/Optimization';\nimport DynamicFields from './Dynamic/DynamicFields';\nimport AsyncDependentFields from './Dynamic/AsyncDependentFields';\nimport CustomInputs from './CustomInputs';\nimport {\n  TextInput,\n  NumberInput,\n  TextAreaInput,\n  RadioInput,\n  CheckboxInput,\n  SelectInput,\n  MultiSelectInput,\n  Intro as InputIntro,\n  GoogleApi\n} from './Inputs';\n\nimport {\n  ArrayOfFields,\n  ArrayOfScopes,\n  // DynamicArrays,\n  NestedFields,\n  ArrayFieldItem,\n  AlternateSyntax,\n  DependentFieldsInArray,\n  HugeArrayForm\n  // Swap\n} from './Arrays';\n\nimport RelevantComonent from './Relevance/RelevantComponent';\nimport RelevanceProp from './Relevance/RelevanceProp';\nimport ComplexRelevance from './Relevance/ComplexRelevance';\nimport ScopedRelevance from './Relevance/ScopedRelevance';\n\nimport KeepState from './KeepState/KeepState';\n\nimport ScopeComponent from './Scope/ScopeComponent';\n\n// import {\n//   WithFormApi,\n//   WithFormState,\n//   WithFieldApi,\n//   WithFieldState\n// } from './HOC';\n\nimport {\n  UseFormApi,\n  UseFormState,\n  UseFieldApi,\n  UseFieldState,\n  UseForm,\n  UseField,\n  UseFormStateSelector\n} from './Hooks';\nimport ConditionalSchema from './Schema/ConditionalSchema';\nimport ConditionalSchemaControl from './Schema/ConditionalSchemaControl';\nimport ConditionalOptions from './Schema/ConditionalOptions';\nimport SchemaComponents from './Schema/SchemaComponents';\n// import HugeSchema from './Schema/HugeSchema';\nimport FormatDependent from './Form/FormatDependent';\nimport FormattedObjectInput from './CustomInputs/FormattedObjectInput';\nimport ObjectInput from './CustomInputs/ObjectInput';\nimport NumberFormatter from './Formatting/NumberFormatter';\nimport ConditionalProps from './Conditionals/ConditionalProps';\nimport ConditionalPropsSchema from './Conditionals/ConditionalPropsSchema';\nimport ChangingSchema from './Schema/ChangingSchema';\nimport KeepStateIfRelevant from './KeepState/KeepStateIfRelevant';\nimport Keep from './KeepState/Keep';\n\naddDecorator(StoryWrapper);\n\nconfigureReadme({\n  /**\n   * Wrapper for story. Usually used to set some styles\n   * React: React.ReactNode\n   * Vue: Vue component\n   */\n  StoryPreview: ({ children }) => (\n    <div\n      style={{\n        marginTop: '2rem',\n        marginBottom: '2rem'\n        // border: '1px dashed #e5e5e5',\n      }}>\n      {children}\n    </div>\n  ),\n\n  /**\n   * Wrapper for content and sidebar docs. Usually used to set some styles\n   * React: React.ReactNode\n   * Vue: Vue component\n   */\n  DocPreview: ({ children }) => <div> {children}</div>,\n\n  /**\n   * Wrapper for hedaer docs. Usually used to set some styles\n   * React: React.ReactNode\n   * Vue: Vue component\n   */\n  HeaderPreview: ({ children }) => <div>{children}</div>,\n\n  /**\n   * Wrapper for footer docs. Usually used to set some styles\n   * React: React.ReactNode\n   * Vue: Vue component\n   */\n  FooterPreview: ({ children }) => <div>{children}</div>,\n\n  /**\n   * Header docs in markdown format\n   */\n  header: '',\n\n  /**\n   * Footer docs in markdown format\n   */\n  footer: ''\n});\n\n//addParameters(params);\n\nstoriesOf('Introduction', module)\n  //.addParameters(params)\n  .add('Getting Started', Intro)\n  .add('TLDR', TLDR)\n  .add('Car Color', CarColor)\n  .add('Changelog', Changelog);\n\nstoriesOf('Form', module)\n  .add('Basic', Basic)\n  .add('State', State)\n  .add('Api', Api)\n  .add('Props', Props)\n  .add('Dynamic', DynamicFields)\n  .add('Dependent Fields', FormatDependent)\n  .add('Modified', Modified)\n  .add('Path', Path)\n  .add('Features', FeatureTester)\n  .add('Inputs', Complex)\n  .add('FormProvider', FormProvider)\n  .add('Big', Big);\n\nstoriesOf('Inputs', module)\n  .add('Intro', InputIntro)\n  .add('Input', TextInput)\n  .add('Text Area', TextAreaInput)\n  .add('Radio Input', RadioInput)\n  .add('Checkbox Input', CheckboxInput)\n  .add('Select Input', SelectInput)\n  .add('Multi Select Input', MultiSelectInput)\n  .add('Number Input', NumberInput)\n  .add('GoogleApi', GoogleApi);\n\nstoriesOf('CustomInputs', module)\n  .add('Creating Custom Inputs', CustomInputs)\n  .add('Creating Object Inputs', ObjectInput)\n  .add('Creating Formatted Object Inputs', FormattedObjectInput);\n\nstoriesOf('Arrays', module)\n  // .add('Array Of Fields', ArrayOfFields)\n  // .add('Array Of Scopes', ArrayOfScopes)\n  // THE ABOVER WWAS ALREDAY COMMENTED OUT\n  .add('Array Field', NestedFields)\n  .add('Flat Array Field', AlternateSyntax)\n  .add('Array Field Item', ArrayFieldItem)\n  .add('Dependent Fields', DependentFieldsInArray)\n  // .add('Swap', Swap)\n  .add('Huge Array Form', HugeArrayForm);\n\nstoriesOf('Validation', module)\n  .add('Simple Validation', SimpleValidation)\n  .add('Async Validation', AsyncValidation)\n  .add('Complex Validation', ComplexValidation)\n  .add('Validation Control', ValidationControl)\n  .add('Required', Required)\n  .add('Validation Messages', ValidationMessages)\n  // .add('Form Level Validation', FormLevelValidation)\n  .add('Paired Validation', Notifications)\n  // .add('Array Field Validation', ArrayFieldValidation)\n  // .add('Complex Array Field Validation', ComplexArrayFieldValidation)\n  .add('Yup Validation', YupValidation)\n  .add('Field Level + Yup Validation', FieldLevelYupValidation)\n  .add('JSON Schema Validation + Rendering', AjvValidation)\n  .add('Only JSON Schema Validation', AjvValidationNoRender)\n  .add('Elon', Elon);\n// .add('Async Validation Control', AsyncValidationControl);\n\nstoriesOf('Relevance', module)\n  .add('Relevant Comonent', RelevantComonent)\n  .add('Relevance Prop', RelevanceProp)\n  .add('Relevance Optimization', ComplexRelevance)\n  .add('Scoped Relevance', ScopedRelevance);\n\nstoriesOf('KeepState', module)\n  .add('KeepState', KeepState)\n  .add('Keep State If Relevant', KeepStateIfRelevant)\n  .add('Keep', Keep);\n\nstoriesOf('Scope', module).add('Scope Comonent', ScopeComponent);\n\nstoriesOf('Schema', module)\n  .add('Schema', Schema)\n  .add('Nested Schema', NestedSchema)\n  .add('Sub Schema', SubSchema)\n  .add('Formatted Schema', FormattedSchema)\n  .add('Array Field Schema', ArrayFieldSchema)\n  .add('Conditional Schema', ConditionalSchema)\n  .add('Conditional Schema Control', ConditionalSchemaControl)\n  .add('Conditional Options', ConditionalOptions)\n  .add('Custom Schema', CustomSchema)\n  .add('Schema Components', SchemaComponents)\n  .add('Nested Array Fields', ArrayFieldSchemaNested)\n  .add('Relevant ArrayField Schema', ArrayFieldSchemaRelevant)\n  .add('Changing Schema', ChangingSchema);\n\n// .add('Huge Schema', HugeSchema);\n\nstoriesOf('Debugging', module).add('Debug', Debug);\n\nstoriesOf('Formatting', module)\n  .add('Formatter', Formatter)\n  .add('Number Formatter', NumberFormatter)\n  .add('Formatter Functions', FormatterFunctions)\n  .add('Clean', Clean)\n  .add('Mask', Mask)\n  .add('Parse', Parse);\n// // .add('Mask With Cursor', MaskWithCursor)\n// // .add('Mask With Cursor Offset', MaskWithCursorOffset)\n// // .add('Format and Parse', FormatParse);\n\nstoriesOf('Hooks!', module)\n  .add('useFormApi', UseFormApi)\n  .add('useFormState', UseFormState)\n  .add('useFieldApi', UseFieldApi)\n  .add('useFieldState', UseFieldState)\n  .add('useForm', UseForm)\n  .add('useField', UseField)\n  .add('useFormStateSelector', UseFormStateSelector);\n\nstoriesOf('Multistep Forms', module)\n  .add('BasicMultistep', BasicMultistep)\n  .add('MultistepState', MultistepState)\n  .add('Dynamic Multistep', ComplexMultistep)\n  .add('Multistep Actions', Actions);\n\nstoriesOf('Gotchas', module)\n  //   .add('Unnecessary Rendering', UnnecessaryRendering)\n  //   .add('Optimization', Optimization)\n  .add('Initial Vs Default', InitialvsDefault)\n  .add('Change initialValues', ChangingInitialValues)\n  .add('Initialize If Pristine', InitializeIfPristine)\n  .add('Scope', Scope);\n\nstoriesOf('Dynamic Forms', module)\n  .add('Dynamic Fields', DynamicFields)\n  .add('Async Dependent Fields', AsyncDependentFields)\n  .add('Dynamic Rendering', Dynamic)\n  .add('Dependent Fields', Dependent);\n\nstoriesOf('Conditionals', module)\n  .add('Conditional Props', ConditionalProps)\n  .add('Conditional Props Schema', ConditionalPropsSchema);\n\nstoriesOf('Global Forms', module).add('Intro', GlobalIntro);\n\nstoriesOf('Playground', module)\n  .add('Format Example', FormatPlayground)\n  .add('Schema Example', SchemaPlayground);\n","/* ------------- Imports -------------- */\nimport React, { Component } from 'react';\nimport { PrismCode } from 'react-prism';\n\nclass Code extends Component {\n  render() {\n    const { children, language, ...rest } = this.props;\n\n    return (\n      <pre {...rest}>\n        <PrismCode className={language}>{children}</PrismCode>\n      </pre>\n    );\n  }\n}\n\nexport default Code;\n","import React from 'react';\nimport { Sandpack } from '@codesandbox/sandpack-react';\n\nconst style = `\ninput {\n  margin-bottom: 1rem;\n}\n\ninput:not([type='checkbox']):not([type='radio']),\ntextarea,\nselect {\n  margin-bottom: 1rem;\n  margin-top: 1rem;\n  display: block;\n  border-radius: 20px;\n  width: 100%;\n  padding: 10px 20px;\n  font-weight: 500;\n  border: 1px solid transparent;\n  max-width: 400px;\n  background-color: #f4f4f4;\n}\n\n.radio-label {\n  display: block;\n}\n\ntextarea {\n  max-width: 100%;\n}\n\nselect {\n  /* needed */\n  -webkit-appearance: none;\n  -moz-appearance: none;\n  appearance: none;\n  /* SVG background image */\n  background-image: url('data:image/svg+xml;charset=UTF-8,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%2212%22%20height%3D%2212%22%20viewBox%3D%220%200%2012%2012%22%3E%3Ctitle%3Edown-arrow%3C%2Ftitle%3E%3Cg%20fill%3D%22%23000000%22%3E%3Cpath%20d%3D%22M10.293%2C3.293%2C6%2C7.586%2C1.707%2C3.293A1%2C1%2C0%2C0%2C0%2C.293%2C4.707l5%2C5a1%2C1%2C0%2C0%2C0%2C1.414%2C0l5-5a1%2C1%2C0%2C1%2C0-1.414-1.414Z%22%20fill%3D%22%23000000%22%3E%3C%2Fpath%3E%3C%2Fg%3E%3C%2Fsvg%3E');\n  background-size: 0.6em;\n  background-position: calc(100% - 1.3em) center;\n  background-repeat: no-repeat;\n}\n\n.select:before {\n  content: '';\n  position: absolute;\n  right: 10px;\n  top: 8px;\n  width: 0;\n  height: 0;\n  border-left: 10px solid transparent;\n  border-right: 10px solid transparent;\n  border-top: 10px solid #f00;\n}\n\n.select:after {\n  content: '';\n  position: absolute;\n  right: 10px;\n  top: 3px;\n  width: 0;\n  height: 0;\n  border-left: 10px solid transparent;\n  border-right: 10px solid transparent;\n  border-top: 10px solid #333;\n}\n\nlabel {\n  /* text-align: left; */\n  /* margin-left: 1rem; */\n  margin-bottom: 1rem;\n  display: block;\n}\n\nbutton {\n  text-align: left;\n  display: inline-block;\n  height: var(--informed-height--pill);\n  border: 1px solid transparent;\n  border-radius: 20px;\n  padding: 5px 40px;\n  color: white;\n  background-color: rebeccapurple;\n  margin-bottom: 1rem;\n  margin-top: 1rem;\n  margin-right: 1rem;\n}\n\nbutton[type='submit'] {\n  display: block;\n}\n\n.informed-container {\n  padding: 4rem;\n}\n\n.informed-black {\n  background-color: rgb(13, 16, 17);\n  color: white !important;\n}\n\n.informed-black input:not([type='checkbox']):not([type='radio']),\n.informed-black select,\n.informed-black textarea {\n  background-color: #222222;\n  color: white;\n}\n\n.informed-black select {\n  background-image: url(\"data:image/svg+xml;charset=UTF-8,%3Csvg xmlns='http://www.w3.org/2000/svg' width='12' height='12' viewBox='0 0 12 12'%3E%3Ctitle%3Edown-arrow%3C/title%3E%3Cg fill='%23000000'%3E%3Cpath d='M10.293,3.293,6,7.586,1.707,3.293A1,1,0,0,0,.293,4.707l5,5a1,1,0,0,0,1.414,0l5-5a1,1,0,1,0-1.414-1.414Z' fill='%23FFFFFF'%3E%3C/path%3E%3C/g%3E%3C/svg%3E\");\n  /* filter: invert(1); */\n}\n`;\n\nexport const CodeBlock = ({ code }) => {\n  return (\n    <Sandpack\n      template=\"react\"\n      theme=\"codesandbox-dark\"\n      files={{\n        '/App.js': code,\n        '/style.css': {\n          code: style,\n          hidden: true\n        }\n      }}\n      options={{\n        showLineNumbers: true,\n        showNavigator: true,\n        editorHeight: 570\n      }}\n      customSetup={{\n        dependencies: {\n          informed: 'latest'\n        },\n        entry: '/index.js'\n      }}\n    />\n  );\n};\n","import React, { Component } from 'react';\n\nclass Modal extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      open: false\n    };\n  }\n\n  componentDidMount() {\n    if (this.props.getControl) {\n      this.props.getControl(this.controller);\n    }\n  }\n\n  open = () => {\n    this.setState({\n      open: true\n    });\n  };\n\n  close = () => {\n    this.setState({\n      open: false\n    });\n  };\n\n  get controller() {\n    return {\n      open: this.open,\n      close: this.close\n    };\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        {this.state.open ? (\n          <React.Fragment>\n            <div\n              style={{\n                position: 'fixed',\n                top: 0,\n                bottom: 0,\n                left: 0,\n                right: 0,\n                backgroundColor: 'rgba(0,0,0,0.7)'\n              }}\n            />\n            <div\n              style={{\n                minHeight: '50px',\n                minWidth: '400px',\n                position: 'fixed',\n                paddingBottom: '2.5rem',\n                top: '50%',\n                left: '50%',\n                backgroundColor: 'white',\n                transform: 'translate(-50%, -50%)',\n                borderRadius: '6px',\n                boxShadow: '2px 2px 4px rgba(0,0,0,0.3)',\n                display: 'flex',\n                flexDirection: 'column'\n              }}>\n              <div\n                style={{\n                  flex: 1,\n                  textAlign: 'right',\n                  color: 'rgb(167, 26, 21)',\n                  fontSize: '1.8rem'\n                }}>\n                <span\n                  style={{ marginRight: '1rem', cursor: 'pointer' }}\n                  onClick={this.close}>\n                  <strong>x</strong>\n                </span>\n              </div>\n              <div style={{ flex: 4, textAlign: 'center' }}>\n                {this.props.children}\n              </div>\n            </div>\n          </React.Fragment>\n        ) : null}\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Modal;\n","// eslint-disable-next-line import/no-extraneous-dependencies\nimport React from 'react';\n\n// import logo from '../../src/assets/logo_torch.svg';\n\nexport default story => (\n  <div className=\"informed-container\">\n    {/* <img\n      alt={'Torch UI'}\n      src={logo}\n      style={{ width: '150', marginBottom: '1rem' }}\n    /> */}\n    {story()}\n  </div>\n);\n","import React from 'react';\nimport { withDocs } from 'storybook-readme';\n\nexport default withDocs;\n\n// export default withDocs({\n//   PreviewComponent: ({ children }) => (\n//     <div\n//       style={{\n//         marginTop: '2rem',\n//         marginBottom: '2rem',\n//         border: '1px dashed #e5e5e5',\n//       }}>\n//       {children}\n//     </div>\n//   ),\n//   FooterComponent: ({ children }) => <div>{children}</div>\n// });\n","import '@storybook/react';","/* (ignored) */"],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACllBA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAFA;AACA;AAuCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAWA;AACA;AADA;AArBA;AA2BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC/GA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAEA;AACA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AApEA;AAsEA;;;;;;;;;;;;;AClFA;;;;;;;;;;;;;ACAA;AACA;AACA;AAEA;AACA;AACA;AADA;;;;;;;;;;;;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;ACNA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChjBA;AACA;AAoBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAxIA;AAAA;AAAA;AA0IA;AACA;AA3IA;AAAA;AAAA;AA8IA;AACA;AA/IA;AAAA;AAAA;AAkJA;AACA;AAnJA;AAAA;AAAA;AAsJA;AACA;AAvJA;AAAA;AAAA;AA0JA;AACA;AA3JA;AAAA;AAAA;AA8JA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AA5KA;AAAA;AAAA;AA+KA;AACA;AACA;AACA;AACA;AACA;AApLA;AAAA;AAAA;AAuLA;AACA;AACA;AACA;AA1LA;AAAA;AAAA;AA6LA;AACA;AACA;AACA;AAhMA;AAAA;AAAA;AAmMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA3MA;AAAA;AAAA;AA8MA;AACA;AACA;AACA;AACA;AACA;AACA;AApNA;AAAA;AAAA;AAuNA;AACA;AAxNA;AAAA;AAAA;AA0NA;AACA;AAAA;AACA;AAEA;AAGA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AACA;AAAA;AACA;AAKA;AAEA;AACA;AACA;AADA;AACA;AACA;AACA;AACA;AAAA;AACA;AAKA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AA7ZA;AAAA;AAAA;AA+ZA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAKA;AACA;AAIA;AACA;AACA;AADA;AAEA;AACA;AAhcA;AAAA;AAAA;AAmcA;AACA;AApcA;AAAA;AAAA;AAucA;AACA;AAxcA;AAAA;AAAA;AA0cA;AACA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA3dA;AAAA;AAAA;AA8dA;AACA;AA/dA;AAAA;AAAA;AAieA;AACA;AAAA;AACA;AAEA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAIA;AACA;AACA;AAKA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AA/hBA;AAAA;AAAA;AAkiBA;AACA;AAniBA;AAAA;AAAA;AAsiBA;AACA;AACA;AACA;AAziBA;AAAA;AAAA;AA4iBA;AACA;AA7iBA;AAAA;AAAA;AAgjBA;AACA;AACA;AACA;AACA;AACA;AArjBA;AAAA;AAAA;AAwjBA;AACA;AAzjBA;AAAA;AAAA;AA4jBA;AACA;AA7jBA;AAAA;AAAA;AAgkBA;AACA;AAjkBA;AAAA;AAAA;AAokBA;AACA;AArkBA;AAAA;AAAA;AAwkBA;AACA;AACA;AA1kBA;AAAA;AAAA;AA6kBA;AACA;AA9kBA;AAAA;AAAA;AAilBA;AACA;AAllBA;AAAA;AAAA;AAqlBA;AACA;AAtlBA;AAAA;AAAA;AAylBA;AACA;AACA;AAEA;AACA;AA9lBA;AAAA;AAAA;AAimBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArCA;AAuCA;AAxoBA;AAAA;AAAA;AA0oBA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAdA;AAgBA;AAnrBA;AAAA;AAAA;AAqrBA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAjuBA;AAAA;AAAA;AAouBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AAjvBA;AAAA;AAAA;AAovBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AAjwBA;AAAA;AAAA;AAowBA;AACA;AACA;AACA;AACA;AACA;AACA;AA1wBA;AAAA;AAAA;AA6wBA;AACA;AAAA;AACA;AACA;AACA;AACA;AAlxBA;AAAA;AAAA;AAqxBA;AAEA;AACA;AACA;AACA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAIA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AAHA;AAMA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAx1BA;AAAA;AAAA;AA21BA;AAKA;AACA;AAEA;AACA;AAEA;AAGA;AACA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA94BA;AAAA;AAAA;AAi5BA;AAKA;AACA;AAEA;AACA;AAEA;AACA;AACA;AA95BA;AAAA;AAAA;AAg6BA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AAEA;AAGA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAMA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAMA;AACA;AACA;AACA;AA99BA;AAAA;AAAA;AAg+BA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AAEA;AAGA;AACA;AAGA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAMA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAMA;AACA;AACA;AACA;AAzhCA;AAAA;AAAA;AA4hCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAjBA;AAoBA;AACA;AACA;AAEA;AACA;AArjCA;AAAA;AAAA;AAujCA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAhlCA;AAAA;AAAA;AAklCA;AACA;AADA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AAJA;AAOA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAJA;AAQA;AAGA;AACA;AACA;AAHA;AAOA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAzrCA;AAAA;AAAA;AA2rCA;AACA;AAAA;AACA;AACA;AACA;AAEA;AAEA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAHA;AAKA;AACA;AADA;AAIA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAztCA;AAAA;AAAA;AA4tCA;AACA;AACA;AA9tCA;AAAA;AAAA;AAiuCA;AACA;AACA;AAnuCA;AAAA;AAAA;AAsuCA;AACA;AAvuCA;AAAA;AAAA;AA0uCA;AACA;AA3uCA;AAAA;AAAA;AA8uCA;AACA;AACA;AAhvCA;AAAA;AAAA;AAmvCA;AACA;AACA;AACA;AACA;AACA;AAxvCA;AAAA;AAAA;AA0vCA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AA7yCA;AAAA;AAAA;AA+yCA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAzzCA;AAAA;AAAA;AA2zl7CA;AAAA;AAAA;AAo7CA;AACA;AAAA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AA/7CA;AAAA;AAAA;AAk8CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAGA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AA5+CA;AAAA;AAAA;AA6+CA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAp/CA;AAAA;AAAA;AAu/CA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AA9/CA;AAAA;AAAA;AAigDA;AACA;AACA;AACA;AApgDA;AACA;AADA;AAAA;;;;;;;;;;;;;;;;;;;;;;;ACrDA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAIA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAKA;AAAA;AAGA;AACA;AAEA;AACA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AAIA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAGA;AACA;AACA;AADA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AADA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AALA;AAAA;AAAA;AAQA;AACA;AACA;AACA;AAXA;AAAA;AAAA;AAcA;AACA;AAfA;AAAA;AAAA;AAkBA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAXA;AAgBA;AACA;AACA;AACA;AACA;AAlDA;AAAA;AAAA;AAqDA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArEA;AAAA;AAAA;AAwEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAvFA;AAAA;AAAA;AA0FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAzGA;AAAA;AAAA;AA4GA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArHA;AACA;AADA;AAAA;AACA;AAuHA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AAAA;AAEA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvUA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AAEA;AACA;AACA;AAMA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAEA;AACA;AACA;AAHA;AAIA;AAAA;AAGA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAFA;AAQA;AACA;AACA;AACA;AACA;AACA;AAKA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAQA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AA7CA;AA+CA;AAEA;AAGA;AAEA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AAJA;AACA;AAMA;AAEA;AAGA;AAHA;AAKA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAKA;AACA;AAHA;AAUA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAOA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AADA;AAGA;AACA;AAJA;AAQA;AACA;AACA;;;;;;;;;;;;;;AC/OA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAKA;;;;;;;;;;;;;;;;;;;;;;;ACpBA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;ACpBA;AACA;AACA;AAEA;AAEA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AAFA;AACA;AAGA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AALA;AASA;;;;;;;;;;;;;;;;;;;ACnCA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAEA;AAAA;AACA;AAAA;AAAA;AACA;AAGA;AAAA;AAAA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpBA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAUA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AAJA;AACA;AAOA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAKA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AAIA;AAKA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAQA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAIA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAFA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvRA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AAGA;AAEA;AAEA;AACA;AACA;AACA;AAJA;AAQA;AACA;AADA;AAGA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAMA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAIA;AACA;AACA;AAFA;AAIA;AAEA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AAEA;AACA;AAIA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;AChKA;AACA;AACA;AAEA;AAEA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAGA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AADA;AACA;;;;;;;;;;;;;ACxBA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACPA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;;;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;;;;;AAGA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;;;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;;;;;;AAGA;AAAA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAIA;;;;;;;;;;;;;;;;;;;;;;;;AC/GA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;;;;;;;;;;;;;AChBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAHA;AAMA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAdA;AAgBA;AAIA;AACA;AAAA;AAIA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACtFA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;;;;;;;;;;;;;;ACZA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAAA;AAAA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;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AA+EA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAHA;AACA;AAKA,gCAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAMA;AACA;AAOA;AAGA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AAAA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;AC9RA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAbA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACVA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAQA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AAbA;AAAA;AAAA;AAAA;AACA;AACA;AAcA;AACA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAFA;AAIA;AAPA;AASA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAAA;AAAA;AADA;AAIA;AACA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AACA;AAFA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAMA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAnBA;AAqBA;AACA;AAGA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAHA;AACA;AASA;AACA;AACA;AACA;AAHA;AAKA;;;;;;;;;;;;;AChRA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACNA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACNA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACNA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AAAA;AACA;AAVA;AAAA;AAAA;AACA;AAWA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAIA;AAIA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AAEA;AACA;AAGA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/GA;AACA;AACA;AACA;AAKA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnFA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClCA;AAQA;AACA;AACA;AACA;AACA;AACA;AAMA;AAQA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAAA;AA0DA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AAGA;AAEA;AAGA;AACA;AAKA;AAAA;AACA;AADA;AAAA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AADA;AAGA;AACA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAJA;AACA;AAOA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AACA;AACA;AAMA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAXA;AADA;AACA;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlCA;AAoCA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAJA;AAMA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AAJA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA;AAmBA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AAXA;AAaA;;;;;;;;;;;;;ACjaA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAjBA;AAmBA;AACA;AACA;AAAA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;;;;;;;;;;;;;ACjCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAIA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnDA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAIA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAIA;AAGA;AAEA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AAAA;AAEA;AACA;AAIA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnFA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACPA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AAEA;AAsCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAEA;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAzBA;AA4BA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAGA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAHA;AACA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;ACnOA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;;;;;;;;;;;;;ACPA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;;;;;;;;;;;;;ACPA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;;;;;;;;;;;;;ACPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AAEA;AACA;AACA;AAOA;AAEA;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;;;;;;;;;;;;;AChDA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AACA;AACA;;;;;;;;;;;;;ACNA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAHA;AAKA;AAEA;AACA;;;;;;;;;;;;;ACtBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAIA;AACA;;;;;;;;;;;;;AC1CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAIA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpCA;AACA;AAKA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAOA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAMA;AACA;AACA;AADA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAFA;AAKA;AACA;AACA;AAEA;AACA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAEA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAHA;AACA;AAKA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAPA;AAUA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AACA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAHA;AAKA;AACA;AACA;AAIA;AAAA;AACA;AAAA;AACA;AAAA;AAFA;AACA;AAOA;AAGA;AAHA;AAKA;AACA;;;;;;;;;;;;;;AC3UA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACNA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACNA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AAEA;AACA;AACA;AACA;AACA;AAJA;AACA;AAOA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;;;;;;;;;;;;;;AC1FA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AAAA;AACA;AAVA;AAAA;AAAA;AAAA;AACA;AAWA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAIA;AAIA;AACA;AACA;AACA;AACA;AACA;AAJA;AACA;AAMA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AAGA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAOA;AACA;AAIA;AACA;;;;;;;;;;;;;ACpIA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AACA;AAGA;AACA;AACA;AACA;AAAA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AADA;AACA;AACA;AACA;AAAA;AACA;;;;;;;;;;;;;ACvBA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AApBA;AAsBA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAIA;AACA;AACA;;;;;;;;;;;;;;ACvCA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AADA;AACA;AACA;AACA;AAAA;AACA;AAIA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/BA;AACA;AAGA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACxBA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACzhDA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAtCA;AAwCA;AAEA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AADA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAdA;AAAA;AACA;AADA;AAeA;AAAA;AACA;AACA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAhCA;AAAA;AAAA;AAAA;AAAA;AACA;AAiCA;AACA;AAEA;AACA;AAEA;AACA;;;;;;;;;;;;;AClLA;AAAA;AACA;AACA;AACA;AAGA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACNA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AACA;AADA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AADA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAdA;AACA;AADA;AAAA;AACA;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAXA;AAaA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AACA;AADA;AAMA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAXA;AAAA;AAAA;AAAA;AAAA;AAYA;AACA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AAIA;AACA;AAAA;AACA;AAEA;AACA;AACA;AAIA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AA7DA;AA+DA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAGA;AACA;AAAA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AADA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AAAA;AACA;AACA;AACA;AAEA;AAEA;AAPA;AASA;AACA;AACA;AACA;AAEA;AANA;AAQA;AACA;AACA;AAEA;AALA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AADA;AACA;AAEA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAMA;AAEA;AACA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AAEA;AACA;AACA;AAAA;AACA;AADA;AACA;AACA;AACA;AAGA;AAAA;AAAA;AAIA;AACA;AAAA;AAEA;AAAA;AAAA;AACA;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAEA;AACA;AACA;AAEA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAGA;AAGA;AACA;AACA;AAAA;AAGA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAKA;AAAA;AAGA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAGA;AAKA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAsBA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAbA;AACA;AA2BA;AACA;AACA;AAAA;AACA;AACA;AACA;AAFA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAFA;AAKA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAIA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAxCA;AA0CA;AACA;AACA;;;;;;;;;;;;;ACtlCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACtBA;;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAHA;AANA;AAmBA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AA9BA;AACA;AAmCA;;;;;;;;;;;;;AC1CA;;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAQA;AACA;AAEA;AACA;AAFA;AAKA;AACA;AAFA;AANA;AAcA;AACA;AAE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;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAKA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAKA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAOA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAKA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAUA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAKA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAcA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AATA;AACA;AAcA;;;;;;;;;;;;;AClfA;;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAFA;AAAA;AACA;AAIA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAEA;AAAA;AAJA;AACA;AAOA;;;;;;;;;;;;;ACtCA;;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAJA;AAQA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAFA;AAXA;AATA;AAFA;AACA;AA6BA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AAJA;AACA;AAOA;;;;;;;;;;;;;ACpDA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAVA;AAAA;AAAA;AAAA;AAAA;AACA;AAeA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AAEA;AAIA;AACA;AACA;AACA;AAAA;AAAA;AALA;AASA;AACA;AACA;AACA;AAAA;AAAA;AALA;AASA;AACA;AACA;AAAA;AAGA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AAFA;AAFA;AAQA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AAAA;AAEA;AACA;AAFA;AADA;AAFA;AAWA;AAAA;AA3BA;AAHA;AACA;AAslTA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAGA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAIA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAhBA;AAkBA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA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;AAEA;AAYA;AACA;AACA;AACA;AAEA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAZA;AACA;AAkBA;AACA;AACA;AACA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AAiBA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AADA;AAIA;AADA;AARA;AAaA;AACA;AACA;AAAA;AACA;AACA;AASA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AADA;AAGA;AACA;AACA;AACA;AACA;AAPA;AAQA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAEA;AAAA;AAFA;AAYA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AACA;AAYA;AACA;AACA;AAhBA;AAqBA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAMA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AAOA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AALA;AAQA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AANA;AAWA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AADA;AAAA;AAAA;AADA;AAGA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AAJA;AAQA;AACA;AACA;AACA;AACA;AAAA;AACA;AADA;AAAA;AAAA;AALA;AAUA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AADA;AAAA;AAAA;AANA;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;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AAFA;AAIA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AAFA;AAIA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AAFA;AAIA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AAEA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AACA;AAKA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAAA;AACA;AATA;AAAA;AAcA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA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;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AAMA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAGA;AAAA;AAAA;AAMA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AAAA;AACA;AAAA;AAAA;AAGA;AAAA;AAAA;AAMA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAIA;AAAA;AAAA;AAIA;AAAA;AAIA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AADA;AAEA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAJA;AAMA;AAAA;AACA;AAAA;AAAA;AAGA;AAAA;AAIA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA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;AACA;AAFA;AAKA;AACA;AAFA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AALA;AASA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AARA;AASA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAJA;AAJA;AAWA;AAAA;AAAA;AAnCA;AAHA;AAXA;AANA;AAHA;AACA;AAgEA;AAAA;AAEA;AACA;AAFA;AAIA;AAAA;AAAA;AAAA;AAJA;AAKA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAZA;AACA;AAiBA;;;;;;;;;;;;;ACpHA;;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AADA;AAJA;AAUA;AACA;AACA;AAEA;AADA;AAJA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAFA;AAIA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AARA;AASA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAJA;AAJA;AAWA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAFA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AAPA;AAQA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AARA;AASA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AALA;AAJA;AAtBA;AAJA;AAPA;AAnCA;AAHA;AAVA;AANA;AAHA;AACA;AA8GA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAHA;AAIA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAXA;AACA;AAgBA;;;;;;;;;;;;;AC5JA;;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AAFA;AAKA;AACA;AAFA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAJA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AALA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AALA;AASA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AALA;AAJA;AA7BA;AAHA;AAZA;AANA;AAHA;AACA;AAsEA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAHA;AAIA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAXA;AACA;AAgBA;;;;;;;;;;;;;AC1GA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AADA;AAJA;AANA;AAFA;AAmBA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AADA;AAJA;AANA;AAFA;AACA;AAkBA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAIA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAGA;AAAA;AAGA;AACA;AACA;;;;;;;;;;;;;ACxEA;;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AADA;AARA;AAYA;AACA;AACA;AACA;AAHA;AAbA;AAmBA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AALA;AADA;AADA;AAFA;AAgBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AATA;AADA;AADA;AAFA;AArCA;AACA;AAwDA;AAAA;AACA;AAAA;AAEA;AAAA;AAHA;AACA;AAOA;;;;;;;;;;;;;ACvEA;;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AAJA;AANA;AAaA;AAEA;AACA;AACA;AAAA;AAAA;AADA;AAGA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AAHA;AADA;AADA;AAPA;AAjBA;AAsCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAMA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAHA;AACA;AAOA;;;;;;;;;;;;;ACnGA;;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AANA;AAQA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AADA;AAGA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAJA;AAQA;AATA;AAWA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AAHA;AADA;AADA;AALA;AAbA;AARA;AAXA;AApBA;AAyEA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AADA;AAGA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AAHA;AADA;AAOA;AARA;AARA;AAoBA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AADA;AADA;AAKA;AACA;AACA;AACA;AACA;AACA;AAHA;AADA;AADA;AAPA;AAkBA;AAjHA;AACA;AAmHA;AAAA;AACA;AAAA;AAEA;AAAA;AAHA;AACA;AAOA;;;;;;;;;;;;;AClIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AAaA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAIA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AACA;AAIA;AAGA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AAGA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AACA;AAIA;AAGA;AAAA;AAEA;AAEA;AACA;AACA;AAHA;AADA;AAYA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAQA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAQA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AAEA;AAAA;AAFA;AASA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AACA;AAUA;AAEA;AACA;AAFA;AAKA;AACA;AAFA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AADA;AAVA;AAcA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AALA;AANA;AAHA;AAPA;AAzBA;AAHA;AACA;AA0DA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAHA;AACA;AAOA;;;;;;;;;;;;;ACxNA;;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AADA;AAJA;AANA;AAFA;AANA;AAFA;AACA;AA4BA;AAAA;AACA;AAAA;AAEA;AAAA;AAGA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AAVA;AACA;AAcA;;;;;;;;;;;;;AClDA;;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AADA;AAGA;AAPA;AASA;AACA;AACA;AACA;AACA;AACA;AADA;AAJA;AAQA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AADA;AAHA;AAOA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAdA;AAiBA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AADA;AAXA;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAHA;AAKA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AALA;AATA;AA5DA;AAFA;AACA;AAkFA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AAHA;AACA;AAOA;;;;;;;;;;;;;ACnJA;;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AADA;AAJA;AANA;AAFA;AANA;AAFA;AACA;AA4BA;AAAA;AACA;AAAA;AAEA;AAAA;AAHA;AACA;AAOA;;;;;;;;;;;;;AC3CA;;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAHA;AANA;AAHA;AAFA;AAmBA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AA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","sourceRoot":""}